using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.DotNet;
using TaleWorlds.Library;

namespace TaleWorlds.Engine
{
	// Token: 0x02000043 RID: 67
	internal class EngineManaged : IManagedComponent
	{
		// Token: 0x17000014 RID: 20
		// (get) Token: 0x060005BA RID: 1466 RVA: 0x000034CC File Offset: 0x000016CC
		public string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.Engine.AutoGenerated.dll";
			}
		}

		// Token: 0x060005BB RID: 1467 RVA: 0x000034DD File Offset: 0x000016DD
		public EngineManaged()
		{
			EngineManaged._instance = this;
		}

		// Token: 0x060005BC RID: 1468 RVA: 0x000034EB File Offset: 0x000016EB
		void IManagedComponent.OnStart()
		{
		}

		// Token: 0x060005BD RID: 1469 RVA: 0x000034ED File Offset: 0x000016ED
		void IManagedComponent.OnCustomCallbackMethodPassed(string name, Delegate method)
		{
			if (name == "Engine")
			{
				EngineManaged.PassManagedEngineCallbackMethodPointersMono = method;
				this.OnInitialize();
			}
		}

		// Token: 0x060005BE RID: 1470 RVA: 0x00003508 File Offset: 0x00001708
		void IManagedComponent.OnApplicationTick(float dt)
		{
			EngineController.OnApplicationTick(dt);
		}

		// Token: 0x060005BF RID: 1471 RVA: 0x00003510 File Offset: 0x00001710
		private void OnInitialize()
		{
			List<Type> typesSafe = AssemblyLoader.LoadFrom(this.ManagedCallbacksDll, true).GetTypesSafe(null);
			Type type = null;
			foreach (Type type2 in typesSafe)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			EngineManaged._callbackManager = (type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager);
			EngineManaged._callbackManager.Initialize();
			Delegate[] delegates = EngineManaged._callbackManager.GetDelegates();
			for (int i = 0; i < delegates.Length; i++)
			{
				try
				{
					EngineManaged.PassManagedEngineCallbackMethodPointers(delegates[i]);
				}
				catch (Exception arg)
				{
					EngineManaged.PassManagedEngineCallbackMethodPointers(null);
					Console.WriteLine(arg + " " + i);
				}
			}
			EngineApplicationInterface.SetObjects(EngineManaged._callbackManager.GetScriptingInterfaceObjects());
			Managed.AddConstructorDelegateOfWeakReferenceClass<GameEntity>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<Scene>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<ManagedScriptComponent>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<Texture>();
			EngineScreenManager.Initialize();
		}

		// Token: 0x060005C0 RID: 1472 RVA: 0x0000362C File Offset: 0x0000182C
		[EngineCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			EngineManaged._engineApiPointers.Add(id, pointer);
		}

		// Token: 0x060005C1 RID: 1473 RVA: 0x0000363A File Offset: 0x0000183A
		[EngineCallback]
		internal static void CheckSharedStructureSizes()
		{
			EngineManaged._callbackManager.CheckSharedStructureSizes();
		}

		// Token: 0x060005C2 RID: 1474 RVA: 0x00003648 File Offset: 0x00001848
		[EngineCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in EngineManaged._engineApiPointers)
			{
				try
				{
					EngineManaged._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[]
					{
						"error: ",
						keyValuePair.Key,
						" ",
						ex
					}));
				}
			}
		}

		// Token: 0x060005C3 RID: 1475 RVA: 0x000036F0 File Offset: 0x000018F0
		private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
		{
			if (EngineManaged.PassManagedEngineCallbackMethodPointersMono != null)
			{
				EngineManaged.PassManagedEngineCallbackMethodPointersMono.DynamicInvoke(new object[]
				{
					methodDelegate
				});
			}
		}

		// Token: 0x04000053 RID: 83
		private static EngineManaged _instance;

		// Token: 0x04000054 RID: 84
		private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		// Token: 0x04000055 RID: 85
		private static ICallbackManager _callbackManager;

		// Token: 0x04000056 RID: 86
		private static Delegate PassManagedEngineCallbackMethodPointersMono = null;
	}
}
