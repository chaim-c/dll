using System;
using System.Collections.Generic;
using TaleWorlds.Localization;

namespace TaleWorlds.Core
{
	// Token: 0x02000034 RID: 52
	public sealed class SkillObject : PropertyObject
	{
		// Token: 0x060003F1 RID: 1009 RVA: 0x0000F37F File Offset: 0x0000D57F
		internal static void AutoGeneratedStaticCollectObjectsSkillObject(object o, List<object> collectedObjects)
		{
			((SkillObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060003F2 RID: 1010 RVA: 0x0000F38D File Offset: 0x0000D58D
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060003F3 RID: 1011 RVA: 0x0000F396 File Offset: 0x0000D596
		public SkillObject(string stringId) : base(stringId)
		{
		}

		// Token: 0x060003F4 RID: 1012 RVA: 0x0000F39F File Offset: 0x0000D59F
		public void SetAttribute(CharacterAttribute attribute)
		{
			this.CharacterAttribute = attribute;
		}

		// Token: 0x17000151 RID: 337
		// (get) Token: 0x060003F5 RID: 1013 RVA: 0x0000F3A8 File Offset: 0x0000D5A8
		// (set) Token: 0x060003F6 RID: 1014 RVA: 0x0000F3B0 File Offset: 0x0000D5B0
		public CharacterAttribute CharacterAttribute
		{
			get
			{
				return this._characterAttribute;
			}
			private set
			{
				this._characterAttribute = value;
				this._characterAttribute.AddSkill(this);
			}
		}

		// Token: 0x060003F7 RID: 1015 RVA: 0x0000F3C5 File Offset: 0x0000D5C5
		public override string ToString()
		{
			return base.Name.ToString();
		}

		// Token: 0x060003F8 RID: 1016 RVA: 0x0000F3D2 File Offset: 0x0000D5D2
		public SkillObject Initialize(TextObject name, TextObject description, SkillObject.SkillTypeEnum skillType)
		{
			base.Initialize(name, description);
			this._skillType = skillType;
			base.AfterInitialized();
			return this;
		}

		// Token: 0x17000152 RID: 338
		// (get) Token: 0x060003F9 RID: 1017 RVA: 0x0000F3EA File Offset: 0x0000D5EA
		public bool IsLeaderSkill
		{
			get
			{
				return this._skillType == SkillObject.SkillTypeEnum.Leader;
			}
		}

		// Token: 0x17000153 RID: 339
		// (get) Token: 0x060003FA RID: 1018 RVA: 0x0000F3F5 File Offset: 0x0000D5F5
		public bool IsPartySkill
		{
			get
			{
				return this._skillType == SkillObject.SkillTypeEnum.Party;
			}
		}

		// Token: 0x17000154 RID: 340
		// (get) Token: 0x060003FB RID: 1019 RVA: 0x0000F400 File Offset: 0x0000D600
		public bool IsPersonalSkill
		{
			get
			{
				return this._skillType == SkillObject.SkillTypeEnum.Personal;
			}
		}

		// Token: 0x17000155 RID: 341
		// (get) Token: 0x060003FC RID: 1020 RVA: 0x0000F40B File Offset: 0x0000D60B
		public TextObject HowToLearnSkillText
		{
			get
			{
				if (GameTexts.FindText("str_how_to_learn_skill", base.StringId) == null)
				{
					return new TextObject("{=Aj3zqQq4}Not available", null);
				}
				return GameTexts.FindText("str_how_to_learn_skill", base.StringId);
			}
		}

		// Token: 0x0400020C RID: 524
		private SkillObject.SkillTypeEnum _skillType;

		// Token: 0x0400020D RID: 525
		private CharacterAttribute _characterAttribute;

		// Token: 0x020000EA RID: 234
		public enum SkillTypeEnum
		{
			// Token: 0x0400068F RID: 1679
			Personal,
			// Token: 0x04000690 RID: 1680
			Leader,
			// Token: 0x04000691 RID: 1681
			Party
		}
	}
}
