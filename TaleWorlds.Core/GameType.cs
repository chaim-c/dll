using System;
using System.Collections.Generic;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200002B RID: 43
	public abstract class GameType
	{
		// Token: 0x060002CD RID: 717 RVA: 0x0000C47E File Offset: 0x0000A67E
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x170000D4 RID: 212
		// (get) Token: 0x060002CE RID: 718 RVA: 0x0000C480 File Offset: 0x0000A680
		public virtual bool SupportsSaving
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000D5 RID: 213
		// (get) Token: 0x060002CF RID: 719 RVA: 0x0000C483 File Offset: 0x0000A683
		// (set) Token: 0x060002D0 RID: 720 RVA: 0x0000C48B File Offset: 0x0000A68B
		public Game CurrentGame { get; internal set; }

		// Token: 0x170000D6 RID: 214
		// (get) Token: 0x060002D1 RID: 721 RVA: 0x0000C494 File Offset: 0x0000A694
		public MBObjectManager ObjectManager
		{
			get
			{
				return this.CurrentGame.ObjectManager;
			}
		}

		// Token: 0x170000D7 RID: 215
		// (get) Token: 0x060002D2 RID: 722 RVA: 0x0000C4A1 File Offset: 0x0000A6A1
		public GameManagerBase GameManager
		{
			get
			{
				return this.CurrentGame.GameManager;
			}
		}

		// Token: 0x170000D8 RID: 216
		// (get) Token: 0x060002D3 RID: 723 RVA: 0x0000C4AE File Offset: 0x0000A6AE
		public virtual bool IsInventoryAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000D9 RID: 217
		// (get) Token: 0x060002D4 RID: 724 RVA: 0x0000C4B1 File Offset: 0x0000A6B1
		public virtual bool IsQuestScreenAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000DA RID: 218
		// (get) Token: 0x060002D5 RID: 725 RVA: 0x0000C4B4 File Offset: 0x0000A6B4
		public virtual bool IsCharacterWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000DB RID: 219
		// (get) Token: 0x060002D6 RID: 726 RVA: 0x0000C4B7 File Offset: 0x0000A6B7
		public virtual bool IsPartyWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000DC RID: 220
		// (get) Token: 0x060002D7 RID: 727 RVA: 0x0000C4BA File Offset: 0x0000A6BA
		public virtual bool IsKingdomWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000DD RID: 221
		// (get) Token: 0x060002D8 RID: 728 RVA: 0x0000C4BD File Offset: 0x0000A6BD
		public virtual bool IsClanWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000DE RID: 222
		// (get) Token: 0x060002D9 RID: 729 RVA: 0x0000C4C0 File Offset: 0x0000A6C0
		public virtual bool IsEncyclopediaWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000DF RID: 223
		// (get) Token: 0x060002DA RID: 730 RVA: 0x0000C4C3 File Offset: 0x0000A6C3
		public virtual bool IsBannerWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000E0 RID: 224
		// (get) Token: 0x060002DB RID: 731 RVA: 0x0000C4C6 File Offset: 0x0000A6C6
		public virtual bool IsDevelopment
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000E1 RID: 225
		// (get) Token: 0x060002DC RID: 732 RVA: 0x0000C4C9 File Offset: 0x0000A6C9
		public virtual bool IsCoreOnlyGameMode
		{
			get
			{
				return false;
			}
		}

		// Token: 0x170000E2 RID: 226
		// (get) Token: 0x060002DD RID: 733 RVA: 0x0000C4CC File Offset: 0x0000A6CC
		public virtual bool RequiresTutorial
		{
			get
			{
				return true;
			}
		}

		// Token: 0x060002DE RID: 734 RVA: 0x0000C4CF File Offset: 0x0000A6CF
		public GameType()
		{
			this._stepNo = GameTypeLoadingStates.InitializeFirstStep;
		}

		// Token: 0x060002DF RID: 735
		public abstract void OnStateChanged(GameState oldState);

		// Token: 0x060002E0 RID: 736
		protected internal abstract void BeforeRegisterTypes(MBObjectManager objectManager);

		// Token: 0x060002E1 RID: 737
		protected internal abstract void OnRegisterTypes(MBObjectManager objectManager);

		// Token: 0x060002E2 RID: 738
		protected internal abstract void OnInitialize();

		// Token: 0x060002E3 RID: 739
		protected abstract void DoLoadingForGameType(GameTypeLoadingStates gameTypeLoadingState, out GameTypeLoadingStates nextState);

		// Token: 0x060002E4 RID: 740 RVA: 0x0000C4E0 File Offset: 0x0000A6E0
		public bool DoLoadingForGameType()
		{
			bool result = false;
			GameTypeLoadingStates gameTypeLoadingStates = GameTypeLoadingStates.None;
			switch (this._stepNo)
			{
			case GameTypeLoadingStates.InitializeFirstStep:
				this.DoLoadingForGameType(GameTypeLoadingStates.InitializeFirstStep, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.WaitSecondStep)
				{
					this._stepNo++;
				}
				break;
			case GameTypeLoadingStates.WaitSecondStep:
				this.DoLoadingForGameType(GameTypeLoadingStates.WaitSecondStep, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.LoadVisualsThirdState)
				{
					this._stepNo++;
				}
				break;
			case GameTypeLoadingStates.LoadVisualsThirdState:
				this.DoLoadingForGameType(GameTypeLoadingStates.LoadVisualsThirdState, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.PostInitializeFourthState)
				{
					this._stepNo++;
				}
				break;
			case GameTypeLoadingStates.PostInitializeFourthState:
				this.DoLoadingForGameType(GameTypeLoadingStates.PostInitializeFourthState, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.None)
				{
					this._stepNo++;
					result = true;
				}
				break;
			}
			return result;
		}

		// Token: 0x060002E5 RID: 741
		public abstract void OnDestroy();

		// Token: 0x060002E6 RID: 742 RVA: 0x0000C585 File Offset: 0x0000A785
		public virtual void OnMissionIsStarting(string missionName, MissionInitializerRecord rec)
		{
		}

		// Token: 0x060002E7 RID: 743 RVA: 0x0000C587 File Offset: 0x0000A787
		public virtual void InitializeParameters()
		{
		}

		// Token: 0x040001B6 RID: 438
		private GameTypeLoadingStates _stepNo;
	}
}
