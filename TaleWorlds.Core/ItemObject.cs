using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000031 RID: 49
	public sealed class ItemObject : MBObjectBase
	{
		// Token: 0x06000364 RID: 868 RVA: 0x0000D48C File Offset: 0x0000B68C
		internal static void AutoGeneratedStaticCollectObjectsItemObject(object o, List<object> collectedObjects)
		{
			((ItemObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000365 RID: 869 RVA: 0x0000D49A File Offset: 0x0000B69A
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x1700010E RID: 270
		// (get) Token: 0x06000366 RID: 870 RVA: 0x0000D4A3 File Offset: 0x0000B6A3
		// (set) Token: 0x06000367 RID: 871 RVA: 0x0000D4AB File Offset: 0x0000B6AB
		public ItemComponent ItemComponent { get; private set; }

		// Token: 0x1700010F RID: 271
		// (get) Token: 0x06000368 RID: 872 RVA: 0x0000D4B4 File Offset: 0x0000B6B4
		// (set) Token: 0x06000369 RID: 873 RVA: 0x0000D4BC File Offset: 0x0000B6BC
		public string MultiMeshName { get; private set; }

		// Token: 0x17000110 RID: 272
		// (get) Token: 0x0600036A RID: 874 RVA: 0x0000D4C5 File Offset: 0x0000B6C5
		// (set) Token: 0x0600036B RID: 875 RVA: 0x0000D4CD File Offset: 0x0000B6CD
		public string HolsterMeshName { get; private set; }

		// Token: 0x17000111 RID: 273
		// (get) Token: 0x0600036C RID: 876 RVA: 0x0000D4D6 File Offset: 0x0000B6D6
		// (set) Token: 0x0600036D RID: 877 RVA: 0x0000D4DE File Offset: 0x0000B6DE
		public string HolsterWithWeaponMeshName { get; private set; }

		// Token: 0x17000112 RID: 274
		// (get) Token: 0x0600036E RID: 878 RVA: 0x0000D4E7 File Offset: 0x0000B6E7
		// (set) Token: 0x0600036F RID: 879 RVA: 0x0000D4EF File Offset: 0x0000B6EF
		public string[] ItemHolsters { get; private set; }

		// Token: 0x17000113 RID: 275
		// (get) Token: 0x06000370 RID: 880 RVA: 0x0000D4F8 File Offset: 0x0000B6F8
		// (set) Token: 0x06000371 RID: 881 RVA: 0x0000D500 File Offset: 0x0000B700
		public Vec3 HolsterPositionShift { get; private set; }

		// Token: 0x17000114 RID: 276
		// (get) Token: 0x06000372 RID: 882 RVA: 0x0000D509 File Offset: 0x0000B709
		// (set) Token: 0x06000373 RID: 883 RVA: 0x0000D511 File Offset: 0x0000B711
		public bool HasLowerHolsterPriority { get; private set; }

		// Token: 0x17000115 RID: 277
		// (get) Token: 0x06000374 RID: 884 RVA: 0x0000D51A File Offset: 0x0000B71A
		// (set) Token: 0x06000375 RID: 885 RVA: 0x0000D522 File Offset: 0x0000B722
		public string FlyingMeshName { get; private set; }

		// Token: 0x17000116 RID: 278
		// (get) Token: 0x06000376 RID: 886 RVA: 0x0000D52B File Offset: 0x0000B72B
		// (set) Token: 0x06000377 RID: 887 RVA: 0x0000D533 File Offset: 0x0000B733
		public string BodyName { get; private set; }

		// Token: 0x17000117 RID: 279
		// (get) Token: 0x06000378 RID: 888 RVA: 0x0000D53C File Offset: 0x0000B73C
		// (set) Token: 0x06000379 RID: 889 RVA: 0x0000D544 File Offset: 0x0000B744
		public string HolsterBodyName { get; private set; }

		// Token: 0x17000118 RID: 280
		// (get) Token: 0x0600037A RID: 890 RVA: 0x0000D54D File Offset: 0x0000B74D
		// (set) Token: 0x0600037B RID: 891 RVA: 0x0000D555 File Offset: 0x0000B755
		public string CollisionBodyName { get; private set; }

		// Token: 0x17000119 RID: 281
		// (get) Token: 0x0600037C RID: 892 RVA: 0x0000D55E File Offset: 0x0000B75E
		// (set) Token: 0x0600037D RID: 893 RVA: 0x0000D566 File Offset: 0x0000B766
		public bool RecalculateBody { get; private set; }

		// Token: 0x1700011A RID: 282
		// (get) Token: 0x0600037E RID: 894 RVA: 0x0000D56F File Offset: 0x0000B76F
		// (set) Token: 0x0600037F RID: 895 RVA: 0x0000D577 File Offset: 0x0000B777
		public string PrefabName { get; private set; }

		// Token: 0x1700011B RID: 283
		// (get) Token: 0x06000380 RID: 896 RVA: 0x0000D580 File Offset: 0x0000B780
		// (set) Token: 0x06000381 RID: 897 RVA: 0x0000D588 File Offset: 0x0000B788
		public TextObject Name { get; private set; }

		// Token: 0x1700011C RID: 284
		// (get) Token: 0x06000382 RID: 898 RVA: 0x0000D591 File Offset: 0x0000B791
		// (set) Token: 0x06000383 RID: 899 RVA: 0x0000D599 File Offset: 0x0000B799
		public ItemFlags ItemFlags { get; private set; }

		// Token: 0x1700011D RID: 285
		// (get) Token: 0x06000384 RID: 900 RVA: 0x0000D5A2 File Offset: 0x0000B7A2
		// (set) Token: 0x06000385 RID: 901 RVA: 0x0000D5AA File Offset: 0x0000B7AA
		public ItemCategory ItemCategory { get; private set; }

		// Token: 0x1700011E RID: 286
		// (get) Token: 0x06000386 RID: 902 RVA: 0x0000D5B3 File Offset: 0x0000B7B3
		// (set) Token: 0x06000387 RID: 903 RVA: 0x0000D5BB File Offset: 0x0000B7BB
		public int Value { get; private set; }

		// Token: 0x1700011F RID: 287
		// (get) Token: 0x06000388 RID: 904 RVA: 0x0000D5C4 File Offset: 0x0000B7C4
		// (set) Token: 0x06000389 RID: 905 RVA: 0x0000D5CC File Offset: 0x0000B7CC
		public float Effectiveness { get; private set; }

		// Token: 0x17000120 RID: 288
		// (get) Token: 0x0600038A RID: 906 RVA: 0x0000D5D5 File Offset: 0x0000B7D5
		// (set) Token: 0x0600038B RID: 907 RVA: 0x0000D5DD File Offset: 0x0000B7DD
		public float Weight { get; private set; }

		// Token: 0x17000121 RID: 289
		// (get) Token: 0x0600038C RID: 908 RVA: 0x0000D5E6 File Offset: 0x0000B7E6
		// (set) Token: 0x0600038D RID: 909 RVA: 0x0000D5EE File Offset: 0x0000B7EE
		public int Difficulty { get; private set; }

		// Token: 0x17000122 RID: 290
		// (get) Token: 0x0600038E RID: 910 RVA: 0x0000D5F7 File Offset: 0x0000B7F7
		// (set) Token: 0x0600038F RID: 911 RVA: 0x0000D5FF File Offset: 0x0000B7FF
		public float Appearance { get; private set; }

		// Token: 0x17000123 RID: 291
		// (get) Token: 0x06000390 RID: 912 RVA: 0x0000D608 File Offset: 0x0000B808
		// (set) Token: 0x06000391 RID: 913 RVA: 0x0000D610 File Offset: 0x0000B810
		public bool IsUsingTableau { get; private set; }

		// Token: 0x17000124 RID: 292
		// (get) Token: 0x06000392 RID: 914 RVA: 0x0000D619 File Offset: 0x0000B819
		public bool IsUsingTeamColor
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.UseTeamColor);
			}
		}

		// Token: 0x17000125 RID: 293
		// (get) Token: 0x06000393 RID: 915 RVA: 0x0000D62B File Offset: 0x0000B82B
		public bool DoesNotHideChest
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.DoesNotHideChest);
			}
		}

		// Token: 0x17000126 RID: 294
		// (get) Token: 0x06000394 RID: 916 RVA: 0x0000D63D File Offset: 0x0000B83D
		public bool IsCivilian
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.Civilian);
			}
		}

		// Token: 0x17000127 RID: 295
		// (get) Token: 0x06000395 RID: 917 RVA: 0x0000D64F File Offset: 0x0000B84F
		public bool UsingFacegenScaling
		{
			get
			{
				return this.Type == ItemObject.ItemTypeEnum.HeadArmor && this.ArmorComponent.MeshesMask.HasAnyFlag(SkinMask.HeadVisible);
			}
		}

		// Token: 0x17000128 RID: 296
		// (get) Token: 0x06000396 RID: 918 RVA: 0x0000D66E File Offset: 0x0000B86E
		// (set) Token: 0x06000397 RID: 919 RVA: 0x0000D676 File Offset: 0x0000B876
		public string ArmBandMeshName { get; private set; }

		// Token: 0x17000129 RID: 297
		// (get) Token: 0x06000398 RID: 920 RVA: 0x0000D67F File Offset: 0x0000B87F
		// (set) Token: 0x06000399 RID: 921 RVA: 0x0000D687 File Offset: 0x0000B887
		public bool IsFood { get; private set; }

		// Token: 0x1700012A RID: 298
		// (get) Token: 0x0600039A RID: 922 RVA: 0x0000D690 File Offset: 0x0000B890
		// (set) Token: 0x0600039B RID: 923 RVA: 0x0000D698 File Offset: 0x0000B898
		public bool IsUniqueItem { get; private set; }

		// Token: 0x1700012B RID: 299
		// (get) Token: 0x0600039C RID: 924 RVA: 0x0000D6A1 File Offset: 0x0000B8A1
		// (set) Token: 0x0600039D RID: 925 RVA: 0x0000D6A9 File Offset: 0x0000B8A9
		public float ScaleFactor { get; private set; }

		// Token: 0x1700012C RID: 300
		// (get) Token: 0x0600039E RID: 926 RVA: 0x0000D6B2 File Offset: 0x0000B8B2
		// (set) Token: 0x0600039F RID: 927 RVA: 0x0000D6BA File Offset: 0x0000B8BA
		public BasicCultureObject Culture { get; private set; }

		// Token: 0x1700012D RID: 301
		// (get) Token: 0x060003A0 RID: 928 RVA: 0x0000D6C3 File Offset: 0x0000B8C3
		// (set) Token: 0x060003A1 RID: 929 RVA: 0x0000D6CB File Offset: 0x0000B8CB
		public bool MultiplayerItem { get; private set; }

		// Token: 0x1700012E RID: 302
		// (get) Token: 0x060003A2 RID: 930 RVA: 0x0000D6D4 File Offset: 0x0000B8D4
		// (set) Token: 0x060003A3 RID: 931 RVA: 0x0000D6DC File Offset: 0x0000B8DC
		public bool NotMerchandise { get; private set; }

		// Token: 0x1700012F RID: 303
		// (get) Token: 0x060003A4 RID: 932 RVA: 0x0000D6E5 File Offset: 0x0000B8E5
		// (set) Token: 0x060003A5 RID: 933 RVA: 0x0000D6ED File Offset: 0x0000B8ED
		public bool IsCraftedByPlayer { get; private set; }

		// Token: 0x17000130 RID: 304
		// (get) Token: 0x060003A6 RID: 934 RVA: 0x0000D6F6 File Offset: 0x0000B8F6
		// (set) Token: 0x060003A7 RID: 935 RVA: 0x0000D6FE File Offset: 0x0000B8FE
		public int LodAtlasIndex { get; private set; }

		// Token: 0x17000131 RID: 305
		// (get) Token: 0x060003A8 RID: 936 RVA: 0x0000D707 File Offset: 0x0000B907
		public bool IsCraftedWeapon
		{
			get
			{
				return this.WeaponDesign != null;
			}
		}

		// Token: 0x17000132 RID: 306
		// (get) Token: 0x060003A9 RID: 937 RVA: 0x0000D715 File Offset: 0x0000B915
		// (set) Token: 0x060003AA RID: 938 RVA: 0x0000D71D File Offset: 0x0000B91D
		public WeaponDesign WeaponDesign { get; private set; }

		// Token: 0x17000133 RID: 307
		// (get) Token: 0x060003AB RID: 939 RVA: 0x0000D726 File Offset: 0x0000B926
		public WeaponComponentData PrimaryWeapon
		{
			get
			{
				WeaponComponent weaponComponent = this.WeaponComponent;
				if (weaponComponent == null)
				{
					return null;
				}
				return weaponComponent.PrimaryWeapon;
			}
		}

		// Token: 0x17000134 RID: 308
		// (get) Token: 0x060003AC RID: 940 RVA: 0x0000D739 File Offset: 0x0000B939
		public WeaponComponent WeaponComponent
		{
			get
			{
				return this.ItemComponent as WeaponComponent;
			}
		}

		// Token: 0x17000135 RID: 309
		// (get) Token: 0x060003AD RID: 941 RVA: 0x0000D746 File Offset: 0x0000B946
		public bool HasWeaponComponent
		{
			get
			{
				return this.WeaponComponent != null;
			}
		}

		// Token: 0x17000136 RID: 310
		// (get) Token: 0x060003AE RID: 942 RVA: 0x0000D751 File Offset: 0x0000B951
		public HorseComponent HorseComponent
		{
			get
			{
				return this.ItemComponent as HorseComponent;
			}
		}

		// Token: 0x17000137 RID: 311
		// (get) Token: 0x060003AF RID: 943 RVA: 0x0000D75E File Offset: 0x0000B95E
		public bool HasHorseComponent
		{
			get
			{
				return this.HorseComponent != null;
			}
		}

		// Token: 0x17000138 RID: 312
		// (get) Token: 0x060003B0 RID: 944 RVA: 0x0000D769 File Offset: 0x0000B969
		public ArmorComponent ArmorComponent
		{
			get
			{
				return this.ItemComponent as ArmorComponent;
			}
		}

		// Token: 0x17000139 RID: 313
		// (get) Token: 0x060003B1 RID: 945 RVA: 0x0000D776 File Offset: 0x0000B976
		public bool HasArmorComponent
		{
			get
			{
				return this.ArmorComponent != null;
			}
		}

		// Token: 0x1700013A RID: 314
		// (get) Token: 0x060003B2 RID: 946 RVA: 0x0000D781 File Offset: 0x0000B981
		public BannerComponent BannerComponent
		{
			get
			{
				return this.ItemComponent as BannerComponent;
			}
		}

		// Token: 0x1700013B RID: 315
		// (get) Token: 0x060003B3 RID: 947 RVA: 0x0000D78E File Offset: 0x0000B98E
		public bool HasBannerComponent
		{
			get
			{
				return this.BannerComponent != null;
			}
		}

		// Token: 0x1700013C RID: 316
		// (get) Token: 0x060003B4 RID: 948 RVA: 0x0000D799 File Offset: 0x0000B999
		public SaddleComponent SaddleComponent
		{
			get
			{
				return this.ItemComponent as SaddleComponent;
			}
		}

		// Token: 0x1700013D RID: 317
		// (get) Token: 0x060003B5 RID: 949 RVA: 0x0000D7A6 File Offset: 0x0000B9A6
		public bool HasSaddleComponent
		{
			get
			{
				return this.SaddleComponent != null;
			}
		}

		// Token: 0x1700013E RID: 318
		// (get) Token: 0x060003B6 RID: 950 RVA: 0x0000D7B1 File Offset: 0x0000B9B1
		public TradeItemComponent FoodComponent
		{
			get
			{
				return this.ItemComponent as TradeItemComponent;
			}
		}

		// Token: 0x1700013F RID: 319
		// (get) Token: 0x060003B7 RID: 951 RVA: 0x0000D7BE File Offset: 0x0000B9BE
		public bool HasFoodComponent
		{
			get
			{
				return this.FoodComponent != null;
			}
		}

		// Token: 0x060003B8 RID: 952 RVA: 0x0000D7C9 File Offset: 0x0000B9C9
		public ItemObject()
		{
		}

		// Token: 0x060003B9 RID: 953 RVA: 0x0000D7D1 File Offset: 0x0000B9D1
		public ItemObject(string stringId) : base(stringId)
		{
		}

		// Token: 0x060003BA RID: 954 RVA: 0x0000D7DC File Offset: 0x0000B9DC
		public ItemObject(ItemObject itemToCopy) : base(itemToCopy)
		{
			this.ItemComponent = itemToCopy.ItemComponent;
			this.MultiMeshName = itemToCopy.MultiMeshName;
			this.HolsterMeshName = itemToCopy.HolsterMeshName;
			this.HolsterWithWeaponMeshName = itemToCopy.HolsterWithWeaponMeshName;
			this.ItemHolsters = itemToCopy.ItemHolsters;
			this.HolsterPositionShift = itemToCopy.HolsterPositionShift;
			this.FlyingMeshName = itemToCopy.FlyingMeshName;
			this.BodyName = itemToCopy.BodyName;
			this.HolsterBodyName = itemToCopy.HolsterBodyName;
			this.CollisionBodyName = itemToCopy.CollisionBodyName;
			this.RecalculateBody = itemToCopy.RecalculateBody;
			this.PrefabName = itemToCopy.PrefabName;
			this.Name = itemToCopy.Name;
			this.ItemFlags = itemToCopy.ItemFlags;
			this.Value = itemToCopy.Value;
			this.Weight = itemToCopy.Weight;
			this.Difficulty = itemToCopy.Difficulty;
			this.ArmBandMeshName = itemToCopy.ArmBandMeshName;
			this.IsFood = itemToCopy.IsFood;
			this.Type = itemToCopy.Type;
			this.ScaleFactor = itemToCopy.ScaleFactor;
			this.IsUniqueItem = false;
		}

		// Token: 0x060003BB RID: 955 RVA: 0x0000D8F3 File Offset: 0x0000BAF3
		internal void SetName(TextObject name)
		{
			this.Name = name;
		}

		// Token: 0x060003BC RID: 956 RVA: 0x0000D8FC File Offset: 0x0000BAFC
		public static ItemObject InitializeTradeGood(ItemObject item, TextObject name, string meshName, ItemCategory category, int value, float weight, ItemObject.ItemTypeEnum itemType, bool isFood = false)
		{
			item.Initialize();
			item.Name = name;
			item.MultiMeshName = meshName;
			item.ItemCategory = category;
			item.Value = value;
			item.Weight = weight;
			item.ItemType = itemType;
			item.IsFood = isFood;
			item.ItemComponent = new TradeItemComponent();
			item.AfterInitialized();
			item.ItemFlags |= ItemFlags.Civilian;
			return item;
		}

		// Token: 0x060003BD RID: 957 RVA: 0x0000D968 File Offset: 0x0000BB68
		public static void InitAsPlayerCraftedItem(ref ItemObject itemObject)
		{
			itemObject.IsCraftedByPlayer = true;
		}

		// Token: 0x060003BE RID: 958 RVA: 0x0000D974 File Offset: 0x0000BB74
		internal static void InitCraftedItemObject(ref ItemObject itemObject, TextObject name, BasicCultureObject culture, ItemFlags itemProperties, float weight, float appearance, WeaponDesign craftedData, ItemObject.ItemTypeEnum itemType)
		{
			BladeData bladeData = craftedData.UsedPieces[0].CraftingPiece.BladeData;
			itemObject.Weight = weight;
			itemObject.Name = name;
			itemObject.MultiMeshName = "";
			itemObject.HolsterMeshName = "";
			itemObject.HolsterWithWeaponMeshName = "";
			itemObject.ItemHolsters = (string[])craftedData.Template.ItemHolsters.Clone();
			itemObject.HolsterPositionShift = craftedData.HolsterShiftAmount;
			itemObject.FlyingMeshName = "";
			itemObject.BodyName = ((bladeData != null) ? bladeData.BodyName : null);
			itemObject.HolsterBodyName = (((bladeData != null) ? bladeData.HolsterBodyName : null) ?? ((bladeData != null) ? bladeData.BodyName : null));
			itemObject.CollisionBodyName = "";
			itemObject.RecalculateBody = true;
			itemObject.Culture = culture;
			itemObject.Difficulty = 0;
			itemObject.ScaleFactor = 1f;
			itemObject.Type = itemType;
			itemObject.ItemFlags = itemProperties;
			itemObject.Appearance = appearance;
			itemObject.WeaponDesign = craftedData;
		}

		// Token: 0x060003BF RID: 959 RVA: 0x0000DA8C File Offset: 0x0000BC8C
		public override int GetHashCode()
		{
			return (int)base.Id.SubId;
		}

		// Token: 0x060003C0 RID: 960 RVA: 0x0000DAA7 File Offset: 0x0000BCA7
		public void SetItemFlagsForCosmetics(ItemFlags newFlags)
		{
			this.ItemFlags = newFlags;
		}

		// Token: 0x17000140 RID: 320
		// (get) Token: 0x060003C1 RID: 961 RVA: 0x0000DAB0 File Offset: 0x0000BCB0
		public float Tierf
		{
			get
			{
				return Game.Current.BasicModels.ItemValueModel.CalculateTier(this);
			}
		}

		// Token: 0x17000141 RID: 321
		// (get) Token: 0x060003C2 RID: 962 RVA: 0x0000DAC7 File Offset: 0x0000BCC7
		public ItemObject.ItemTiers Tier
		{
			get
			{
				if (this.ItemComponent == null)
				{
					return ItemObject.ItemTiers.Tier1;
				}
				return (ItemObject.ItemTiers)(MBMath.ClampInt(MathF.Round(this.Tierf), 0, 6) - 1);
			}
		}

		// Token: 0x060003C3 RID: 963 RVA: 0x0000DAE7 File Offset: 0x0000BCE7
		public void DetermineItemCategoryForItem()
		{
			if (Game.Current.BasicModels.ItemCategorySelector != null && this.ItemCategory == null)
			{
				this.ItemCategory = Game.Current.BasicModels.ItemCategorySelector.GetItemCategoryForItem(this);
			}
		}

		// Token: 0x060003C4 RID: 964 RVA: 0x0000DB20 File Offset: 0x0000BD20
		public static ItemObject GetCraftedItemObjectFromHashedCode(string hashedCode)
		{
			foreach (ItemObject itemObject in MBObjectManager.Instance.GetObjectTypeList<ItemObject>())
			{
				if (itemObject.IsCraftedWeapon && itemObject.WeaponDesign.HashedCode == hashedCode)
				{
					return itemObject;
				}
			}
			return null;
		}

		// Token: 0x17000142 RID: 322
		// (get) Token: 0x060003C5 RID: 965 RVA: 0x0000DB94 File Offset: 0x0000BD94
		// (set) Token: 0x060003C6 RID: 966 RVA: 0x0000DB9C File Offset: 0x0000BD9C
		public ItemObject PrerequisiteItem { get; private set; }

		// Token: 0x17000143 RID: 323
		// (get) Token: 0x060003C7 RID: 967 RVA: 0x0000DBA5 File Offset: 0x0000BDA5
		public MBReadOnlyList<WeaponComponentData> Weapons
		{
			get
			{
				WeaponComponent weaponComponent = this.WeaponComponent;
				if (weaponComponent == null)
				{
					return null;
				}
				return weaponComponent.Weapons;
			}
		}

		// Token: 0x060003C8 RID: 968 RVA: 0x0000DBB8 File Offset: 0x0000BDB8
		public void AddWeapon(WeaponComponentData weapon, ItemModifierGroup itemModifierGroup)
		{
			if (this.WeaponComponent == null)
			{
				this.ItemComponent = new WeaponComponent(this);
			}
			this.WeaponComponent.AddWeapon(weapon, itemModifierGroup);
		}

		// Token: 0x060003C9 RID: 969 RVA: 0x0000DBDC File Offset: 0x0000BDDC
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			if (node.Name == "CraftedItem")
			{
				XmlNode xmlNode = node.Attributes["multiplayer_item"];
				if (xmlNode != null && !string.IsNullOrEmpty(xmlNode.InnerText))
				{
					this.MultiplayerItem = (xmlNode.InnerText == "true");
				}
				XmlNode xmlNode2 = node.Attributes["is_merchandise"];
				if (xmlNode2 != null && !string.IsNullOrEmpty(xmlNode2.InnerText))
				{
					this.NotMerchandise = (xmlNode2.InnerText != "true");
				}
				TextObject weaponName = new TextObject(node.Attributes["name"].InnerText, null);
				string innerText = node.Attributes["crafting_template"].InnerText;
				bool flag = node.Attributes["has_modifier"] == null || node.Attributes["has_modifier"].InnerText != "false";
				XmlAttribute xmlAttribute = node.Attributes["modifier_group"];
				string text = (xmlAttribute != null) ? xmlAttribute.Value : null;
				ItemModifierGroup itemModifierGroup = null;
				if (flag)
				{
					if (text == null)
					{
						itemModifierGroup = CraftingTemplate.GetTemplateFromId(innerText).ItemModifierGroup;
					}
					else
					{
						itemModifierGroup = Game.Current.ObjectManager.GetObject<ItemModifierGroup>(text);
					}
				}
				WeaponDesignElement[] array = new WeaponDesignElement[4];
				XmlNode xmlNode3 = null;
				for (int i = 0; i < node.ChildNodes.Count; i++)
				{
					if (node.ChildNodes[i].Name == "Pieces")
					{
						xmlNode3 = node.ChildNodes[i];
						break;
					}
				}
				foreach (object obj in xmlNode3.ChildNodes)
				{
					XmlNode xmlNode4 = (XmlNode)obj;
					if (xmlNode4.Name == "Piece")
					{
						XmlNode xmlNode5 = xmlNode4.Attributes["id"];
						XmlAttribute xmlAttribute2 = xmlNode4.Attributes["Type"];
						XmlAttribute xmlAttribute3 = xmlNode4.Attributes["scale_factor"];
						string innerText2 = xmlNode5.InnerText;
						CraftingPiece.PieceTypes pieceTypes = (CraftingPiece.PieceTypes)Enum.Parse(typeof(CraftingPiece.PieceTypes), xmlAttribute2.InnerText);
						CraftingPiece @object = MBObjectManager.Instance.GetObject<CraftingPiece>(innerText2);
						array[(int)pieceTypes] = WeaponDesignElement.CreateUsablePiece(@object, 100);
						if (xmlAttribute3 != null)
						{
							array[(int)pieceTypes].SetScale(int.Parse(xmlAttribute3.Value));
						}
					}
				}
				ItemObject itemObject = Crafting.CreatePreCraftedWeapon(this, array, innerText, weaponName, itemModifierGroup);
				if (itemObject.WeaponComponent == null)
				{
					Debug.FailedAssert("Crafted item: " + itemObject.StringId + " can not be initialized, item replaced with Trash item.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 423);
					MBObjectManager.Instance.UnregisterObject(this);
					return;
				}
				this.Effectiveness = this.CalculateEffectiveness();
				if (node.Attributes["value"] != null)
				{
					this.Value = int.Parse(node.Attributes["value"].Value);
				}
				else
				{
					this.DetermineValue();
				}
				if (node.Attributes["culture"] != null)
				{
					this.Culture = (BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node);
				}
				this.PrerequisiteItem = ((node.Attributes["prerequisite_item"] != null) ? ((ItemObject)objectManager.ReadObjectReferenceFromXml("prerequisite_item", typeof(ItemObject), node)) : null);
			}
			else
			{
				this.Name = new TextObject(node.Attributes["name"].InnerText, null);
				XmlNode xmlNode6 = node.Attributes["multiplayer_item"];
				if (xmlNode6 != null && !string.IsNullOrEmpty(xmlNode6.InnerText))
				{
					this.MultiplayerItem = (xmlNode6.InnerText == "true");
				}
				XmlNode xmlNode7 = node.Attributes["is_merchandise"];
				if (xmlNode7 != null && !string.IsNullOrEmpty(xmlNode7.InnerText))
				{
					this.NotMerchandise = (xmlNode7.InnerText != "true");
				}
				this.PrerequisiteItem = ((node.Attributes["prerequisite_item"] != null) ? ((ItemObject)objectManager.ReadObjectReferenceFromXml("prerequisite_item", typeof(ItemObject), node)) : null);
				XmlNode xmlNode8 = node.Attributes["mesh"];
				if (xmlNode8 != null && !string.IsNullOrEmpty(xmlNode8.InnerText))
				{
					this.MultiMeshName = xmlNode8.InnerText;
				}
				this.HolsterMeshName = ((node.Attributes["holster_mesh"] != null) ? node.Attributes["holster_mesh"].Value : null);
				this.HolsterWithWeaponMeshName = ((node.Attributes["holster_mesh_with_weapon"] != null) ? node.Attributes["holster_mesh_with_weapon"].Value : null);
				this.FlyingMeshName = ((node.Attributes["flying_mesh"] != null) ? node.Attributes["flying_mesh"].Value : null);
				this.HasLowerHolsterPriority = false;
				if (node.Attributes["item_holsters"] != null)
				{
					this.ItemHolsters = node.Attributes["item_holsters"].Value.Split(new char[]
					{
						':'
					});
					if (node.Attributes["has_lower_holster_priority"] != null)
					{
						this.HasLowerHolsterPriority = bool.Parse(node.Attributes["has_lower_holster_priority"].Value);
					}
				}
				else
				{
					this.ItemHolsters = new string[4];
				}
				this.HolsterPositionShift = ((node.Attributes["holster_position_shift"] != null) ? Vec3.Parse(node.Attributes["holster_position_shift"].Value) : Vec3.Zero);
				this.BodyName = ((node.Attributes["body_name"] != null) ? node.Attributes["body_name"].Value : null);
				this.HolsterBodyName = ((node.Attributes["holster_body_name"] != null) ? node.Attributes["holster_body_name"].Value : null);
				this.CollisionBodyName = ((node.Attributes["shield_body_name"] != null) ? node.Attributes["shield_body_name"].Value : null);
				this.RecalculateBody = (node.Attributes["recalculate_body"] != null && bool.Parse(node.Attributes["recalculate_body"].Value));
				XmlNode xmlNode9 = node.Attributes["prefab"];
				if (xmlNode9 != null && !string.IsNullOrEmpty(xmlNode9.InnerText))
				{
					this.PrefabName = xmlNode9.InnerText;
				}
				else
				{
					this.PrefabName = "";
				}
				this.Culture = (BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node);
				string text2 = (node.Attributes["item_category"] != null) ? node.Attributes["item_category"].Value : null;
				if (!string.IsNullOrEmpty(text2))
				{
					this.ItemCategory = Game.Current.ObjectManager.GetObject<ItemCategory>(text2);
				}
				this.Weight = ((node.Attributes["weight"] != null) ? float.Parse(node.Attributes["weight"].Value) : 1f);
				this.LodAtlasIndex = ((node.Attributes["lod_atlas_index"] != null) ? int.Parse(node.Attributes["lod_atlas_index"].Value) : -1);
				XmlAttribute xmlAttribute4 = node.Attributes["difficulty"];
				if (xmlAttribute4 != null)
				{
					this.Difficulty = int.Parse(xmlAttribute4.Value);
				}
				XmlAttribute xmlAttribute5 = node.Attributes["appearance"];
				this.Appearance = ((xmlAttribute5 != null) ? float.Parse(xmlAttribute5.Value) : 0.5f);
				XmlAttribute xmlAttribute6 = node.Attributes["IsFood"];
				if (xmlAttribute6 != null)
				{
					this.IsFood = Convert.ToBoolean(xmlAttribute6.InnerText);
				}
				this.IsUsingTableau = (node.Attributes["using_tableau"] != null && Convert.ToBoolean(node.Attributes["using_tableau"].InnerText));
				XmlNode xmlNode10 = node.Attributes["using_arm_band"];
				if (xmlNode10 != null)
				{
					this.ArmBandMeshName = Convert.ToString(xmlNode10.InnerText);
				}
				this.ScaleFactor = ((node.Attributes["scale_factor"] != null) ? float.Parse(node.Attributes["scale_factor"].Value) : 1f);
				this.ItemFlags = (ItemFlags)0U;
				foreach (object obj2 in node.ChildNodes)
				{
					XmlNode xmlNode11 = (XmlNode)obj2;
					if (xmlNode11.Name == "ItemComponent")
					{
						using (IEnumerator enumerator2 = xmlNode11.ChildNodes.GetEnumerator())
						{
							while (enumerator2.MoveNext())
							{
								object obj3 = enumerator2.Current;
								XmlNode xmlNode12 = (XmlNode)obj3;
								if (xmlNode12.NodeType != XmlNodeType.Comment)
								{
									string name = xmlNode12.Name;
									ItemComponent itemComponent;
									if (!(name == "Armor"))
									{
										if (!(name == "Weapon"))
										{
											if (!(name == "Horse"))
											{
												if (!(name == "Trade"))
												{
													if (!(name == "Food"))
													{
														if (!(name == "Banner"))
														{
															throw new Exception("Wrong ItemComponent type.");
														}
														itemComponent = new BannerComponent(this);
													}
													else
													{
														Debug.FailedAssert("FoodComponent tag has been converted to TradeComponent. Use Trade xml node type", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 672);
														itemComponent = null;
													}
												}
												else
												{
													itemComponent = new TradeItemComponent();
												}
											}
											else
											{
												itemComponent = new HorseComponent();
											}
										}
										else
										{
											itemComponent = (this.ItemComponent ?? new WeaponComponent(this));
										}
									}
									else
									{
										itemComponent = new ArmorComponent(this);
									}
									if (itemComponent != null)
									{
										itemComponent.Deserialize(objectManager, xmlNode12);
										this.ItemComponent = itemComponent;
									}
								}
							}
							continue;
						}
					}
					if (xmlNode11.Name == "Flags")
					{
						foreach (object obj4 in Enum.GetValues(typeof(ItemFlags)))
						{
							ItemFlags itemFlags = (ItemFlags)obj4;
							XmlAttribute xmlAttribute7 = xmlNode11.Attributes[itemFlags.ToString()];
							if (xmlAttribute7 != null && xmlAttribute7.Value.ToLowerInvariant() != "false")
							{
								this.ItemFlags |= itemFlags;
							}
						}
					}
				}
				XmlAttribute xmlAttribute8 = node.Attributes["Type"];
				if (xmlAttribute8 != null)
				{
					this.Type = (ItemObject.ItemTypeEnum)Enum.Parse(typeof(ItemObject.ItemTypeEnum), xmlAttribute8.Value, true);
					if (this.WeaponComponent != null)
					{
						ItemObject.ItemTypeEnum itemType = this.WeaponComponent.GetItemType();
						if (this.Type != itemType)
						{
							Debug.Print(string.Concat(new object[]
							{
								"ItemType for \"",
								base.StringId,
								"\" has been overridden by WeaponClass from \"",
								this.Type,
								"\" to \"",
								itemType,
								"\""
							}), 0, Debug.DebugColor.Red, 64UL);
						}
						this.Type = itemType;
					}
				}
				if (this.Type == ItemObject.ItemTypeEnum.Banner && !(this.ItemComponent is BannerComponent) && !(base.StringId == "campaign_banner_small"))
				{
					Debug.FailedAssert("Banner item with name: " + this.Name + " is not properly set. It must either be a campaign banner or it must have a banner component.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 734);
					Debug.Print("Banner item with name: " + this.Name + " is not properly set. It must either be a campaign banner or it must have a banner component.", 0, Debug.DebugColor.Yellow, 17592186044416UL);
				}
				XmlAttribute xmlAttribute9 = node.Attributes["AmmoOffset"];
				if (xmlAttribute9 != null)
				{
					string[] array2 = xmlAttribute9.Value.Split(new char[]
					{
						','
					});
					this.WeaponComponent.PrimaryWeapon.SetAmmoOffset(new Vec3(0f, 0f, 0f, -1f));
					if (array2.Length == 3)
					{
						try
						{
							Vec3 ammoOffset = new Vec3(float.Parse(array2[0], CultureInfo.InvariantCulture), float.Parse(array2[1], CultureInfo.InvariantCulture), float.Parse(array2[2], CultureInfo.InvariantCulture), -1f);
							this.WeaponComponent.PrimaryWeapon.SetAmmoOffset(ammoOffset);
							goto IL_CFA;
						}
						catch (Exception)
						{
							Debug.FailedAssert("[DEBUG]Throw Base Offset is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 761);
							goto IL_CFA;
						}
					}
					Debug.FailedAssert("[DEBUG]Throw Base Offset is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 766);
				}
				IL_CFA:
				this.Effectiveness = this.CalculateEffectiveness();
				if (node.Attributes["value"] != null)
				{
					this.Value = int.Parse(node.Attributes["value"].Value);
				}
				else
				{
					this.DetermineValue();
				}
				if (this.PrimaryWeapon != null)
				{
					if (this.PrimaryWeapon.IsMeleeWeapon || this.PrimaryWeapon.IsRangedWeapon)
					{
						if (string.IsNullOrEmpty(this.BodyName))
						{
						}
					}
					else if (this.PrimaryWeapon.IsConsumable)
					{
						string.IsNullOrEmpty(this.HolsterBodyName);
						if (string.IsNullOrEmpty(this.BodyName))
						{
						}
					}
					else if (this.PrimaryWeapon.IsShield)
					{
						if (!string.IsNullOrEmpty(this.BodyName))
						{
							bool recalculateBody = this.RecalculateBody;
						}
						string.IsNullOrEmpty(this.CollisionBodyName);
					}
				}
			}
			this.DetermineItemCategoryForItem();
			Game.Current.ItemObjectDeserialized(this);
		}

		// Token: 0x17000144 RID: 324
		// (get) Token: 0x060003CA RID: 970 RVA: 0x0000EA3C File Offset: 0x0000CC3C
		// (set) Token: 0x060003CB RID: 971 RVA: 0x0000EA44 File Offset: 0x0000CC44
		public ItemObject.ItemTypeEnum ItemType
		{
			get
			{
				return this.Type;
			}
			private set
			{
				this.Type = value;
			}
		}

		// Token: 0x17000145 RID: 325
		// (get) Token: 0x060003CC RID: 972 RVA: 0x0000EA4D File Offset: 0x0000CC4D
		public bool IsMountable
		{
			get
			{
				return this.HasHorseComponent && this.HorseComponent.IsRideable;
			}
		}

		// Token: 0x17000146 RID: 326
		// (get) Token: 0x060003CD RID: 973 RVA: 0x0000EA64 File Offset: 0x0000CC64
		public bool IsTradeGood
		{
			get
			{
				return this.ItemType == ItemObject.ItemTypeEnum.Goods;
			}
		}

		// Token: 0x17000147 RID: 327
		// (get) Token: 0x060003CE RID: 974 RVA: 0x0000EA70 File Offset: 0x0000CC70
		public bool IsBannerItem
		{
			get
			{
				return this.ItemType == ItemObject.ItemTypeEnum.Banner;
			}
		}

		// Token: 0x17000148 RID: 328
		// (get) Token: 0x060003CF RID: 975 RVA: 0x0000EA7C File Offset: 0x0000CC7C
		public bool IsAnimal
		{
			get
			{
				return this.HasHorseComponent && !this.HorseComponent.IsRideable;
			}
		}

		// Token: 0x060003D0 RID: 976 RVA: 0x0000EA96 File Offset: 0x0000CC96
		public override string ToString()
		{
			return base.StringId;
		}

		// Token: 0x17000149 RID: 329
		// (get) Token: 0x060003D1 RID: 977 RVA: 0x0000EAA0 File Offset: 0x0000CCA0
		public SkillObject RelevantSkill
		{
			get
			{
				SkillObject result = null;
				if (this.PrimaryWeapon != null)
				{
					result = this.PrimaryWeapon.RelevantSkill;
				}
				else if (this.HasHorseComponent)
				{
					result = DefaultSkills.Riding;
				}
				return result;
			}
		}

		// Token: 0x060003D2 RID: 978 RVA: 0x0000EAD4 File Offset: 0x0000CCD4
		public static ItemObject GetItemFromWeaponKind(int weaponKind)
		{
			if (weaponKind < 0)
			{
				return null;
			}
			return MBObjectManager.Instance.GetObject(new MBGUID((uint)weaponKind)) as ItemObject;
		}

		// Token: 0x060003D3 RID: 979 RVA: 0x0000EAF4 File Offset: 0x0000CCF4
		[Conditional("_RGL_KEEP_ASSERTS")]
		private void MakeSureProperFlagsSetForOneAndTwoHandedWeapons()
		{
			if (this.PrimaryWeapon != null)
			{
				if ((this.Type == ItemObject.ItemTypeEnum.Bow || this.Type == ItemObject.ItemTypeEnum.Crossbow || this.Type == ItemObject.ItemTypeEnum.TwoHandedWeapon) && !this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
				{
					Debug.FailedAssert(this.Name + ": Two Handed Item does not have NotUsableWithOneHand flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 936);
					this.PrimaryWeapon.WeaponFlags |= WeaponFlags.NotUsableWithOneHand;
				}
				if ((this.Type == ItemObject.ItemTypeEnum.Bow || this.Type == ItemObject.ItemTypeEnum.Crossbow) && !this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.TwoHandIdleOnMount))
				{
					Debug.FailedAssert(this.Name + ": Two Handed Item does not have TwoHandIdleOnMount flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 945);
					this.PrimaryWeapon.WeaponFlags |= WeaponFlags.TwoHandIdleOnMount;
				}
				if ((this.Type == ItemObject.ItemTypeEnum.OneHandedWeapon || this.Type == ItemObject.ItemTypeEnum.Shield) && this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
				{
					Debug.FailedAssert(this.Name + ": One Handed Item has TwoHanded flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 954);
					this.PrimaryWeapon.WeaponFlags &= ~WeaponFlags.NotUsableWithOneHand;
				}
			}
		}

		// Token: 0x060003D4 RID: 980 RVA: 0x0000EC3D File Offset: 0x0000CE3D
		[Conditional("DEBUG")]
		private void DebugMakeSurePhysicsMaterialCorrectlySet()
		{
		}

		// Token: 0x060003D5 RID: 981 RVA: 0x0000EC40 File Offset: 0x0000CE40
		[Conditional("DEBUG")]
		private void MakeSureWeaponLengthAndMissileSpeedCorrect()
		{
			if (this.WeaponComponent != null)
			{
				foreach (WeaponComponentData weaponComponentData in this.WeaponComponent.Weapons)
				{
					int weaponLength = weaponComponentData.WeaponLength;
					if (this.Type == ItemObject.ItemTypeEnum.Arrows || this.Type == ItemObject.ItemTypeEnum.Bolts || this.Type == ItemObject.ItemTypeEnum.Bullets || this.Type == ItemObject.ItemTypeEnum.Thrown)
					{
						int missileSpeed = weaponComponentData.MissileSpeed;
					}
				}
			}
		}

		// Token: 0x060003D6 RID: 982 RVA: 0x0000ECD4 File Offset: 0x0000CED4
		public static ItemObject.ItemTypeEnum GetAmmoTypeForItemType(ItemObject.ItemTypeEnum itemType)
		{
			switch (itemType)
			{
			case ItemObject.ItemTypeEnum.Bow:
				return ItemObject.ItemTypeEnum.Arrows;
			case ItemObject.ItemTypeEnum.Crossbow:
				return ItemObject.ItemTypeEnum.Bolts;
			case ItemObject.ItemTypeEnum.Thrown:
				return ItemObject.ItemTypeEnum.Thrown;
			default:
				if (itemType != ItemObject.ItemTypeEnum.Pistol)
				{
					return ItemObject.ItemTypeEnum.Invalid;
				}
				return ItemObject.ItemTypeEnum.Bullets;
			}
		}

		// Token: 0x060003D7 RID: 983 RVA: 0x0000ECFC File Offset: 0x0000CEFC
		public static float GetAirFrictionConstant(WeaponClass weaponClass, WeaponFlags weaponFlags)
		{
			switch (weaponClass)
			{
			case WeaponClass.Arrow:
				if (weaponFlags.HasAnyFlag(WeaponFlags.MultiplePenetration))
				{
					return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBallistaBolt);
				}
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Bolt:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Cartridge:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			case WeaponClass.Bow:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Crossbow:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Stone:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionKnife);
			case WeaponClass.Boulder:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.ThrowingAxe:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionAxe);
			case WeaponClass.ThrowingKnife:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionKnife);
			case WeaponClass.Javelin:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionJavelin);
			case WeaponClass.Pistol:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			case WeaponClass.Musket:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			default:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			}
		}

		// Token: 0x060003D8 RID: 984 RVA: 0x0000EE0C File Offset: 0x0000D00C
		private float CalculateEffectiveness()
		{
			float result = 1f;
			ArmorComponent armorComponent = this.ArmorComponent;
			if (armorComponent != null)
			{
				if (this.Type == ItemObject.ItemTypeEnum.HorseHarness)
				{
					result = (float)armorComponent.BodyArmor * 1.67f;
				}
				else
				{
					result = ((float)armorComponent.HeadArmor * 34f + (float)armorComponent.BodyArmor * 42f + (float)armorComponent.LegArmor * 12f + (float)armorComponent.ArmArmor * 12f) * 0.03f;
				}
			}
			if (this.WeaponComponent != null)
			{
				WeaponComponentData primaryWeapon = this.WeaponComponent.PrimaryWeapon;
				float num = 1f;
				switch (primaryWeapon.WeaponClass)
				{
				case WeaponClass.Dagger:
					num = 0.4f;
					break;
				case WeaponClass.OneHandedSword:
					num = 0.55f;
					break;
				case WeaponClass.TwoHandedSword:
					num = 0.6f;
					break;
				case WeaponClass.OneHandedAxe:
					num = 0.5f;
					break;
				case WeaponClass.TwoHandedAxe:
					num = 0.55f;
					break;
				case WeaponClass.Mace:
					num = 0.5f;
					break;
				case WeaponClass.Pick:
					num = 0.4f;
					break;
				case WeaponClass.TwoHandedMace:
					num = 0.55f;
					break;
				case WeaponClass.OneHandedPolearm:
					num = 0.4f;
					break;
				case WeaponClass.TwoHandedPolearm:
					num = 0.4f;
					break;
				case WeaponClass.LowGripPolearm:
					num = 0.4f;
					break;
				case WeaponClass.Arrow:
					num = 3f;
					break;
				case WeaponClass.Bolt:
					num = 3f;
					break;
				case WeaponClass.Cartridge:
					num = 3f;
					break;
				case WeaponClass.Bow:
					num = 0.55f;
					break;
				case WeaponClass.Crossbow:
					num = 0.57f;
					break;
				case WeaponClass.Stone:
					num = 0.1f;
					break;
				case WeaponClass.Boulder:
					num = 0.1f;
					break;
				case WeaponClass.ThrowingAxe:
					num = 0.25f;
					break;
				case WeaponClass.ThrowingKnife:
					num = 0.2f;
					break;
				case WeaponClass.Javelin:
					num = 0.28f;
					break;
				case WeaponClass.Pistol:
					num = 1f;
					break;
				case WeaponClass.Musket:
					num = 1f;
					break;
				case WeaponClass.SmallShield:
					num = 0.4f;
					break;
				case WeaponClass.LargeShield:
					num = 0.5f;
					break;
				}
				if (primaryWeapon.IsRangedWeapon)
				{
					if (primaryWeapon.IsConsumable)
					{
						result = ((float)(primaryWeapon.MissileDamage * primaryWeapon.MissileSpeed) * 1.775f + (float)(primaryWeapon.Accuracy * (int)primaryWeapon.MaxDataValue) * 25f + (float)primaryWeapon.WeaponLength * 4f) * 0.006944f * (float)primaryWeapon.MaxDataValue * num;
					}
					else
					{
						result = ((float)(primaryWeapon.MissileSpeed * primaryWeapon.MissileDamage) * 1.75f + (float)(primaryWeapon.ThrustSpeed * primaryWeapon.Accuracy) * 0.3f) * 0.01f * (float)primaryWeapon.MaxDataValue * num;
					}
				}
				else if (primaryWeapon.IsMeleeWeapon)
				{
					float b = (float)(primaryWeapon.ThrustSpeed * primaryWeapon.ThrustDamage) * 0.01f;
					float a = (float)(primaryWeapon.SwingSpeed * primaryWeapon.SwingDamage) * 0.01f;
					float num2 = MathF.Max(a, b);
					float num3 = MathF.Min(a, b);
					result = ((num2 + num3 * num3 / num2) * 120f + (float)primaryWeapon.Handling * 15f + (float)primaryWeapon.WeaponLength * 20f + this.Weight * 5f) * 0.01f * num;
				}
				else if (primaryWeapon.IsConsumable)
				{
					result = ((float)primaryWeapon.MissileDamage * 550f + (float)primaryWeapon.MissileSpeed * 15f + (float)primaryWeapon.MaxDataValue * 60f) * 0.01f * num;
				}
				else if (primaryWeapon.IsShield)
				{
					result = ((float)primaryWeapon.BodyArmor * 60f + (float)primaryWeapon.ThrustSpeed * 10f + (float)primaryWeapon.MaxDataValue * 40f + (float)primaryWeapon.WeaponLength * 20f) * 0.01f * num;
				}
			}
			if (this.HorseComponent != null)
			{
				result = ((float)(this.HorseComponent.ChargeDamage * this.HorseComponent.Speed + this.HorseComponent.Maneuver * this.HorseComponent.Speed) + (float)this.HorseComponent.BodyLength * this.Weight * 0.025f) * (float)(this.HorseComponent.HitPoints + this.HorseComponent.HitPointBonus) * 0.0001f;
			}
			return result;
		}

		// Token: 0x060003D9 RID: 985 RVA: 0x0000F21C File Offset: 0x0000D41C
		internal void DetermineValue()
		{
			ItemValueModel itemValueModel = Game.Current.BasicModels.ItemValueModel;
			this.Value = ((itemValueModel != null) ? itemValueModel.CalculateValue(this) : 1);
		}

		// Token: 0x060003DA RID: 986 RVA: 0x0000F240 File Offset: 0x0000D440
		public WeaponComponentData GetWeaponWithUsageIndex(int usageIndex)
		{
			return this.Weapons.ElementAt(usageIndex);
		}

		// Token: 0x040001E2 RID: 482
		public const float DefaultAppearanceValue = 0.5f;

		// Token: 0x040001E3 RID: 483
		public const int MaxHolsterSlotCount = 4;

		// Token: 0x040001F3 RID: 499
		public ItemObject.ItemTypeEnum Type;

		// Token: 0x020000E7 RID: 231
		public enum ItemUsageSetFlags
		{
			// Token: 0x04000667 RID: 1639
			RequiresMount = 1,
			// Token: 0x04000668 RID: 1640
			RequiresNoMount,
			// Token: 0x04000669 RID: 1641
			RequiresShield = 4,
			// Token: 0x0400066A RID: 1642
			RequiresNoShield = 8,
			// Token: 0x0400066B RID: 1643
			PassiveUsage = 16
		}

		// Token: 0x020000E8 RID: 232
		public enum ItemTypeEnum
		{
			// Token: 0x0400066D RID: 1645
			Invalid,
			// Token: 0x0400066E RID: 1646
			Horse,
			// Token: 0x0400066F RID: 1647
			OneHandedWeapon,
			// Token: 0x04000670 RID: 1648
			TwoHandedWeapon,
			// Token: 0x04000671 RID: 1649
			Polearm,
			// Token: 0x04000672 RID: 1650
			Arrows,
			// Token: 0x04000673 RID: 1651
			Bolts,
			// Token: 0x04000674 RID: 1652
			Shield,
			// Token: 0x04000675 RID: 1653
			Bow,
			// Token: 0x04000676 RID: 1654
			Crossbow,
			// Token: 0x04000677 RID: 1655
			Thrown,
			// Token: 0x04000678 RID: 1656
			Goods,
			// Token: 0x04000679 RID: 1657
			HeadArmor,
			// Token: 0x0400067A RID: 1658
			BodyArmor,
			// Token: 0x0400067B RID: 1659
			LegArmor,
			// Token: 0x0400067C RID: 1660
			HandArmor,
			// Token: 0x0400067D RID: 1661
			Pistol,
			// Token: 0x0400067E RID: 1662
			Musket,
			// Token: 0x0400067F RID: 1663
			Bullets,
			// Token: 0x04000680 RID: 1664
			Animal,
			// Token: 0x04000681 RID: 1665
			Book,
			// Token: 0x04000682 RID: 1666
			ChestArmor,
			// Token: 0x04000683 RID: 1667
			Cape,
			// Token: 0x04000684 RID: 1668
			HorseHarness,
			// Token: 0x04000685 RID: 1669
			Banner
		}

		// Token: 0x020000E9 RID: 233
		public enum ItemTiers
		{
			// Token: 0x04000687 RID: 1671
			Tier1,
			// Token: 0x04000688 RID: 1672
			Tier2,
			// Token: 0x04000689 RID: 1673
			Tier3,
			// Token: 0x0400068A RID: 1674
			Tier4,
			// Token: 0x0400068B RID: 1675
			Tier5,
			// Token: 0x0400068C RID: 1676
			Tier6,
			// Token: 0x0400068D RID: 1677
			NumTiers
		}
	}
}
