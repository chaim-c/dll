using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;

namespace TaleWorlds.Core
{
	// Token: 0x0200003A RID: 58
	public class WeaponComponentData
	{
		// Token: 0x06000452 RID: 1106 RVA: 0x00010075 File Offset: 0x0000E275
		internal static void AutoGeneratedStaticCollectObjectsWeaponComponentData(object o, List<object> collectedObjects)
		{
			((WeaponComponentData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000453 RID: 1107 RVA: 0x00010083 File Offset: 0x0000E283
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x17000175 RID: 373
		// (get) Token: 0x06000454 RID: 1108 RVA: 0x00010085 File Offset: 0x0000E285
		// (set) Token: 0x06000455 RID: 1109 RVA: 0x0001008D File Offset: 0x0000E28D
		public WeaponComponentData.WeaponTiers WeaponTier { get; private set; }

		// Token: 0x17000176 RID: 374
		// (get) Token: 0x06000456 RID: 1110 RVA: 0x00010096 File Offset: 0x0000E296
		// (set) Token: 0x06000457 RID: 1111 RVA: 0x0001009E File Offset: 0x0000E29E
		public string WeaponDescriptionId { get; private set; }

		// Token: 0x17000177 RID: 375
		// (get) Token: 0x06000458 RID: 1112 RVA: 0x000100A7 File Offset: 0x0000E2A7
		// (set) Token: 0x06000459 RID: 1113 RVA: 0x000100AF File Offset: 0x0000E2AF
		public int BodyArmor { get; private set; }

		// Token: 0x17000178 RID: 376
		// (get) Token: 0x0600045A RID: 1114 RVA: 0x000100B8 File Offset: 0x0000E2B8
		// (set) Token: 0x0600045B RID: 1115 RVA: 0x000100C0 File Offset: 0x0000E2C0
		public string PhysicsMaterial { get; private set; }

		// Token: 0x17000179 RID: 377
		// (get) Token: 0x0600045C RID: 1116 RVA: 0x000100C9 File Offset: 0x0000E2C9
		// (set) Token: 0x0600045D RID: 1117 RVA: 0x000100D1 File Offset: 0x0000E2D1
		public string FlyingSoundCode { get; private set; }

		// Token: 0x1700017A RID: 378
		// (get) Token: 0x0600045E RID: 1118 RVA: 0x000100DA File Offset: 0x0000E2DA
		// (set) Token: 0x0600045F RID: 1119 RVA: 0x000100E2 File Offset: 0x0000E2E2
		public string PassbySoundCode { get; private set; }

		// Token: 0x1700017B RID: 379
		// (get) Token: 0x06000460 RID: 1120 RVA: 0x000100EB File Offset: 0x0000E2EB
		// (set) Token: 0x06000461 RID: 1121 RVA: 0x000100F3 File Offset: 0x0000E2F3
		public string ItemUsage { get; private set; }

		// Token: 0x1700017C RID: 380
		// (get) Token: 0x06000462 RID: 1122 RVA: 0x000100FC File Offset: 0x0000E2FC
		// (set) Token: 0x06000463 RID: 1123 RVA: 0x00010104 File Offset: 0x0000E304
		public int ThrustSpeed { get; private set; }

		// Token: 0x1700017D RID: 381
		// (get) Token: 0x06000464 RID: 1124 RVA: 0x0001010D File Offset: 0x0000E30D
		// (set) Token: 0x06000465 RID: 1125 RVA: 0x00010115 File Offset: 0x0000E315
		public int SwingSpeed { get; private set; }

		// Token: 0x1700017E RID: 382
		// (get) Token: 0x06000466 RID: 1126 RVA: 0x0001011E File Offset: 0x0000E31E
		// (set) Token: 0x06000467 RID: 1127 RVA: 0x00010126 File Offset: 0x0000E326
		public int MissileSpeed { get; private set; }

		// Token: 0x1700017F RID: 383
		// (get) Token: 0x06000468 RID: 1128 RVA: 0x0001012F File Offset: 0x0000E32F
		// (set) Token: 0x06000469 RID: 1129 RVA: 0x00010137 File Offset: 0x0000E337
		public int WeaponLength { get; private set; }

		// Token: 0x17000180 RID: 384
		// (get) Token: 0x0600046A RID: 1130 RVA: 0x00010140 File Offset: 0x0000E340
		// (set) Token: 0x0600046B RID: 1131 RVA: 0x00010148 File Offset: 0x0000E348
		public float WeaponBalance { get; private set; }

		// Token: 0x17000181 RID: 385
		// (get) Token: 0x0600046C RID: 1132 RVA: 0x00010151 File Offset: 0x0000E351
		// (set) Token: 0x0600046D RID: 1133 RVA: 0x00010159 File Offset: 0x0000E359
		public int ThrustDamage { get; private set; }

		// Token: 0x17000182 RID: 386
		// (get) Token: 0x0600046E RID: 1134 RVA: 0x00010162 File Offset: 0x0000E362
		// (set) Token: 0x0600046F RID: 1135 RVA: 0x0001016A File Offset: 0x0000E36A
		public DamageTypes ThrustDamageType { get; private set; }

		// Token: 0x17000183 RID: 387
		// (get) Token: 0x06000470 RID: 1136 RVA: 0x00010173 File Offset: 0x0000E373
		// (set) Token: 0x06000471 RID: 1137 RVA: 0x0001017B File Offset: 0x0000E37B
		public int SwingDamage { get; private set; }

		// Token: 0x17000184 RID: 388
		// (get) Token: 0x06000472 RID: 1138 RVA: 0x00010184 File Offset: 0x0000E384
		// (set) Token: 0x06000473 RID: 1139 RVA: 0x0001018C File Offset: 0x0000E38C
		public DamageTypes SwingDamageType { get; private set; }

		// Token: 0x17000185 RID: 389
		// (get) Token: 0x06000474 RID: 1140 RVA: 0x00010195 File Offset: 0x0000E395
		// (set) Token: 0x06000475 RID: 1141 RVA: 0x0001019D File Offset: 0x0000E39D
		public int Accuracy { get; private set; }

		// Token: 0x17000186 RID: 390
		// (get) Token: 0x06000476 RID: 1142 RVA: 0x000101A6 File Offset: 0x0000E3A6
		// (set) Token: 0x06000477 RID: 1143 RVA: 0x000101AE File Offset: 0x0000E3AE
		public WeaponClass WeaponClass { get; private set; }

		// Token: 0x17000187 RID: 391
		// (get) Token: 0x06000478 RID: 1144 RVA: 0x000101B7 File Offset: 0x0000E3B7
		// (set) Token: 0x06000479 RID: 1145 RVA: 0x000101BF File Offset: 0x0000E3BF
		public WeaponClass AmmoClass { get; private set; }

		// Token: 0x17000188 RID: 392
		// (get) Token: 0x0600047A RID: 1146 RVA: 0x000101C8 File Offset: 0x0000E3C8
		public int MissileDamage
		{
			get
			{
				return this.ThrustDamage;
			}
		}

		// Token: 0x17000189 RID: 393
		// (get) Token: 0x0600047B RID: 1147 RVA: 0x000101D0 File Offset: 0x0000E3D0
		// (set) Token: 0x0600047C RID: 1148 RVA: 0x000101D8 File Offset: 0x0000E3D8
		public float Inertia { get; private set; }

		// Token: 0x1700018A RID: 394
		// (get) Token: 0x0600047D RID: 1149 RVA: 0x000101E1 File Offset: 0x0000E3E1
		// (set) Token: 0x0600047E RID: 1150 RVA: 0x000101E9 File Offset: 0x0000E3E9
		public float CenterOfMass { get; private set; }

		// Token: 0x1700018B RID: 395
		// (get) Token: 0x0600047F RID: 1151 RVA: 0x000101F2 File Offset: 0x0000E3F2
		// (set) Token: 0x06000480 RID: 1152 RVA: 0x000101FA File Offset: 0x0000E3FA
		public Vec3 CenterOfMass3D { get; private set; }

		// Token: 0x1700018C RID: 396
		// (get) Token: 0x06000481 RID: 1153 RVA: 0x00010203 File Offset: 0x0000E403
		// (set) Token: 0x06000482 RID: 1154 RVA: 0x0001020B File Offset: 0x0000E40B
		public float SwingDamageFactor { get; private set; }

		// Token: 0x1700018D RID: 397
		// (get) Token: 0x06000483 RID: 1155 RVA: 0x00010214 File Offset: 0x0000E414
		// (set) Token: 0x06000484 RID: 1156 RVA: 0x0001021C File Offset: 0x0000E41C
		public float ThrustDamageFactor { get; private set; }

		// Token: 0x1700018E RID: 398
		// (get) Token: 0x06000485 RID: 1157 RVA: 0x00010225 File Offset: 0x0000E425
		// (set) Token: 0x06000486 RID: 1158 RVA: 0x0001022D File Offset: 0x0000E42D
		public int Handling { get; private set; }

		// Token: 0x1700018F RID: 399
		// (get) Token: 0x06000487 RID: 1159 RVA: 0x00010236 File Offset: 0x0000E436
		// (set) Token: 0x06000488 RID: 1160 RVA: 0x0001023E File Offset: 0x0000E43E
		public float SweetSpotReach { get; private set; }

		// Token: 0x17000190 RID: 400
		// (get) Token: 0x06000489 RID: 1161 RVA: 0x00010247 File Offset: 0x0000E447
		// (set) Token: 0x0600048A RID: 1162 RVA: 0x0001024F File Offset: 0x0000E44F
		public string TrailParticleName { get; private set; }

		// Token: 0x17000191 RID: 401
		// (get) Token: 0x0600048B RID: 1163 RVA: 0x00010258 File Offset: 0x0000E458
		// (set) Token: 0x0600048C RID: 1164 RVA: 0x00010260 File Offset: 0x0000E460
		public MatrixFrame StickingFrame { get; private set; }

		// Token: 0x17000192 RID: 402
		// (get) Token: 0x0600048D RID: 1165 RVA: 0x00010269 File Offset: 0x0000E469
		// (set) Token: 0x0600048E RID: 1166 RVA: 0x00010271 File Offset: 0x0000E471
		public Vec3 AmmoOffset { get; private set; }

		// Token: 0x17000193 RID: 403
		// (get) Token: 0x0600048F RID: 1167 RVA: 0x0001027A File Offset: 0x0000E47A
		// (set) Token: 0x06000490 RID: 1168 RVA: 0x00010282 File Offset: 0x0000E482
		public short MaxDataValue { get; private set; }

		// Token: 0x17000194 RID: 404
		// (get) Token: 0x06000491 RID: 1169 RVA: 0x0001028B File Offset: 0x0000E48B
		// (set) Token: 0x06000492 RID: 1170 RVA: 0x00010293 File Offset: 0x0000E493
		public MatrixFrame Frame { get; private set; }

		// Token: 0x17000195 RID: 405
		// (get) Token: 0x06000493 RID: 1171 RVA: 0x0001029C File Offset: 0x0000E49C
		// (set) Token: 0x06000494 RID: 1172 RVA: 0x000102A4 File Offset: 0x0000E4A4
		public Vec3 RotationSpeed { get; private set; }

		// Token: 0x17000196 RID: 406
		// (get) Token: 0x06000495 RID: 1173 RVA: 0x000102AD File Offset: 0x0000E4AD
		// (set) Token: 0x06000496 RID: 1174 RVA: 0x000102B5 File Offset: 0x0000E4B5
		public short ReloadPhaseCount { get; private set; }

		// Token: 0x06000497 RID: 1175 RVA: 0x000102C0 File Offset: 0x0000E4C0
		public void Init(string weaponUsageName, string physicsMaterial, string itemUsage, DamageTypes thrustDamageType, DamageTypes swingDamageType, int bodyArmor, int weaponLength, float weaponBalance, float inertia, float centerOfMass, int handling, float swingDamageFactor, float thrustDamageFactor, short maxDataValue, string passBySoundCode, int accuracy, int missileSpeed, MatrixFrame stickingFrame, WeaponClass ammoClass, float sweetSpot, int swingSpeed, int swingDamage, int thrustSpeed, int thrustDamage, Vec3 rotationSpeed, WeaponComponentData.WeaponTiers tier, short reloadPhaseCount)
		{
			this.WeaponDescriptionId = weaponUsageName;
			this.PhysicsMaterial = physicsMaterial;
			this.ItemUsage = itemUsage;
			this.ThrustDamageType = thrustDamageType;
			this.SwingDamageType = swingDamageType;
			this.BodyArmor = bodyArmor;
			this.WeaponLength = weaponLength;
			this.WeaponBalance = weaponBalance;
			this.Inertia = inertia;
			this.CenterOfMass = centerOfMass;
			this.Handling = handling;
			this.SwingDamageFactor = swingDamageFactor;
			this.ThrustDamageFactor = thrustDamageFactor;
			this.MaxDataValue = maxDataValue;
			this.PassbySoundCode = passBySoundCode;
			this.Accuracy = accuracy;
			this.MissileSpeed = missileSpeed;
			this.StickingFrame = stickingFrame;
			this.AmmoClass = ammoClass;
			this.SweetSpotReach = sweetSpot;
			this.SwingSpeed = swingSpeed;
			this.SwingDamage = swingDamage;
			this.ThrustSpeed = thrustSpeed;
			this.ThrustDamage = thrustDamage;
			this.Frame = MatrixFrame.Identity;
			this.CenterOfMass3D = new Vec3(0f, 0f, centerOfMass, -1f);
			this.RotationSpeed = rotationSpeed;
			this.WeaponTier = tier;
			this.ReloadPhaseCount = reloadPhaseCount;
		}

		// Token: 0x17000197 RID: 407
		// (get) Token: 0x06000498 RID: 1176 RVA: 0x000103C9 File Offset: 0x0000E5C9
		public bool IsMeleeWeapon
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.MeleeWeapon);
			}
		}

		// Token: 0x17000198 RID: 408
		// (get) Token: 0x06000499 RID: 1177 RVA: 0x000103D8 File Offset: 0x0000E5D8
		public bool IsRangedWeapon
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.RangedWeapon);
			}
		}

		// Token: 0x17000199 RID: 409
		// (get) Token: 0x0600049A RID: 1178 RVA: 0x000103E7 File Offset: 0x0000E5E7
		public bool IsPolearm
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.MeleeWeapon | WeaponFlags.WideGrip);
			}
		}

		// Token: 0x1700019A RID: 410
		// (get) Token: 0x0600049B RID: 1179 RVA: 0x000103F7 File Offset: 0x0000E5F7
		public bool IsConsumable
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.Consumable);
			}
		}

		// Token: 0x1700019B RID: 411
		// (get) Token: 0x0600049C RID: 1180 RVA: 0x0001040A File Offset: 0x0000E60A
		public bool IsAmmo
		{
			get
			{
				return !this.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask) && this.IsConsumable;
			}
		}

		// Token: 0x1700019C RID: 412
		// (get) Token: 0x0600049D RID: 1181 RVA: 0x00010423 File Offset: 0x0000E623
		public bool IsShield
		{
			get
			{
				return !this.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask) && this.WeaponFlags.HasAllFlags(WeaponFlags.HasHitPoints | WeaponFlags.CanBlockRanged);
			}
		}

		// Token: 0x1700019D RID: 413
		// (get) Token: 0x0600049E RID: 1182 RVA: 0x00010447 File Offset: 0x0000E647
		public bool IsTwoHanded
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.MeleeWeapon | WeaponFlags.NotUsableWithOneHand);
			}
		}

		// Token: 0x1700019E RID: 414
		// (get) Token: 0x0600049F RID: 1183 RVA: 0x00010457 File Offset: 0x0000E657
		public bool IsOneHanded
		{
			get
			{
				return this.WeaponFlags.HasFlag(WeaponFlags.MeleeWeapon) && !this.IsTwoHanded;
			}
		}

		// Token: 0x1700019F RID: 415
		// (get) Token: 0x060004A0 RID: 1184 RVA: 0x0001047D File Offset: 0x0000E67D
		public bool IsBow
		{
			get
			{
				return this.WeaponFlags.HasAllFlags((WeaponFlags)527360UL);
			}
		}

		// Token: 0x170001A0 RID: 416
		// (get) Token: 0x060004A1 RID: 1185 RVA: 0x00010490 File Offset: 0x0000E690
		public bool IsCrossBow
		{
			get
			{
				return this.WeaponFlags.HasFlag(WeaponFlags.HasString) && !this.IsBow;
			}
		}

		// Token: 0x060004A2 RID: 1186 RVA: 0x000104BA File Offset: 0x0000E6BA
		public void SetFrame(MatrixFrame frame)
		{
			this.Frame = frame;
		}

		// Token: 0x060004A3 RID: 1187 RVA: 0x000104C3 File Offset: 0x0000E6C3
		public void SetAmmoOffset(Vec3 ammoOffset)
		{
			this.AmmoOffset = ammoOffset;
		}

		// Token: 0x170001A1 RID: 417
		// (get) Token: 0x060004A4 RID: 1188 RVA: 0x000104CC File Offset: 0x0000E6CC
		public SkillObject RelevantSkill
		{
			get
			{
				return WeaponComponentData.GetRelevantSkillFromWeaponClass(this.WeaponClass);
			}
		}

		// Token: 0x170001A2 RID: 418
		// (get) Token: 0x060004A5 RID: 1189 RVA: 0x000104D9 File Offset: 0x0000E6D9
		public bool CanHitMultipleTargets
		{
			get
			{
				return this.WeaponClass == WeaponClass.TwoHandedAxe || this.WeaponClass == WeaponClass.TwoHandedMace;
			}
		}

		// Token: 0x060004A6 RID: 1190 RVA: 0x000104F0 File Offset: 0x0000E6F0
		public static SkillObject GetRelevantSkillFromWeaponClass(WeaponClass weaponClass)
		{
			SkillObject result = null;
			switch (weaponClass)
			{
			case WeaponClass.Dagger:
			case WeaponClass.OneHandedSword:
			case WeaponClass.OneHandedAxe:
			case WeaponClass.Mace:
				result = DefaultSkills.OneHanded;
				break;
			case WeaponClass.TwoHandedSword:
			case WeaponClass.TwoHandedAxe:
			case WeaponClass.TwoHandedMace:
				result = DefaultSkills.TwoHanded;
				break;
			case WeaponClass.OneHandedPolearm:
			case WeaponClass.TwoHandedPolearm:
			case WeaponClass.LowGripPolearm:
				result = DefaultSkills.Polearm;
				break;
			case WeaponClass.Arrow:
			case WeaponClass.Bow:
				result = DefaultSkills.Bow;
				break;
			case WeaponClass.Bolt:
			case WeaponClass.Crossbow:
				result = DefaultSkills.Crossbow;
				break;
			case WeaponClass.Stone:
			case WeaponClass.Boulder:
			case WeaponClass.ThrowingAxe:
			case WeaponClass.ThrowingKnife:
			case WeaponClass.Javelin:
				result = DefaultSkills.Throwing;
				break;
			case WeaponClass.SmallShield:
			case WeaponClass.LargeShield:
				result = DefaultSkills.OneHanded;
				break;
			}
			return result;
		}

		// Token: 0x060004A7 RID: 1191 RVA: 0x000105A4 File Offset: 0x0000E7A4
		public static ItemObject.ItemTypeEnum GetItemTypeFromWeaponClass(WeaponClass weaponClass)
		{
			switch (weaponClass)
			{
			case WeaponClass.Undefined:
			case WeaponClass.NumClasses:
				return ItemObject.ItemTypeEnum.Invalid;
			case WeaponClass.Dagger:
			case WeaponClass.OneHandedSword:
			case WeaponClass.OneHandedAxe:
			case WeaponClass.Mace:
				return ItemObject.ItemTypeEnum.OneHandedWeapon;
			case WeaponClass.TwoHandedSword:
			case WeaponClass.TwoHandedAxe:
			case WeaponClass.Pick:
			case WeaponClass.TwoHandedMace:
				return ItemObject.ItemTypeEnum.TwoHandedWeapon;
			case WeaponClass.OneHandedPolearm:
			case WeaponClass.TwoHandedPolearm:
			case WeaponClass.LowGripPolearm:
				return ItemObject.ItemTypeEnum.Polearm;
			case WeaponClass.Arrow:
				return ItemObject.ItemTypeEnum.Arrows;
			case WeaponClass.Bolt:
				return ItemObject.ItemTypeEnum.Bolts;
			case WeaponClass.Cartridge:
				return ItemObject.ItemTypeEnum.Bullets;
			case WeaponClass.Bow:
				return ItemObject.ItemTypeEnum.Bow;
			case WeaponClass.Crossbow:
				return ItemObject.ItemTypeEnum.Crossbow;
			case WeaponClass.Stone:
			case WeaponClass.Boulder:
			case WeaponClass.ThrowingAxe:
			case WeaponClass.ThrowingKnife:
			case WeaponClass.Javelin:
				return ItemObject.ItemTypeEnum.Thrown;
			case WeaponClass.Pistol:
				return ItemObject.ItemTypeEnum.Pistol;
			case WeaponClass.Musket:
				return ItemObject.ItemTypeEnum.Musket;
			case WeaponClass.SmallShield:
			case WeaponClass.LargeShield:
				return ItemObject.ItemTypeEnum.Shield;
			case WeaponClass.Banner:
				return ItemObject.ItemTypeEnum.Banner;
			default:
				return ItemObject.ItemTypeEnum.Invalid;
			}
		}

		// Token: 0x060004A8 RID: 1192 RVA: 0x0001064C File Offset: 0x0000E84C
		public WeaponComponentData(ItemObject item, WeaponClass weaponClass = WeaponClass.Undefined, WeaponFlags weaponFlags = (WeaponFlags)0UL)
		{
			this.BodyArmor = 0;
			this.PhysicsMaterial = "";
			this.FlyingSoundCode = "";
			this.PassbySoundCode = "";
			this.ItemUsage = null;
			this.SwingSpeed = 0;
			this.ThrustSpeed = 0;
			this.MissileSpeed = 0;
			this.WeaponLength = 0;
			this.ThrustDamage = 0;
			this.SwingDamage = 0;
			this.AmmoOffset = Vec3.Zero;
			this.Accuracy = 0;
			this.StickingFrame = MatrixFrame.Identity;
			this.TrailParticleName = "";
			this.WeaponClass = weaponClass;
			this.WeaponFlags = weaponFlags;
			this.Frame = MatrixFrame.Identity;
			this.RotationSpeed = Vec3.Zero;
			this.ReloadPhaseCount = 0;
		}

		// Token: 0x060004A9 RID: 1193 RVA: 0x0001070C File Offset: 0x0000E90C
		public void Deserialize(ItemObject item, XmlNode node)
		{
			this.BodyArmor = ((node.Attributes["body_armor"] != null) ? int.Parse(node.Attributes["body_armor"].Value) : 0);
			XmlAttribute xmlAttribute = node.Attributes["physics_material"];
			this.PhysicsMaterial = ((xmlAttribute != null) ? xmlAttribute.Value : null);
			XmlAttribute xmlAttribute2 = node.Attributes["flying_sound_code"];
			this.FlyingSoundCode = ((xmlAttribute2 != null) ? xmlAttribute2.Value : null);
			XmlAttribute xmlAttribute3 = node.Attributes["passby_sound_code"];
			this.PassbySoundCode = ((xmlAttribute3 != null) ? xmlAttribute3.Value : null);
			XmlAttribute xmlAttribute4 = node.Attributes["item_usage"];
			this.ItemUsage = ((xmlAttribute4 != null) ? xmlAttribute4.Value : null);
			this.WeaponBalance = ((node.Attributes["weapon_balance"] != null) ? ((float)int.Parse(node.Attributes["weapon_balance"].Value) * 0.01f) : 0f);
			this.SwingSpeed = ((node.Attributes["speed_rating"] != null) ? int.Parse(node.Attributes["speed_rating"].Value) : 0);
			this.ThrustSpeed = ((node.Attributes["thrust_speed"] != null) ? int.Parse(node.Attributes["thrust_speed"].Value) : 0);
			this.MissileSpeed = ((node.Attributes["missile_speed"] != null) ? int.Parse(node.Attributes["missile_speed"].Value) : 0);
			this.WeaponLength = ((node.Attributes["weapon_length"] != null) ? int.Parse(node.Attributes["weapon_length"].Value) : 0);
			this.ThrustDamage = ((node.Attributes["thrust_damage"] != null) ? int.Parse(node.Attributes["thrust_damage"].Value) : 0);
			this.SwingDamage = ((node.Attributes["swing_damage"] != null) ? int.Parse(node.Attributes["swing_damage"].Value) : 0);
			this.Accuracy = ((node.Attributes["accuracy"] != null) ? int.Parse(node.Attributes["accuracy"].Value) : 100);
			this.ThrustDamageType = ((node.Attributes["thrust_damage_type"] != null) ? ((DamageTypes)Enum.Parse(typeof(DamageTypes), node.Attributes["thrust_damage_type"].Value)) : DamageTypes.Blunt);
			this.SwingDamageType = ((node.Attributes["swing_damage_type"] != null) ? ((DamageTypes)Enum.Parse(typeof(DamageTypes), node.Attributes["swing_damage_type"].Value)) : DamageTypes.Blunt);
			this.WeaponClass = ((node.Attributes["weapon_class"] != null) ? ((WeaponClass)Enum.Parse(typeof(WeaponClass), node.Attributes["weapon_class"].Value)) : WeaponClass.Undefined);
			this.AmmoClass = ((node.Attributes["ammo_class"] != null) ? ((WeaponClass)Enum.Parse(typeof(WeaponClass), node.Attributes["ammo_class"].Value)) : WeaponClass.Undefined);
			this.ReloadPhaseCount = ((node.Attributes["reload_phase_count"] != null) ? short.Parse(node.Attributes["reload_phase_count"].Value) : 1);
			this.CenterOfMass = (float)this.WeaponLength * 0.5f * 0.01f;
			this.CenterOfMass3D = ((node.Attributes["center_of_mass"] != null) ? Vec3.Parse(node.Attributes["center_of_mass"].Value) : Vec3.Zero);
			if (this.WeaponClass != WeaponClass.Bow && this.WeaponClass != WeaponClass.Crossbow && this.WeaponClass != WeaponClass.SmallShield && this.WeaponClass != WeaponClass.LargeShield && this.WeaponClass != WeaponClass.Arrow && this.WeaponClass != WeaponClass.Bolt && this.WeaponClass != WeaponClass.ThrowingKnife && this.WeaponClass != WeaponClass.ThrowingAxe && this.WeaponClass != WeaponClass.Javelin && this.WeaponClass != WeaponClass.Stone)
			{
				WeaponClass weaponClass = this.WeaponClass;
			}
			XmlAttribute xmlAttribute5 = node.Attributes["ammo_limit"];
			XmlAttribute xmlAttribute6 = node.Attributes["stack_amount"];
			XmlAttribute xmlAttribute7 = node.Attributes["hit_points"];
			if (xmlAttribute5 != null)
			{
				this.MaxDataValue = short.Parse(xmlAttribute5.Value);
			}
			else if (xmlAttribute6 != null)
			{
				this.MaxDataValue = short.Parse(xmlAttribute6.Value);
			}
			else if (xmlAttribute7 != null)
			{
				this.MaxDataValue = short.Parse(xmlAttribute7.Value);
			}
			else
			{
				this.MaxDataValue = 0;
			}
			Vec3 vec = default(Vec3);
			Mat3 identity = Mat3.Identity;
			XmlNode xmlNode = node.Attributes["sticking_position"];
			if (xmlNode != null)
			{
				string[] array = xmlNode.Value.Split(new char[]
				{
					','
				});
				if (array.Length == 3)
				{
					float.TryParse(array[0], out vec.x);
					float.TryParse(array[1], out vec.y);
					float.TryParse(array[2], out vec.z);
				}
			}
			XmlNode xmlNode2 = node.Attributes["sticking_rotation"];
			if (xmlNode2 != null)
			{
				string[] array2 = xmlNode2.Value.Split(new char[]
				{
					','
				});
				if (array2.Length == 3)
				{
					float f;
					float.TryParse(array2[0], out f);
					float f2;
					float.TryParse(array2[1], out f2);
					float f3;
					float.TryParse(array2[2], out f3);
					identity.RotateAboutSide(f.ToRadians());
					identity.RotateAboutUp(f2.ToRadians());
					identity.RotateAboutForward(f3.ToRadians());
				}
			}
			vec = identity.TransformToParent(vec);
			this.StickingFrame = new MatrixFrame(identity, vec);
			Vec3 o = default(Vec3);
			Mat3 identity2 = Mat3.Identity;
			XmlNode xmlNode3 = node.Attributes["position"];
			if (xmlNode3 != null)
			{
				string[] array3 = xmlNode3.Value.Split(new char[]
				{
					','
				});
				if (array3.Length == 3)
				{
					float.TryParse(array3[0], out o.x);
					float.TryParse(array3[1], out o.y);
					float.TryParse(array3[2], out o.z);
				}
			}
			XmlNode xmlNode4 = node.Attributes["rotation"];
			if (xmlNode4 != null)
			{
				string[] array4 = xmlNode4.Value.Split(new char[]
				{
					','
				});
				if (array4.Length == 3)
				{
					float f4;
					float.TryParse(array4[0], out f4);
					float f5;
					float.TryParse(array4[1], out f5);
					float f6;
					float.TryParse(array4[2], out f6);
					identity2.RotateAboutUp(f6.ToRadians());
					identity2.RotateAboutSide(f4.ToRadians());
					identity2.RotateAboutForward(f5.ToRadians());
				}
			}
			this.Frame = new MatrixFrame(identity2, o);
			this.RotationSpeed = ((node.Attributes["rotation_speed"] != null) ? Vec3.Parse(node.Attributes["rotation_speed"].Value) : Vec3.Zero);
			XmlAttribute xmlAttribute8 = node.Attributes["trail_particle_name"];
			this.TrailParticleName = ((xmlAttribute8 != null) ? xmlAttribute8.Value : null);
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode5 = (XmlNode)obj;
				if (xmlNode5.Name == "WeaponFlags")
				{
					foreach (object obj2 in Enum.GetValues(typeof(WeaponFlags)))
					{
						WeaponFlags weaponFlags = (WeaponFlags)obj2;
						if (xmlNode5.Attributes[weaponFlags.ToString()] != null)
						{
							this.WeaponFlags |= weaponFlags;
						}
					}
				}
			}
			this.Inertia = item.Weight * 0.05f;
			this.Handling = this.ThrustSpeed;
			this.SweetSpotReach = 0.93f;
			this.SetDamageFactors(item.Weight);
		}

		// Token: 0x060004AA RID: 1194 RVA: 0x00010F9C File Offset: 0x0000F19C
		private void SetDamageFactors(float weight)
		{
			DamageTypes swingDamageType = this.SwingDamageType;
			if (this.WeaponClass == WeaponClass.Bow || this.WeaponClass == WeaponClass.Crossbow || this.WeaponClass == WeaponClass.ThrowingAxe || this.WeaponClass == WeaponClass.ThrowingKnife || this.WeaponClass == WeaponClass.Javelin || this.WeaponClass == WeaponClass.Arrow || this.WeaponClass == WeaponClass.Bolt)
			{
				this.SwingDamageFactor = 1f;
				this.ThrustDamageFactor = 1f;
				return;
			}
			float num = MathF.Sqrt(MathF.Sqrt(weight / ((float)this.WeaponLength * 0.01f)));
			float num2 = 0f;
			switch (swingDamageType)
			{
			case DamageTypes.Cut:
				num *= 0.8f;
				num2 = 0.5f;
				break;
			case DamageTypes.Pierce:
				num *= 0.7f;
				num2 = 0.4f;
				break;
			case DamageTypes.Blunt:
				num *= 1f;
				num2 = 1f;
				break;
			}
			num *= 0.8f;
			num2 *= 0.8f;
			this.SwingDamageFactor = num2;
			this.ThrustDamageFactor = num2;
		}

		// Token: 0x060004AB RID: 1195 RVA: 0x0001108D File Offset: 0x0000F28D
		public float GetRealWeaponLength()
		{
			return (float)this.WeaponLength * 0.01f + Vec3.DotProduct(this.Frame.rotation.u, this.Frame.origin);
		}

		// Token: 0x060004AC RID: 1196 RVA: 0x000110C0 File Offset: 0x0000F2C0
		public MatrixFrame GetMissileStartingFrame()
		{
			MatrixFrame identity;
			if (this.WeaponClass == WeaponClass.Arrow || this.WeaponClass == WeaponClass.Bolt)
			{
				Mat3 rotation = new Mat3(1f, 0f, 0f, 0f, 0f, -1f, 0f, 1f, 0f);
				identity.rotation = rotation;
				identity.origin = Vec3.Zero;
			}
			else
			{
				identity = MatrixFrame.Identity;
				if (this.WeaponClass == WeaponClass.ThrowingAxe)
				{
					identity.rotation.RotateAboutUp(-1.5707964f);
				}
				else if (this.WeaponClass == WeaponClass.ThrowingKnife)
				{
					identity.rotation.RotateAboutUp(-1.5707964f);
				}
				else
				{
					Mat3 rotation2 = new Mat3(1f, 0f, 0f, 0f, 0f, -1f, 0f, 1f, 0f);
					identity.rotation = rotation2;
				}
			}
			return identity;
		}

		// Token: 0x04000243 RID: 579
		public WeaponFlags WeaponFlags;

		// Token: 0x020000EB RID: 235
		public enum WeaponTiers
		{
			// Token: 0x04000693 RID: 1683
			Tier1,
			// Token: 0x04000694 RID: 1684
			Tier2,
			// Token: 0x04000695 RID: 1685
			Tier3,
			// Token: 0x04000696 RID: 1686
			Tier4,
			// Token: 0x04000697 RID: 1687
			Special
		}
	}
}
