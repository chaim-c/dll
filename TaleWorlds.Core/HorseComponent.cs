using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200002C RID: 44
	public class HorseComponent : ItemComponent
	{
		// Token: 0x060002E8 RID: 744 RVA: 0x0000C589 File Offset: 0x0000A789
		internal static void AutoGeneratedStaticCollectObjectsHorseComponent(object o, List<object> collectedObjects)
		{
			((HorseComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060002E9 RID: 745 RVA: 0x0000C597 File Offset: 0x0000A797
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x170000E3 RID: 227
		// (get) Token: 0x060002EA RID: 746 RVA: 0x0000C5A0 File Offset: 0x0000A7A0
		// (set) Token: 0x060002EB RID: 747 RVA: 0x0000C5A8 File Offset: 0x0000A7A8
		public Monster Monster { get; private set; }

		// Token: 0x170000E4 RID: 228
		// (get) Token: 0x060002EC RID: 748 RVA: 0x0000C5B1 File Offset: 0x0000A7B1
		// (set) Token: 0x060002ED RID: 749 RVA: 0x0000C5B9 File Offset: 0x0000A7B9
		public int Maneuver { get; private set; }

		// Token: 0x170000E5 RID: 229
		// (get) Token: 0x060002EE RID: 750 RVA: 0x0000C5C2 File Offset: 0x0000A7C2
		// (set) Token: 0x060002EF RID: 751 RVA: 0x0000C5CA File Offset: 0x0000A7CA
		public int ChargeDamage { get; private set; }

		// Token: 0x170000E6 RID: 230
		// (get) Token: 0x060002F0 RID: 752 RVA: 0x0000C5D3 File Offset: 0x0000A7D3
		// (set) Token: 0x060002F1 RID: 753 RVA: 0x0000C5DB File Offset: 0x0000A7DB
		public int Speed { get; private set; }

		// Token: 0x170000E7 RID: 231
		// (get) Token: 0x060002F2 RID: 754 RVA: 0x0000C5E4 File Offset: 0x0000A7E4
		// (set) Token: 0x060002F3 RID: 755 RVA: 0x0000C5EC File Offset: 0x0000A7EC
		public int BodyLength { get; private set; }

		// Token: 0x170000E8 RID: 232
		// (get) Token: 0x060002F4 RID: 756 RVA: 0x0000C5F5 File Offset: 0x0000A7F5
		public int HitPoints
		{
			get
			{
				return this.Monster.HitPoints;
			}
		}

		// Token: 0x170000E9 RID: 233
		// (get) Token: 0x060002F5 RID: 757 RVA: 0x0000C602 File Offset: 0x0000A802
		// (set) Token: 0x060002F6 RID: 758 RVA: 0x0000C60A File Offset: 0x0000A80A
		public int HitPointBonus { get; private set; }

		// Token: 0x170000EA RID: 234
		// (get) Token: 0x060002F7 RID: 759 RVA: 0x0000C613 File Offset: 0x0000A813
		// (set) Token: 0x060002F8 RID: 760 RVA: 0x0000C61B File Offset: 0x0000A81B
		public bool IsRideable { get; private set; }

		// Token: 0x170000EB RID: 235
		// (get) Token: 0x060002F9 RID: 761 RVA: 0x0000C624 File Offset: 0x0000A824
		// (set) Token: 0x060002FA RID: 762 RVA: 0x0000C62C File Offset: 0x0000A82C
		public bool IsPackAnimal { get; private set; }

		// Token: 0x170000EC RID: 236
		// (get) Token: 0x060002FB RID: 763 RVA: 0x0000C635 File Offset: 0x0000A835
		public bool IsMount
		{
			get
			{
				return this.IsRideable && !this.IsPackAnimal;
			}
		}

		// Token: 0x170000ED RID: 237
		// (get) Token: 0x060002FC RID: 764 RVA: 0x0000C64A File Offset: 0x0000A84A
		public bool IsLiveStock
		{
			get
			{
				return !this.IsRideable && !this.IsPackAnimal;
			}
		}

		// Token: 0x170000EE RID: 238
		// (get) Token: 0x060002FD RID: 765 RVA: 0x0000C65F File Offset: 0x0000A85F
		public MBReadOnlyList<HorseComponent.MaterialProperty> HorseMaterialNames
		{
			get
			{
				return this._monsterMaterialNames;
			}
		}

		// Token: 0x170000EF RID: 239
		// (get) Token: 0x060002FE RID: 766 RVA: 0x0000C667 File Offset: 0x0000A867
		public int MeatCount
		{
			get
			{
				if (this.IsRideable)
				{
					return 3;
				}
				if (this.Speed > 20)
				{
					return 6;
				}
				if (this.Speed <= 11)
				{
					return 1;
				}
				return 2;
			}
		}

		// Token: 0x170000F0 RID: 240
		// (get) Token: 0x060002FF RID: 767 RVA: 0x0000C68C File Offset: 0x0000A88C
		public int HideCount
		{
			get
			{
				if (this.IsRideable)
				{
					return 0;
				}
				if (this.Speed <= 20)
				{
					return 1;
				}
				return 2;
			}
		}

		// Token: 0x170000F1 RID: 241
		// (get) Token: 0x06000300 RID: 768 RVA: 0x0000C6A5 File Offset: 0x0000A8A5
		// (set) Token: 0x06000301 RID: 769 RVA: 0x0000C6AD File Offset: 0x0000A8AD
		public SkeletonScale SkeletonScale { get; private set; }

		// Token: 0x06000302 RID: 770 RVA: 0x0000C6B8 File Offset: 0x0000A8B8
		public HorseComponent()
		{
			this.Maneuver = 0;
			this.ChargeDamage = 0;
			this.Speed = 0;
			this.BodyLength = 0;
			this.HitPointBonus = 0;
			this.ModifiedName = null;
			this._monsterMaterialNames = new MBList<HorseComponent.MaterialProperty>();
			this.AdditionalMeshesNameList = new List<KeyValuePair<string, bool>>();
			this.SkeletonScale = null;
		}

		// Token: 0x06000303 RID: 771 RVA: 0x0000C712 File Offset: 0x0000A912
		public override ItemComponent GetCopy()
		{
			return new HorseComponent
			{
				Maneuver = this.Maneuver,
				ChargeDamage = this.ChargeDamage,
				Speed = this.Speed,
				BodyLength = this.BodyLength
			};
		}

		// Token: 0x06000304 RID: 772 RVA: 0x0000C74C File Offset: 0x0000A94C
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Maneuver = XmlHelper.ReadInt(node, "maneuver");
			this.ChargeDamage = XmlHelper.ReadInt(node, "charge_damage");
			this.Speed = XmlHelper.ReadInt(node, "speed");
			this.BodyLength = XmlHelper.ReadInt(node, "body_length");
			this.IsRideable = XmlHelper.ReadBool(node, "is_mountable");
			this.IsPackAnimal = XmlHelper.ReadBool(node, "is_pack_animal");
			this.Monster = (Monster)objectManager.ReadObjectReferenceFromXml("monster", typeof(Monster), node);
			this.HitPointBonus = XmlHelper.ReadInt(node, "extra_health");
			XmlAttribute xmlAttribute = node.Attributes["skeleton_scale"];
			string text = (xmlAttribute != null) ? xmlAttribute.Value : null;
			if (text != null)
			{
				this.SkeletonScale = Game.Current.ObjectManager.GetObject<SkeletonScale>(text);
			}
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "Materials")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							XmlNode xmlNode2 = (XmlNode)obj2;
							if (xmlNode2.Name == "Material")
							{
								string value = xmlNode2.Attributes["name"].Value;
								this._monsterMaterialNames.Add(new HorseComponent.MaterialProperty(value));
								foreach (object obj3 in xmlNode2.ChildNodes)
								{
									XmlNode xmlNode3 = (XmlNode)obj3;
									if (xmlNode3.Name == "MeshMultipliers")
									{
										foreach (object obj4 in xmlNode3.ChildNodes)
										{
											XmlNode xmlNode4 = (XmlNode)obj4;
											if (xmlNode4.Name == "MeshMultiplier")
											{
												uint item = (xmlNode4.Attributes["mesh_multiplier"] != null) ? Convert.ToUInt32(xmlNode4.Attributes["mesh_multiplier"].Value, 16) : 0U;
												float item2 = (xmlNode4.Attributes["percentage"] != null) ? ((float)Convert.ToDouble(xmlNode4.Attributes["percentage"].Value)) : 0f;
												this._monsterMaterialNames[this._monsterMaterialNames.Count - 1].MeshMultiplier.Add(new Tuple<uint, float>(item, item2));
											}
										}
									}
								}
								this._monsterMaterialNames[this._monsterMaterialNames.Count - 1].MeshMultiplier.Sort((Tuple<uint, float> x, Tuple<uint, float> y) => x.Item2.CompareTo(y.Item2));
							}
						}
						continue;
					}
				}
				if (xmlNode.Name == "AdditionalMeshes")
				{
					foreach (object obj5 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode5 = (XmlNode)obj5;
						if (xmlNode5.Name == "Mesh" && xmlNode5.Attributes["name"] != null)
						{
							bool value2 = false;
							if (xmlNode5.Attributes["affected_by_cover"] != null)
							{
								value2 = bool.TryParse(xmlNode5.Attributes["affected_by_cover"].InnerText, out value2);
							}
							this.AdditionalMeshesNameList.Add(new KeyValuePair<string, bool>(xmlNode5.Attributes["name"].InnerText, value2));
						}
					}
				}
			}
		}

		// Token: 0x040001BE RID: 446
		public TextObject ModifiedName;

		// Token: 0x040001BF RID: 447
		public List<KeyValuePair<string, bool>> AdditionalMeshesNameList;

		// Token: 0x040001C2 RID: 450
		private readonly MBList<HorseComponent.MaterialProperty> _monsterMaterialNames;

		// Token: 0x020000E3 RID: 227
		public struct MaterialProperty
		{
			// Token: 0x06000A05 RID: 2565 RVA: 0x00020B0F File Offset: 0x0001ED0F
			public MaterialProperty(string name)
			{
				this.Name = name;
				this.MeshMultiplier = new List<Tuple<uint, float>>();
			}

			// Token: 0x1700034D RID: 845
			// (get) Token: 0x06000A06 RID: 2566 RVA: 0x00020B23 File Offset: 0x0001ED23
			// (set) Token: 0x06000A07 RID: 2567 RVA: 0x00020B2B File Offset: 0x0001ED2B
			public string Name { get; private set; }

			// Token: 0x04000659 RID: 1625
			public List<Tuple<uint, float>> MeshMultiplier;
		}
	}
}
