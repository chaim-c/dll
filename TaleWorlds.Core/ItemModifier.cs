using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200002F RID: 47
	public sealed class ItemModifier : MBObjectBase
	{
		// Token: 0x06000324 RID: 804 RVA: 0x0000CD91 File Offset: 0x0000AF91
		internal static void AutoGeneratedStaticCollectObjectsItemModifier(object o, List<object> collectedObjects)
		{
			((ItemModifier)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000325 RID: 805 RVA: 0x0000CD9F File Offset: 0x0000AF9F
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x170000FC RID: 252
		// (get) Token: 0x06000326 RID: 806 RVA: 0x0000CDA8 File Offset: 0x0000AFA8
		// (set) Token: 0x06000327 RID: 807 RVA: 0x0000CDB0 File Offset: 0x0000AFB0
		[CachedData]
		public TextObject Name { get; private set; }

		// Token: 0x170000FD RID: 253
		// (get) Token: 0x06000328 RID: 808 RVA: 0x0000CDB9 File Offset: 0x0000AFB9
		// (set) Token: 0x06000329 RID: 809 RVA: 0x0000CDC1 File Offset: 0x0000AFC1
		public int Damage { get; private set; }

		// Token: 0x170000FE RID: 254
		// (get) Token: 0x0600032A RID: 810 RVA: 0x0000CDCA File Offset: 0x0000AFCA
		// (set) Token: 0x0600032B RID: 811 RVA: 0x0000CDD2 File Offset: 0x0000AFD2
		public int Speed { get; private set; }

		// Token: 0x170000FF RID: 255
		// (get) Token: 0x0600032C RID: 812 RVA: 0x0000CDDB File Offset: 0x0000AFDB
		// (set) Token: 0x0600032D RID: 813 RVA: 0x0000CDE3 File Offset: 0x0000AFE3
		public int MissileSpeed { get; private set; }

		// Token: 0x17000100 RID: 256
		// (get) Token: 0x0600032E RID: 814 RVA: 0x0000CDEC File Offset: 0x0000AFEC
		// (set) Token: 0x0600032F RID: 815 RVA: 0x0000CDF4 File Offset: 0x0000AFF4
		public int Armor { get; private set; }

		// Token: 0x17000101 RID: 257
		// (get) Token: 0x06000330 RID: 816 RVA: 0x0000CDFD File Offset: 0x0000AFFD
		// (set) Token: 0x06000331 RID: 817 RVA: 0x0000CE05 File Offset: 0x0000B005
		public short HitPoints { get; private set; }

		// Token: 0x17000102 RID: 258
		// (get) Token: 0x06000332 RID: 818 RVA: 0x0000CE0E File Offset: 0x0000B00E
		// (set) Token: 0x06000333 RID: 819 RVA: 0x0000CE16 File Offset: 0x0000B016
		public short StackCount { get; private set; }

		// Token: 0x17000103 RID: 259
		// (get) Token: 0x06000334 RID: 820 RVA: 0x0000CE1F File Offset: 0x0000B01F
		// (set) Token: 0x06000335 RID: 821 RVA: 0x0000CE27 File Offset: 0x0000B027
		public float MountSpeed { get; private set; }

		// Token: 0x17000104 RID: 260
		// (get) Token: 0x06000336 RID: 822 RVA: 0x0000CE30 File Offset: 0x0000B030
		// (set) Token: 0x06000337 RID: 823 RVA: 0x0000CE38 File Offset: 0x0000B038
		public float Maneuver { get; private set; }

		// Token: 0x17000105 RID: 261
		// (get) Token: 0x06000338 RID: 824 RVA: 0x0000CE41 File Offset: 0x0000B041
		// (set) Token: 0x06000339 RID: 825 RVA: 0x0000CE49 File Offset: 0x0000B049
		public float ChargeDamage { get; private set; }

		// Token: 0x17000106 RID: 262
		// (get) Token: 0x0600033A RID: 826 RVA: 0x0000CE52 File Offset: 0x0000B052
		// (set) Token: 0x0600033B RID: 827 RVA: 0x0000CE5A File Offset: 0x0000B05A
		public float MountHitPoints { get; private set; }

		// Token: 0x17000107 RID: 263
		// (get) Token: 0x0600033C RID: 828 RVA: 0x0000CE63 File Offset: 0x0000B063
		// (set) Token: 0x0600033D RID: 829 RVA: 0x0000CE6B File Offset: 0x0000B06B
		public float LootDropScore { get; private set; }

		// Token: 0x17000108 RID: 264
		// (get) Token: 0x0600033E RID: 830 RVA: 0x0000CE74 File Offset: 0x0000B074
		// (set) Token: 0x0600033F RID: 831 RVA: 0x0000CE7C File Offset: 0x0000B07C
		public float ProductionDropScore { get; private set; }

		// Token: 0x17000109 RID: 265
		// (get) Token: 0x06000340 RID: 832 RVA: 0x0000CE85 File Offset: 0x0000B085
		// (set) Token: 0x06000341 RID: 833 RVA: 0x0000CE8D File Offset: 0x0000B08D
		public float PriceMultiplier { get; private set; }

		// Token: 0x1700010A RID: 266
		// (get) Token: 0x06000342 RID: 834 RVA: 0x0000CE96 File Offset: 0x0000B096
		// (set) Token: 0x06000343 RID: 835 RVA: 0x0000CE9E File Offset: 0x0000B09E
		public ItemQuality ItemQuality { get; private set; }

		// Token: 0x06000344 RID: 836 RVA: 0x0000CEA7 File Offset: 0x0000B0A7
		public ItemModifier()
		{
			this.Name = TextObject.Empty;
		}

		// Token: 0x06000345 RID: 837 RVA: 0x0000CEBC File Offset: 0x0000B0BC
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(XmlHelper.ReadString(node, "name"), null);
			this.Damage = XmlHelper.ReadInt(node, "damage");
			this.Speed = XmlHelper.ReadInt(node, "speed");
			this.MissileSpeed = XmlHelper.ReadInt(node, "missile_speed");
			this.Armor = XmlHelper.ReadInt(node, "armor");
			this.MountSpeed = XmlHelper.ReadFloat(node, "horse_speed", 0f);
			this.Maneuver = XmlHelper.ReadFloat(node, "maneuver", 0f);
			this.ChargeDamage = XmlHelper.ReadFloat(node, "charge_damage", 0f);
			this.MountHitPoints = XmlHelper.ReadFloat(node, "horse_hit_points", 0f);
			this.HitPoints = (short)XmlHelper.ReadInt(node, "hit_points");
			this.StackCount = (short)XmlHelper.ReadInt(node, "stack_count");
			this.ItemQuality = this.ReadItemQuality(node);
			this.LootDropScore = (float)XmlHelper.ReadInt(node, "loot_drop_score");
			this.ProductionDropScore = (float)XmlHelper.ReadInt(node, "production_drop_score");
			this.PriceMultiplier = XmlHelper.ReadFloat(node, "price_factor", 1f);
			ItemModifierGroup itemModifierGroup = MBObjectManager.Instance.ReadObjectReferenceFromXml<ItemModifierGroup>("modifier_group", node);
			if (itemModifierGroup == null)
			{
				return;
			}
			itemModifierGroup.AddItemModifier(this);
		}

		// Token: 0x06000346 RID: 838 RVA: 0x0000D00C File Offset: 0x0000B20C
		private ItemQuality ReadItemQuality(XmlNode node)
		{
			string text = XmlHelper.ReadString(node, "quality");
			uint num = <PrivateImplementationDetails>.ComputeStringHash(text);
			if (num <= 1297810548U)
			{
				if (num != 706781102U)
				{
					if (num != 802765055U)
					{
						if (num != 1297810548U)
						{
							return ItemQuality.Common;
						}
						if (!(text == "common"))
						{
							return ItemQuality.Common;
						}
					}
					else
					{
						if (!(text == "inferior"))
						{
							return ItemQuality.Common;
						}
						return ItemQuality.Inferior;
					}
				}
				else
				{
					if (!(text == "masterwork"))
					{
						return ItemQuality.Common;
					}
					return ItemQuality.Masterwork;
				}
			}
			else if (num <= 2166136261U)
			{
				if (num != 1432300394U)
				{
					if (num != 2166136261U)
					{
						return ItemQuality.Common;
					}
					if (text == null)
					{
						return ItemQuality.Common;
					}
					if (text.Length != 0)
					{
						return ItemQuality.Common;
					}
				}
				else
				{
					if (!(text == "legendary"))
					{
						return ItemQuality.Common;
					}
					return ItemQuality.Legendary;
				}
			}
			else if (num != 2413655645U)
			{
				if (num != 3203434221U)
				{
					return ItemQuality.Common;
				}
				if (!(text == "fine"))
				{
					return ItemQuality.Common;
				}
				return ItemQuality.Fine;
			}
			else
			{
				if (!(text == "poor"))
				{
					return ItemQuality.Common;
				}
				return ItemQuality.Poor;
			}
			return ItemQuality.Common;
		}

		// Token: 0x06000347 RID: 839 RVA: 0x0000D0F4 File Offset: 0x0000B2F4
		public bool Equals(ItemModifier other)
		{
			return other != null && base.StringId == other.StringId;
		}

		// Token: 0x06000348 RID: 840 RVA: 0x0000D10C File Offset: 0x0000B30C
		public override int GetHashCode()
		{
			return base.StringId.GetDeterministicHashCode();
		}

		// Token: 0x06000349 RID: 841 RVA: 0x0000D119 File Offset: 0x0000B319
		private static int ModifyFactor(int baseValue, float factor)
		{
			if (baseValue == 0)
			{
				return 0;
			}
			if (!MBMath.ApproximatelyEquals(factor, 0f, 1E-05f))
			{
				baseValue = ((factor < 1f) ? MathF.Ceiling(factor * (float)baseValue) : MathF.Floor(factor * (float)baseValue));
			}
			return baseValue;
		}

		// Token: 0x0600034A RID: 842 RVA: 0x0000D154 File Offset: 0x0000B354
		public int ModifyDamage(int baseDamage)
		{
			int num = baseDamage + this.Damage;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600034B RID: 843 RVA: 0x0000D174 File Offset: 0x0000B374
		public int ModifySpeed(int baseSpeed)
		{
			int num = baseSpeed + this.Speed;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600034C RID: 844 RVA: 0x0000D194 File Offset: 0x0000B394
		public int ModifyMountSpeed(int baseSpeed)
		{
			int num = ItemModifier.ModifyFactor(baseSpeed, this.MountSpeed);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600034D RID: 845 RVA: 0x0000D1B8 File Offset: 0x0000B3B8
		public int ModifyMountManeuver(int baseManeuver)
		{
			int num = ItemModifier.ModifyFactor(baseManeuver, this.Maneuver);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600034E RID: 846 RVA: 0x0000D1DC File Offset: 0x0000B3DC
		public int ModifyMountCharge(int baseCharge)
		{
			int num = ItemModifier.ModifyFactor(baseCharge, this.ChargeDamage);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600034F RID: 847 RVA: 0x0000D200 File Offset: 0x0000B400
		public int ModifyMountHitPoints(int baseCharge)
		{
			int num = ItemModifier.ModifyFactor(baseCharge, this.MountHitPoints);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000350 RID: 848 RVA: 0x0000D224 File Offset: 0x0000B424
		public int ModifyMissileSpeed(int baseSpeed)
		{
			int num = baseSpeed + this.MissileSpeed;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000351 RID: 849 RVA: 0x0000D244 File Offset: 0x0000B444
		public int ModifyArmor(int armorValue)
		{
			int num = armorValue + this.Armor;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000352 RID: 850 RVA: 0x0000D264 File Offset: 0x0000B464
		public short ModifyHitPoints(short baseHitPoints)
		{
			short num = baseHitPoints + this.HitPoints;
			return (short)MBMath.ClampInt((int)num, 1, (int)num);
		}

		// Token: 0x06000353 RID: 851 RVA: 0x0000D284 File Offset: 0x0000B484
		public short ModifyStackCount(short baseStackCount)
		{
			short num = baseStackCount + this.StackCount;
			return (short)MBMath.ClampInt((int)num, 1, (int)num);
		}
	}
}
