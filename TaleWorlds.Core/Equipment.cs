using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000029 RID: 41
	public class Equipment
	{
		// Token: 0x06000293 RID: 659 RVA: 0x0000B5D5 File Offset: 0x000097D5
		internal static void AutoGeneratedStaticCollectObjectsEquipment(object o, List<object> collectedObjects)
		{
			((Equipment)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000294 RID: 660 RVA: 0x0000B5E3 File Offset: 0x000097E3
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._itemSlots);
		}

		// Token: 0x06000295 RID: 661 RVA: 0x0000B5F1 File Offset: 0x000097F1
		internal static object AutoGeneratedGetMemberValue_equipmentType(object o)
		{
			return ((Equipment)o)._equipmentType;
		}

		// Token: 0x06000296 RID: 662 RVA: 0x0000B603 File Offset: 0x00009803
		internal static object AutoGeneratedGetMemberValue_itemSlots(object o)
		{
			return ((Equipment)o)._itemSlots;
		}

		// Token: 0x170000C6 RID: 198
		// (get) Token: 0x06000297 RID: 663 RVA: 0x0000B610 File Offset: 0x00009810
		public bool IsValid
		{
			get
			{
				return this._equipmentType != Equipment.EquipmentType.Invalid;
			}
		}

		// Token: 0x170000C7 RID: 199
		// (get) Token: 0x06000298 RID: 664 RVA: 0x0000B61E File Offset: 0x0000981E
		public bool IsCivilian
		{
			get
			{
				return this._equipmentType == Equipment.EquipmentType.Civilian;
			}
		}

		// Token: 0x06000299 RID: 665 RVA: 0x0000B629 File Offset: 0x00009829
		public Equipment()
		{
			this._itemSlots = new EquipmentElement[12];
			this._equipmentType = Equipment.EquipmentType.Invalid;
		}

		// Token: 0x0600029A RID: 666 RVA: 0x0000B645 File Offset: 0x00009845
		public Equipment(bool isCivilian) : this()
		{
			this._itemSlots = new EquipmentElement[12];
			this._equipmentType = (isCivilian ? Equipment.EquipmentType.Civilian : Equipment.EquipmentType.Battle);
		}

		// Token: 0x0600029B RID: 667 RVA: 0x0000B668 File Offset: 0x00009868
		public Equipment(Equipment equipment)
		{
			this._itemSlots = new EquipmentElement[12];
			for (int i = 0; i < 12; i++)
			{
				this._itemSlots[i] = new EquipmentElement(equipment[i]);
			}
			this._equipmentType = equipment._equipmentType;
		}

		// Token: 0x170000C8 RID: 200
		public EquipmentElement this[int index]
		{
			get
			{
				return this._itemSlots[index];
			}
			set
			{
				Equipment.IsItemFitsToSlot((EquipmentIndex)index, value.Item);
				this._itemSlots[index] = value;
			}
		}

		// Token: 0x170000C9 RID: 201
		public EquipmentElement this[EquipmentIndex index]
		{
			get
			{
				return this._itemSlots[(int)index];
			}
			set
			{
				this[(int)index] = value;
			}
		}

		// Token: 0x170000CA RID: 202
		// (get) Token: 0x060002A0 RID: 672 RVA: 0x0000B6FC File Offset: 0x000098FC
		public EquipmentElement Horse
		{
			get
			{
				return this._itemSlots[10];
			}
		}

		// Token: 0x060002A1 RID: 673 RVA: 0x0000B70B File Offset: 0x0000990B
		private void SetItem(int index, EquipmentElement element)
		{
			this[index] = element;
		}

		// Token: 0x060002A2 RID: 674 RVA: 0x0000B718 File Offset: 0x00009918
		public Equipment Clone(bool cloneWithoutWeapons = false)
		{
			Equipment equipment = new Equipment(this.IsCivilian);
			for (int i = 0; i < 12; i++)
			{
				bool flag = cloneWithoutWeapons && i >= 0 && i < 5;
				equipment.SetItem(i, flag ? EquipmentElement.Invalid : this[i]);
			}
			return equipment;
		}

		// Token: 0x060002A3 RID: 675 RVA: 0x0000B768 File Offset: 0x00009968
		public void FillFrom(Equipment sourceEquipment, bool useSourceEquipmentType = true)
		{
			if (useSourceEquipmentType)
			{
				this._equipmentType = sourceEquipment._equipmentType;
			}
			for (int i = 0; i < 12; i++)
			{
				this[i] = sourceEquipment[i];
			}
		}

		// Token: 0x060002A4 RID: 676 RVA: 0x0000B7A0 File Offset: 0x000099A0
		public void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			foreach (object obj in node.ChildNodes)
			{
				XmlNode node2 = (XmlNode)obj;
				this.DeserializeNode(objectManager, node2);
			}
		}

		// Token: 0x060002A5 RID: 677 RVA: 0x0000B7FC File Offset: 0x000099FC
		public void DeserializeNode(MBObjectManager objectManager, XmlNode node)
		{
			if (node.NodeType == XmlNodeType.Comment)
			{
				return;
			}
			XmlAttributeCollection attributes = node.Attributes;
			XmlAttribute xmlAttribute = attributes["id"];
			XmlAttribute xmlAttribute2 = attributes["slot"];
			string objectName = xmlAttribute.Value.Contains(".") ? xmlAttribute.Value.Split(new char[]
			{
				'.'
			})[1] : xmlAttribute.Value;
			EquipmentIndex equipmentIndexFromOldEquipmentIndexName = Equipment.GetEquipmentIndexFromOldEquipmentIndexName(xmlAttribute2.Value);
			ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(objectName);
			if (Equipment.IsItemFitsToSlot(equipmentIndexFromOldEquipmentIndexName, @object))
			{
				this[equipmentIndexFromOldEquipmentIndexName] = new EquipmentElement(@object, null, null, false);
				return;
			}
			Debug.FailedAssert(((@object == null) ? TextObject.Empty : @object.Name) + " does not fit to slot " + equipmentIndexFromOldEquipmentIndexName, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\Equipment.cs", "DeserializeNode", 168);
		}

		// Token: 0x060002A6 RID: 678 RVA: 0x0000B8D0 File Offset: 0x00009AD0
		public static EquipmentIndex GetEquipmentIndexFromOldEquipmentIndexName(string oldEquipmentIndexName)
		{
			string value;
			if (!(oldEquipmentIndexName == "Item0"))
			{
				if (!(oldEquipmentIndexName == "Item1"))
				{
					if (!(oldEquipmentIndexName == "Item2"))
					{
						if (!(oldEquipmentIndexName == "Item3"))
						{
							if (!(oldEquipmentIndexName == "Item4"))
							{
								value = oldEquipmentIndexName;
							}
							else
							{
								value = "ExtraWeaponSlot";
							}
						}
						else
						{
							value = "Weapon3";
						}
					}
					else
					{
						value = "Weapon2";
					}
				}
				else
				{
					value = "Weapon1";
				}
			}
			else
			{
				value = "Weapon0";
			}
			return (EquipmentIndex)Enum.Parse(typeof(EquipmentIndex), value);
		}

		// Token: 0x060002A7 RID: 679 RVA: 0x0000B95F File Offset: 0x00009B5F
		public bool IsEmpty()
		{
			return this._itemSlots.All((EquipmentElement itemRosterElement) => itemRosterElement.Item == null);
		}

		// Token: 0x060002A8 RID: 680 RVA: 0x0000B98C File Offset: 0x00009B8C
		public float GetTotalWeightOfArmor(bool forHuman)
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = forHuman ? EquipmentIndex.NumAllWeaponSlots : EquipmentIndex.HorseHarness; equipmentIndex < (forHuman ? EquipmentIndex.ArmorItemEndSlot : EquipmentIndex.NumEquipmentSetSlots); equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					num += equipmentElement.GetEquipmentElementWeight();
				}
			}
			return num;
		}

		// Token: 0x060002A9 RID: 681 RVA: 0x0000B9D8 File Offset: 0x00009BD8
		public float GetTotalWeightOfWeapons()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					num += equipmentElement.GetEquipmentElementWeight();
				}
			}
			return num;
		}

		// Token: 0x060002AA RID: 682 RVA: 0x0000BA14 File Offset: 0x00009C14
		public float GetHeadArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedHeadArmor();
				}
			}
			return num;
		}

		// Token: 0x060002AB RID: 683 RVA: 0x0000BA54 File Offset: 0x00009C54
		public float GetHumanBodyArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedBodyArmor();
				}
			}
			return num;
		}

		// Token: 0x060002AC RID: 684 RVA: 0x0000BA94 File Offset: 0x00009C94
		public float GetLegArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedLegArmor();
				}
			}
			return num;
		}

		// Token: 0x060002AD RID: 685 RVA: 0x0000BAD4 File Offset: 0x00009CD4
		public float GetArmArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedArmArmor();
				}
			}
			return num;
		}

		// Token: 0x060002AE RID: 686 RVA: 0x0000BB14 File Offset: 0x00009D14
		public float GetHorseArmorSum()
		{
			float num = 0f;
			EquipmentIndex index = EquipmentIndex.HorseHarness;
			EquipmentElement equipmentElement = this[index];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedMountBodyArmor();
			}
			return num;
		}

		// Token: 0x170000CB RID: 203
		// (get) Token: 0x060002AF RID: 687 RVA: 0x0000BB48 File Offset: 0x00009D48
		public ArmorComponent.HairCoverTypes HairCoverType
		{
			get
			{
				ArmorComponent.HairCoverTypes result = ArmorComponent.HairCoverTypes.None;
				ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
				if (item != null)
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					result = ((armorComponent != null) ? armorComponent.HairCoverType : ArmorComponent.HairCoverTypes.None);
				}
				else if (this[EquipmentIndex.Body].Item == null)
				{
					result = ArmorComponent.HairCoverTypes.Type4;
				}
				return result;
			}
		}

		// Token: 0x170000CC RID: 204
		// (get) Token: 0x060002B0 RID: 688 RVA: 0x0000BB94 File Offset: 0x00009D94
		public ArmorComponent.BeardCoverTypes BeardCoverType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
				ArmorComponent.BeardCoverTypes? beardCoverTypes;
				if (item == null)
				{
					beardCoverTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					beardCoverTypes = ((armorComponent != null) ? new ArmorComponent.BeardCoverTypes?(armorComponent.BeardCoverType) : null);
				}
				ArmorComponent.BeardCoverTypes? beardCoverTypes2 = beardCoverTypes;
				if (beardCoverTypes2 == null)
				{
					return ArmorComponent.BeardCoverTypes.None;
				}
				return beardCoverTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x170000CD RID: 205
		// (get) Token: 0x060002B1 RID: 689 RVA: 0x0000BBF0 File Offset: 0x00009DF0
		public ArmorComponent.HorseHarnessCoverTypes ManeCoverType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.HorseHarness].Item;
				ArmorComponent.HorseHarnessCoverTypes? horseHarnessCoverTypes;
				if (item == null)
				{
					horseHarnessCoverTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					horseHarnessCoverTypes = ((armorComponent != null) ? new ArmorComponent.HorseHarnessCoverTypes?(armorComponent.ManeCoverType) : null);
				}
				ArmorComponent.HorseHarnessCoverTypes? horseHarnessCoverTypes2 = horseHarnessCoverTypes;
				if (horseHarnessCoverTypes2 == null)
				{
					return ArmorComponent.HorseHarnessCoverTypes.None;
				}
				return horseHarnessCoverTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x170000CE RID: 206
		// (get) Token: 0x060002B2 RID: 690 RVA: 0x0000BC50 File Offset: 0x00009E50
		public string ReinsMeshName
		{
			get
			{
				ItemObject item = this[EquipmentIndex.HorseHarness].Item;
				string text;
				if (item == null)
				{
					text = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					text = ((armorComponent != null) ? armorComponent.ReinsMesh : null);
				}
				return text ?? "";
			}
		}

		// Token: 0x170000CF RID: 207
		// (get) Token: 0x060002B3 RID: 691 RVA: 0x0000BC8E File Offset: 0x00009E8E
		public bool EarsAreHidden
		{
			get
			{
				return this.HairCoverType != ArmorComponent.HairCoverTypes.None && this.HairCoverType != ArmorComponent.HairCoverTypes.Type1 && this.HairCoverType != ArmorComponent.HairCoverTypes.Type4;
			}
		}

		// Token: 0x170000D0 RID: 208
		// (get) Token: 0x060002B4 RID: 692 RVA: 0x0000BCAF File Offset: 0x00009EAF
		public bool MouthIsHidden
		{
			get
			{
				return this.BeardCoverType == ArmorComponent.BeardCoverTypes.All;
			}
		}

		// Token: 0x170000D1 RID: 209
		// (get) Token: 0x060002B5 RID: 693 RVA: 0x0000BCBC File Offset: 0x00009EBC
		public ArmorComponent.BodyMeshTypes BodyMeshType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.Body].Item;
				ArmorComponent.BodyMeshTypes? bodyMeshTypes;
				if (item == null)
				{
					bodyMeshTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					bodyMeshTypes = ((armorComponent != null) ? new ArmorComponent.BodyMeshTypes?(armorComponent.BodyMeshType) : null);
				}
				ArmorComponent.BodyMeshTypes? bodyMeshTypes2 = bodyMeshTypes;
				if (bodyMeshTypes2 == null)
				{
					return ArmorComponent.BodyMeshTypes.Normal;
				}
				return bodyMeshTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x170000D2 RID: 210
		// (get) Token: 0x060002B6 RID: 694 RVA: 0x0000BD18 File Offset: 0x00009F18
		public ArmorComponent.BodyDeformTypes BodyDeformType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.Body].Item;
				ArmorComponent.BodyDeformTypes? bodyDeformTypes;
				if (item == null)
				{
					bodyDeformTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					bodyDeformTypes = ((armorComponent != null) ? new ArmorComponent.BodyDeformTypes?(armorComponent.BodyDeformType) : null);
				}
				ArmorComponent.BodyDeformTypes? bodyDeformTypes2 = bodyDeformTypes;
				if (bodyDeformTypes2 == null)
				{
					return ArmorComponent.BodyDeformTypes.Medium;
				}
				return bodyDeformTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x060002B7 RID: 695 RVA: 0x0000BD74 File Offset: 0x00009F74
		public Equipment.UnderwearTypes GetUnderwearType(bool isFemale)
		{
			ItemObject item = this[EquipmentIndex.Body].Item;
			Equipment.UnderwearTypes result;
			if (item == null)
			{
				result = Equipment.UnderwearTypes.FullUnderwear;
			}
			else if (isFemale && item.DoesNotHideChest)
			{
				result = Equipment.UnderwearTypes.OnlyTop;
			}
			else
			{
				result = Equipment.UnderwearTypes.NoUnderwear;
			}
			return result;
		}

		// Token: 0x060002B8 RID: 696 RVA: 0x0000BDAC File Offset: 0x00009FAC
		public bool HasWeapon()
		{
			for (int i = 0; i < 5; i++)
			{
				EquipmentElement equipmentElement = this._itemSlots[i];
				if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060002B9 RID: 697 RVA: 0x0000BDF8 File Offset: 0x00009FF8
		public bool HasWeaponOfClass(WeaponClass weaponClass)
		{
			for (int i = 0; i < 5; i++)
			{
				EquipmentElement equipmentElement = this._itemSlots[i];
				if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponClass == weaponClass)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060002BA RID: 698 RVA: 0x0000BE40 File Offset: 0x0000A040
		public static Equipment CreateFromEquipmentCode(string equipmentCode)
		{
			Equipment equipment = new Equipment();
			for (int i = 0; i < 12; i++)
			{
				equipment[i] = default(EquipmentElement);
			}
			string[] array = equipmentCode.Split(new char[]
			{
				'+'
			}, StringSplitOptions.RemoveEmptyEntries);
			for (int j = 0; j < array.Length; j++)
			{
				string[] array2 = array[j].Split(new char[]
				{
					'-'
				}, StringSplitOptions.RemoveEmptyEntries);
				int index = Convert.ToInt32(array2[0]);
				string text = array2[1];
				if (text != "@null")
				{
					ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(text);
					string text2 = array2[2];
					ItemModifier itemModifier = null;
					if (text2 != "@null")
					{
						itemModifier = MBObjectManager.Instance.GetObject<ItemModifier>(text2);
					}
					EquipmentElement value = new EquipmentElement(@object, itemModifier, null, false);
					equipment[index] = value;
				}
			}
			return equipment;
		}

		// Token: 0x060002BB RID: 699 RVA: 0x0000BF1C File Offset: 0x0000A11C
		public string CalculateEquipmentCode()
		{
			MBStringBuilder mbstringBuilder = default(MBStringBuilder);
			mbstringBuilder.Initialize(16, "CalculateEquipmentCode");
			for (int i = 0; i < 12; i++)
			{
				EquipmentElement equipmentElement = this[i];
				string value = (equipmentElement.Item != null) ? equipmentElement.Item.StringId : "@null";
				string value2 = (equipmentElement.ItemModifier != null) ? equipmentElement.ItemModifier.StringId : "@null";
				if (string.IsNullOrEmpty(value))
				{
					value = "@null";
				}
				if (string.IsNullOrEmpty(value2))
				{
					value2 = "@null";
				}
				mbstringBuilder.Append('+');
				mbstringBuilder.Append(i);
				mbstringBuilder.Append('-');
				mbstringBuilder.Append<string>(value);
				mbstringBuilder.Append('-');
				mbstringBuilder.Append<string>(value2);
			}
			return mbstringBuilder.ToStringAndRelease();
		}

		// Token: 0x060002BC RID: 700 RVA: 0x0000BFF4 File Offset: 0x0000A1F4
		public void AddEquipmentToSlotWithoutAgent(EquipmentIndex equipmentIndex, EquipmentElement itemRosterElement)
		{
			this[equipmentIndex] = itemRosterElement;
		}

		// Token: 0x060002BD RID: 701 RVA: 0x0000BFFE File Offset: 0x0000A1FE
		public EquipmentElement GetEquipmentFromSlot(EquipmentIndex equipmentIndex)
		{
			return this[equipmentIndex];
		}

		// Token: 0x060002BE RID: 702 RVA: 0x0000C008 File Offset: 0x0000A208
		public static bool IsItemFitsToSlot(EquipmentIndex slotIndex, ItemObject item)
		{
			bool result = false;
			if (item == null)
			{
				result = true;
			}
			else
			{
				switch (item.ItemType)
				{
				case ItemObject.ItemTypeEnum.Invalid:
					result = false;
					break;
				case ItemObject.ItemTypeEnum.Horse:
					result = (slotIndex == EquipmentIndex.ArmorItemEndSlot);
					break;
				case ItemObject.ItemTypeEnum.OneHandedWeapon:
				case ItemObject.ItemTypeEnum.TwoHandedWeapon:
				case ItemObject.ItemTypeEnum.Polearm:
				case ItemObject.ItemTypeEnum.Arrows:
				case ItemObject.ItemTypeEnum.Bolts:
				case ItemObject.ItemTypeEnum.Shield:
				case ItemObject.ItemTypeEnum.Bow:
				case ItemObject.ItemTypeEnum.Crossbow:
				case ItemObject.ItemTypeEnum.Thrown:
				case ItemObject.ItemTypeEnum.Pistol:
				case ItemObject.ItemTypeEnum.Musket:
				case ItemObject.ItemTypeEnum.Bullets:
				case ItemObject.ItemTypeEnum.Banner:
					if (item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
					{
						result = (slotIndex == EquipmentIndex.ExtraWeaponSlot);
					}
					else
					{
						result = (slotIndex == EquipmentIndex.WeaponItemBeginSlot || slotIndex == EquipmentIndex.Weapon1 || slotIndex == EquipmentIndex.Weapon2 || slotIndex == EquipmentIndex.Weapon3);
					}
					break;
				case ItemObject.ItemTypeEnum.HeadArmor:
					result = (slotIndex == EquipmentIndex.NumAllWeaponSlots);
					break;
				case ItemObject.ItemTypeEnum.BodyArmor:
					result = (slotIndex == EquipmentIndex.Body);
					break;
				case ItemObject.ItemTypeEnum.LegArmor:
					result = (slotIndex == EquipmentIndex.Leg);
					break;
				case ItemObject.ItemTypeEnum.HandArmor:
					result = (slotIndex == EquipmentIndex.Gloves);
					break;
				case ItemObject.ItemTypeEnum.Animal:
					result = (slotIndex == EquipmentIndex.ArmorItemEndSlot);
					break;
				case ItemObject.ItemTypeEnum.Book:
					result = false;
					break;
				case ItemObject.ItemTypeEnum.Cape:
					result = (slotIndex == EquipmentIndex.Cape);
					break;
				case ItemObject.ItemTypeEnum.HorseHarness:
					result = (slotIndex == EquipmentIndex.HorseHarness);
					break;
				}
			}
			return result;
		}

		// Token: 0x060002BF RID: 703 RVA: 0x0000C108 File Offset: 0x0000A308
		public EquipmentIndex GetWeaponPickUpSlotIndex(EquipmentElement itemRosterElement, bool isStuckMissile)
		{
			if (itemRosterElement.Item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
			{
				return EquipmentIndex.ExtraWeaponSlot;
			}
			EquipmentIndex equipmentIndex = EquipmentIndex.None;
			if (equipmentIndex == EquipmentIndex.None)
			{
				for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.ExtraWeaponSlot; equipmentIndex2++)
				{
					if (this[(int)equipmentIndex2].Item == null)
					{
						equipmentIndex = equipmentIndex2;
						break;
					}
				}
			}
			return equipmentIndex;
		}

		// Token: 0x060002C0 RID: 704 RVA: 0x0000C158 File Offset: 0x0000A358
		public bool IsEquipmentEqualTo(Equipment other)
		{
			if (other == null)
			{
				return false;
			}
			for (int i = 0; i < 12; i++)
			{
				if (!this[i].IsEqualTo(other[i]))
				{
					return false;
				}
			}
			return this.IsCivilian == other.IsCivilian;
		}

		// Token: 0x060002C1 RID: 705 RVA: 0x0000C1A0 File Offset: 0x0000A3A0
		public static Equipment GetRandomEquipmentElements(BasicCharacterObject character, bool randomEquipmentModifier, bool isCivilianEquipment = false, int seed = -1)
		{
			Equipment equipment = new Equipment(isCivilianEquipment);
			List<Equipment> list = (from eq in character.AllEquipments
			where eq.IsCivilian == isCivilianEquipment && !eq.IsEmpty()
			select eq).ToList<Equipment>();
			if (list.IsEmpty<Equipment>())
			{
				return equipment;
			}
			int count = list.Count;
			Random random = new Random(seed);
			int weaponSetNo = MBRandom.RandomInt(count);
			int weaponSetNo2 = MBRandom.RandomInt(count);
			int weaponSetNo3 = MBRandom.RandomInt(count);
			for (int i = 0; i < 12; i++)
			{
				if (seed != -1)
				{
					weaponSetNo = random.Next() % count;
					weaponSetNo2 = random.Next() % count;
					weaponSetNo3 = random.Next() % count;
				}
				if (i > 1)
				{
					if (i - 2 > 1)
					{
						equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, weaponSetNo3, randomEquipmentModifier);
					}
					else
					{
						equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, weaponSetNo2, randomEquipmentModifier);
					}
				}
				else
				{
					equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, weaponSetNo, randomEquipmentModifier);
				}
			}
			return equipment;
		}

		// Token: 0x060002C2 RID: 706 RVA: 0x0000C298 File Offset: 0x0000A498
		public static void SwapWeapons(Equipment equipment, EquipmentIndex index1, EquipmentIndex index2)
		{
			EquipmentElement value = equipment[index1];
			equipment[index1] = equipment[index2];
			equipment[index2] = value;
		}

		// Token: 0x060002C3 RID: 707 RVA: 0x0000C2C4 File Offset: 0x0000A4C4
		private static EquipmentElement GetRandomizedEquipment(List<Equipment> equipmentSets, EquipmentIndex weaponSlot, int weaponSetNo, bool randomEquipmentModifier)
		{
			EquipmentElement equipmentFromSlot = equipmentSets[weaponSetNo].GetEquipmentFromSlot(weaponSlot);
			if (randomEquipmentModifier)
			{
				ItemObject item = equipmentFromSlot.Item;
				ItemModifier itemModifier;
				if (item == null)
				{
					itemModifier = null;
				}
				else
				{
					ItemComponent itemComponent = item.ItemComponent;
					if (itemComponent == null)
					{
						itemModifier = null;
					}
					else
					{
						ItemModifierGroup itemModifierGroup = itemComponent.ItemModifierGroup;
						itemModifier = ((itemModifierGroup != null) ? itemModifierGroup.GetRandomItemModifierLootScoreBased() : null);
					}
				}
				ItemModifier itemModifier2 = itemModifier;
				if (itemModifier2 != null)
				{
					equipmentFromSlot.SetModifier(itemModifier2);
				}
			}
			return equipmentFromSlot;
		}

		// Token: 0x060002C4 RID: 708 RVA: 0x0000C31C File Offset: 0x0000A51C
		public void GetInitialWeaponIndicesToEquip(out EquipmentIndex mainHandWeaponIndex, out EquipmentIndex offHandWeaponIndex, out bool isMainHandNotUsableWithOneHand, Equipment.InitialWeaponEquipPreference initialWeaponEquipPreference = Equipment.InitialWeaponEquipPreference.Any)
		{
			mainHandWeaponIndex = EquipmentIndex.None;
			offHandWeaponIndex = EquipmentIndex.None;
			isMainHandNotUsableWithOneHand = false;
			EquipmentIndex[] array = new EquipmentIndex[]
			{
				EquipmentIndex.ExtraWeaponSlot,
				EquipmentIndex.WeaponItemBeginSlot,
				EquipmentIndex.Weapon1,
				EquipmentIndex.Weapon2,
				EquipmentIndex.Weapon3
			};
			bool flag = false;
			bool flag2 = false;
			foreach (EquipmentIndex equipmentIndex in array)
			{
				if (!this[equipmentIndex].IsEmpty)
				{
					ItemObject item = this[equipmentIndex].Item;
					if ((mainHandWeaponIndex == EquipmentIndex.None || (initialWeaponEquipPreference == Equipment.InitialWeaponEquipPreference.MeleeForMainHand && !flag) || (initialWeaponEquipPreference == Equipment.InitialWeaponEquipPreference.RangedForMainHand && !flag2)) && !item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
					{
						mainHandWeaponIndex = equipmentIndex;
						isMainHandNotUsableWithOneHand = item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand);
						flag = item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.MeleeWeapon);
						flag2 = item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.RangedWeapon);
					}
					else if (offHandWeaponIndex == EquipmentIndex.None && item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
					{
						offHandWeaponIndex = equipmentIndex;
					}
				}
			}
		}

		// Token: 0x040001B0 RID: 432
		[SaveableField(1)]
		private Equipment.EquipmentType _equipmentType;

		// Token: 0x040001B1 RID: 433
		public const int EquipmentSlotLength = 12;

		// Token: 0x040001B2 RID: 434
		[SaveableField(2)]
		private readonly EquipmentElement[] _itemSlots;

		// Token: 0x040001B3 RID: 435
		public bool SyncEquipments;

		// Token: 0x040001B4 RID: 436
		public const string NullCode = "@null";

		// Token: 0x020000DE RID: 222
		public enum EquipmentType
		{
			// Token: 0x0400064A RID: 1610
			Invalid = -1,
			// Token: 0x0400064B RID: 1611
			Battle,
			// Token: 0x0400064C RID: 1612
			Civilian
		}

		// Token: 0x020000DF RID: 223
		public enum UnderwearTypes
		{
			// Token: 0x0400064E RID: 1614
			NoUnderwear,
			// Token: 0x0400064F RID: 1615
			FullUnderwear,
			// Token: 0x04000650 RID: 1616
			OnlyTop
		}

		// Token: 0x020000E0 RID: 224
		public enum InitialWeaponEquipPreference
		{
			// Token: 0x04000652 RID: 1618
			Any,
			// Token: 0x04000653 RID: 1619
			MeleeForMainHand,
			// Token: 0x04000654 RID: 1620
			RangedForMainHand
		}
	}
}
