using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200003D RID: 61
	public struct ItemRosterElement : ISerializableObject, ISavedStruct
	{
		// Token: 0x060004C8 RID: 1224 RVA: 0x00011640 File Offset: 0x0000F840
		public static void AutoGeneratedStaticCollectObjectsItemRosterElement(object o, List<object> collectedObjects)
		{
			((ItemRosterElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060004C9 RID: 1225 RVA: 0x0001165C File Offset: 0x0000F85C
		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			EquipmentElement.AutoGeneratedStaticCollectObjectsEquipmentElement(this.EquipmentElement, collectedObjects);
		}

		// Token: 0x060004CA RID: 1226 RVA: 0x00011670 File Offset: 0x0000F870
		internal static object AutoGeneratedGetMemberValueEquipmentElement(object o)
		{
			return ((ItemRosterElement)o).EquipmentElement;
		}

		// Token: 0x060004CB RID: 1227 RVA: 0x00011690 File Offset: 0x0000F890
		internal static object AutoGeneratedGetMemberValue_amount(object o)
		{
			return ((ItemRosterElement)o)._amount;
		}

		// Token: 0x170001A5 RID: 421
		// (get) Token: 0x060004CC RID: 1228 RVA: 0x000116A2 File Offset: 0x0000F8A2
		public static ItemRosterElement Invalid
		{
			get
			{
				return ItemRosterElement.StaticInvalidElement;
			}
		}

		// Token: 0x170001A6 RID: 422
		// (get) Token: 0x060004CD RID: 1229 RVA: 0x000116A9 File Offset: 0x0000F8A9
		// (set) Token: 0x060004CE RID: 1230 RVA: 0x000116B1 File Offset: 0x0000F8B1
		[SaveableProperty(21)]
		public EquipmentElement EquipmentElement { get; private set; }

		// Token: 0x170001A7 RID: 423
		// (get) Token: 0x060004CF RID: 1231 RVA: 0x000116BA File Offset: 0x0000F8BA
		// (set) Token: 0x060004D0 RID: 1232 RVA: 0x000116C2 File Offset: 0x0000F8C2
		public int Amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if (value < 0)
				{
					throw new MBUnderFlowException("ItemRosterElement::Amount");
				}
				this._amount = value;
			}
		}

		// Token: 0x170001A8 RID: 424
		// (get) Token: 0x060004D1 RID: 1233 RVA: 0x000116DC File Offset: 0x0000F8DC
		public bool IsEmpty
		{
			get
			{
				return this.EquipmentElement.Item == null;
			}
		}

		// Token: 0x060004D2 RID: 1234 RVA: 0x000116FA File Offset: 0x0000F8FA
		public ItemRosterElement(ItemObject item, int amount = 0, ItemModifier itemModifier = null)
		{
			this = default(ItemRosterElement);
			this.EquipmentElement = new EquipmentElement(item, itemModifier, null, false);
			this._amount = amount;
		}

		// Token: 0x060004D3 RID: 1235 RVA: 0x00011719 File Offset: 0x0000F919
		public ItemRosterElement(EquipmentElement equipmentElement, int amount)
		{
			this.EquipmentElement = equipmentElement;
			this._amount = amount;
		}

		// Token: 0x060004D4 RID: 1236 RVA: 0x0001172C File Offset: 0x0000F92C
		public override int GetHashCode()
		{
			return this.EquipmentElement.GetHashCode();
		}

		// Token: 0x060004D5 RID: 1237 RVA: 0x00011750 File Offset: 0x0000F950
		public override string ToString()
		{
			return this.EquipmentElement.Item.ToString() + " x" + this.Amount.ToString();
		}

		// Token: 0x060004D6 RID: 1238 RVA: 0x00011788 File Offset: 0x0000F988
		public ItemRosterElement(ItemRosterElement itemRosterElement)
		{
			this = new ItemRosterElement(itemRosterElement.EquipmentElement.Item, itemRosterElement.Amount, itemRosterElement.EquipmentElement.ItemModifier);
		}

		// Token: 0x060004D7 RID: 1239 RVA: 0x000117C0 File Offset: 0x0000F9C0
		public void Clear()
		{
			this.EquipmentElement.Clear();
			this.Amount = 0;
		}

		// Token: 0x060004D8 RID: 1240 RVA: 0x000117E4 File Offset: 0x0000F9E4
		public bool IsEqualTo(ItemRosterElement other)
		{
			return this.Amount == other.Amount && this.EquipmentElement.IsEqualTo(other.EquipmentElement);
		}

		// Token: 0x060004D9 RID: 1241 RVA: 0x00011818 File Offset: 0x0000FA18
		public override bool Equals(object obj)
		{
			if (obj is ItemRosterElement)
			{
				ItemRosterElement other = (ItemRosterElement)obj;
				return this.IsEqualTo(other);
			}
			return false;
		}

		// Token: 0x060004DA RID: 1242 RVA: 0x00011844 File Offset: 0x0000FA44
		public float GetRosterElementWeight()
		{
			return this.EquipmentElement.GetEquipmentElementWeight() * (float)this.Amount;
		}

		// Token: 0x060004DB RID: 1243 RVA: 0x00011868 File Offset: 0x0000FA68
		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			this.Amount = reader.ReadInt();
			string text = reader.ReadString();
			ItemModifier itemModifier = null;
			if (text != "")
			{
				itemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(text);
			}
			MBGUID objectId = new MBGUID(reader.ReadUInt());
			ItemObject item = MBObjectManager.Instance.GetObject(objectId) as ItemObject;
			this.EquipmentElement = new EquipmentElement(item, itemModifier, null, false);
		}

		// Token: 0x060004DC RID: 1244 RVA: 0x000118D8 File Offset: 0x0000FAD8
		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteInt(this.Amount);
			writer.WriteString((this.EquipmentElement.ItemModifier != null) ? this.EquipmentElement.ItemModifier.StringId : "");
			ItemObject item = this.EquipmentElement.Item;
			writer.WriteUInt((item != null) ? item.Id.InternalValue : 0U);
		}

		// Token: 0x060004DD RID: 1245 RVA: 0x0001194C File Offset: 0x0000FB4C
		bool ISavedStruct.IsDefault()
		{
			return this.EquipmentElement.Item == null && this.EquipmentElement.ItemModifier == null && this.Amount == 0;
		}

		// Token: 0x0400024F RID: 591
		private static readonly ItemRosterElement StaticInvalidElement = new ItemRosterElement(null, 0, null);

		// Token: 0x04000250 RID: 592
		[SaveableField(11)]
		private int _amount;
	}
}
