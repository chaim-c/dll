using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000030 RID: 48
	public class ItemModifierGroup : MBObjectBase
	{
		// Token: 0x06000354 RID: 852 RVA: 0x0000D2A4 File Offset: 0x0000B4A4
		internal static void AutoGeneratedStaticCollectObjectsItemModifierGroup(object o, List<object> collectedObjects)
		{
			((ItemModifierGroup)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000355 RID: 853 RVA: 0x0000D2B2 File Offset: 0x0000B4B2
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x1700010B RID: 267
		// (get) Token: 0x06000356 RID: 854 RVA: 0x0000D2BB File Offset: 0x0000B4BB
		// (set) Token: 0x06000357 RID: 855 RVA: 0x0000D2C3 File Offset: 0x0000B4C3
		public int NoModifierLootScore { get; private set; }

		// Token: 0x1700010C RID: 268
		// (get) Token: 0x06000358 RID: 856 RVA: 0x0000D2CC File Offset: 0x0000B4CC
		// (set) Token: 0x06000359 RID: 857 RVA: 0x0000D2D4 File Offset: 0x0000B4D4
		public int NoModifierProductionScore { get; private set; }

		// Token: 0x1700010D RID: 269
		// (get) Token: 0x0600035A RID: 858 RVA: 0x0000D2DD File Offset: 0x0000B4DD
		public MBReadOnlyList<ItemModifier> ItemModifiers
		{
			get
			{
				return this._itemModifiers;
			}
		}

		// Token: 0x0600035B RID: 859 RVA: 0x0000D2E5 File Offset: 0x0000B4E5
		public ItemModifierGroup() : base("")
		{
		}

		// Token: 0x0600035C RID: 860 RVA: 0x0000D313 File Offset: 0x0000B513
		public ItemModifierGroup(string id) : base(id)
		{
		}

		// Token: 0x0600035D RID: 861 RVA: 0x0000D33D File Offset: 0x0000B53D
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.NoModifierLootScore = XmlHelper.ReadInt(node, "no_modifier_loot_score");
			this.NoModifierProductionScore = XmlHelper.ReadInt(node, "no_modifier_production_score");
			this.InitializeDropScoreLists();
		}

		// Token: 0x0600035E RID: 862 RVA: 0x0000D36F File Offset: 0x0000B56F
		public void AddItemModifier(ItemModifier itemModifier)
		{
			this._itemModifiers.Add(itemModifier);
		}

		// Token: 0x0600035F RID: 863 RVA: 0x0000D37D File Offset: 0x0000B57D
		public ItemModifier GetRandomItemModifierLootScoreBased()
		{
			return this.GetRandomItemModifier(true);
		}

		// Token: 0x06000360 RID: 864 RVA: 0x0000D386 File Offset: 0x0000B586
		public ItemModifier GetRandomItemModifierProductionScoreBased()
		{
			return this.GetRandomItemModifier(false);
		}

		// Token: 0x06000361 RID: 865 RVA: 0x0000D38F File Offset: 0x0000B58F
		private ItemModifier GetRandomItemModifier(bool useLootScores)
		{
			return MBRandom.ChooseWeighted<ItemModifier>(useLootScores ? this._lootDropItemModifierScores : this._productionDropItemModifierScores);
		}

		// Token: 0x06000362 RID: 866 RVA: 0x0000D3A8 File Offset: 0x0000B5A8
		public List<ItemModifier> GetModifiersBasedOnQuality(ItemQuality quality)
		{
			return (from modifier in this.ItemModifiers
			where modifier.ItemQuality == quality
			select modifier).ToList<ItemModifier>();
		}

		// Token: 0x06000363 RID: 867 RVA: 0x0000D3E0 File Offset: 0x0000B5E0
		private void InitializeDropScoreLists()
		{
			foreach (ItemModifier itemModifier in this._itemModifiers)
			{
				this._lootDropItemModifierScores.Add(new ValueTuple<ItemModifier, float>(itemModifier, itemModifier.LootDropScore));
				this._productionDropItemModifierScores.Add(new ValueTuple<ItemModifier, float>(itemModifier, itemModifier.ProductionDropScore));
			}
			this._lootDropItemModifierScores.Add(new ValueTuple<ItemModifier, float>(null, (float)this.NoModifierLootScore));
			this._productionDropItemModifierScores.Add(new ValueTuple<ItemModifier, float>(null, (float)this.NoModifierProductionScore));
		}

		// Token: 0x040001DF RID: 479
		private readonly MBList<ItemModifier> _itemModifiers = new MBList<ItemModifier>();

		// Token: 0x040001E0 RID: 480
		private readonly MBList<ValueTuple<ItemModifier, float>> _lootDropItemModifierScores = new MBList<ValueTuple<ItemModifier, float>>();

		// Token: 0x040001E1 RID: 481
		private readonly MBList<ValueTuple<ItemModifier, float>> _productionDropItemModifierScores = new MBList<ValueTuple<ItemModifier, float>>();
	}
}
