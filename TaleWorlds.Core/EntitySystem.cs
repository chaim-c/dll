using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using TaleWorlds.Library;

namespace TaleWorlds.Core
{
	// Token: 0x02000028 RID: 40
	public class EntitySystem<T> where T : class, IEntityComponent
	{
		// Token: 0x06000288 RID: 648 RVA: 0x0000B319 File Offset: 0x00009519
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x170000C5 RID: 197
		// (get) Token: 0x06000289 RID: 649 RVA: 0x0000B31B File Offset: 0x0000951B
		public MBReadOnlyList<T> Components
		{
			get
			{
				return this._components;
			}
		}

		// Token: 0x0600028A RID: 650 RVA: 0x0000B323 File Offset: 0x00009523
		public EntitySystem()
		{
			this._components = new MBList<T>();
			this._componentsOfTypes = new Dictionary<Type, IList>();
		}

		// Token: 0x0600028B RID: 651 RVA: 0x0000B341 File Offset: 0x00009541
		public TComponent AddComponent<TComponent>() where TComponent : class, T, new()
		{
			return this.AddComponent(typeof(TComponent)) as TComponent;
		}

		// Token: 0x0600028C RID: 652 RVA: 0x0000B364 File Offset: 0x00009564
		public T AddComponent(Type componentType)
		{
			T t = componentType.GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[0], null).Invoke(new object[0]) as T;
			this._components.Add(t);
			Type type = t.GetType();
			while (type != null && type != typeof(object))
			{
				if (!this._componentsOfTypes.ContainsKey(type))
				{
					IList value = Activator.CreateInstance(typeof(List<>).MakeGenericType(new Type[]
					{
						type
					})) as IList;
					this._componentsOfTypes.Add(type, value);
				}
				this._componentsOfTypes[type].Add(t);
				type = type.BaseType;
			}
			t.OnInitialize();
			return t;
		}

		// Token: 0x0600028D RID: 653 RVA: 0x0000B43C File Offset: 0x0000963C
		public TComponent GetComponent<TComponent>() where TComponent : class, T
		{
			if (this._componentsOfTypes.ContainsKey(typeof(TComponent)))
			{
				IList list = this._componentsOfTypes[typeof(TComponent)];
				if (list.Count > 0)
				{
					return list[0] as TComponent;
				}
			}
			return default(TComponent);
		}

		// Token: 0x0600028E RID: 654 RVA: 0x0000B49C File Offset: 0x0000969C
		public T GetComponent(Type componentType)
		{
			if (this._componentsOfTypes.ContainsKey(componentType))
			{
				IList list = this._componentsOfTypes[componentType];
				if (list.Count > 0)
				{
					return list[0] as T;
				}
			}
			return default(T);
		}

		// Token: 0x0600028F RID: 655 RVA: 0x0000B4E8 File Offset: 0x000096E8
		public List<TComponent> GetComponents<TComponent>() where TComponent : class, T
		{
			if (this._componentsOfTypes.ContainsKey(typeof(TComponent)))
			{
				IList list = this._componentsOfTypes[typeof(TComponent)];
				if (list.Count > 0)
				{
					return list as List<TComponent>;
				}
			}
			return null;
		}

		// Token: 0x06000290 RID: 656 RVA: 0x0000B533 File Offset: 0x00009733
		public MBList<T> GetComponents()
		{
			return this._components;
		}

		// Token: 0x06000291 RID: 657 RVA: 0x0000B53C File Offset: 0x0000973C
		public void RemoveComponent(T component)
		{
			component.OnFinalize();
			this._components.Remove(component);
			Type type = component.GetType();
			while (type != null && type != typeof(object))
			{
				this._componentsOfTypes[type].Remove(component);
				type = type.BaseType;
			}
		}

		// Token: 0x06000292 RID: 658 RVA: 0x0000B5A8 File Offset: 0x000097A8
		public void RemoveComponent<TComponent>() where TComponent : class, T
		{
			TComponent component = this.GetComponent<TComponent>();
			if (component != null)
			{
				this.RemoveComponent((T)((object)component));
			}
		}

		// Token: 0x040001AE RID: 430
		private readonly MBList<T> _components;

		// Token: 0x040001AF RID: 431
		private readonly Dictionary<Type, IList> _componentsOfTypes;
	}
}
