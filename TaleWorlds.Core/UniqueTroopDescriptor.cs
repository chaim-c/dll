using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200003E RID: 62
	public struct UniqueTroopDescriptor : IComparable<UniqueTroopDescriptor>, IEquatable<UniqueTroopDescriptor>, ISavedStruct
	{
		// Token: 0x060004DF RID: 1247 RVA: 0x00011994 File Offset: 0x0000FB94
		public static void AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(object o, List<object> collectedObjects)
		{
			((UniqueTroopDescriptor)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060004E0 RID: 1248 RVA: 0x000119B0 File Offset: 0x0000FBB0
		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x060004E1 RID: 1249 RVA: 0x000119B4 File Offset: 0x0000FBB4
		internal static object AutoGeneratedGetMemberValueUniqueSeed(object o)
		{
			return ((UniqueTroopDescriptor)o).UniqueSeed;
		}

		// Token: 0x060004E2 RID: 1250 RVA: 0x000119D4 File Offset: 0x0000FBD4
		public UniqueTroopDescriptor(int uniqueSeed)
		{
			this = default(UniqueTroopDescriptor);
			this.UniqueSeed = uniqueSeed;
		}

		// Token: 0x170001A9 RID: 425
		// (get) Token: 0x060004E3 RID: 1251 RVA: 0x000119E4 File Offset: 0x0000FBE4
		// (set) Token: 0x060004E4 RID: 1252 RVA: 0x000119EC File Offset: 0x0000FBEC
		[SaveableProperty(1)]
		public int UniqueSeed { get; private set; }

		// Token: 0x170001AA RID: 426
		// (get) Token: 0x060004E5 RID: 1253 RVA: 0x000119F5 File Offset: 0x0000FBF5
		public static UniqueTroopDescriptor Invalid
		{
			get
			{
				return UniqueTroopDescriptor.InvalidDescriptor;
			}
		}

		// Token: 0x170001AB RID: 427
		// (get) Token: 0x060004E6 RID: 1254 RVA: 0x000119FC File Offset: 0x0000FBFC
		public bool IsValid
		{
			get
			{
				return this.UniqueSeed > 0;
			}
		}

		// Token: 0x060004E7 RID: 1255 RVA: 0x00011A08 File Offset: 0x0000FC08
		public int CompareTo(UniqueTroopDescriptor other)
		{
			return this.UniqueSeed.CompareTo(other.UniqueSeed);
		}

		// Token: 0x060004E8 RID: 1256 RVA: 0x00011A2C File Offset: 0x0000FC2C
		public int CompareTo(int uniqueSeed)
		{
			return this.UniqueSeed.CompareTo(uniqueSeed);
		}

		// Token: 0x060004E9 RID: 1257 RVA: 0x00011A48 File Offset: 0x0000FC48
		public override string ToString()
		{
			return this.UniqueSeed.ToString();
		}

		// Token: 0x060004EA RID: 1258 RVA: 0x00011A64 File Offset: 0x0000FC64
		public override bool Equals(object obj)
		{
			return obj is UniqueTroopDescriptor && ((UniqueTroopDescriptor)obj).UniqueSeed == this.UniqueSeed;
		}

		// Token: 0x060004EB RID: 1259 RVA: 0x00011A91 File Offset: 0x0000FC91
		public bool Equals(UniqueTroopDescriptor other)
		{
			return other.UniqueSeed == this.UniqueSeed;
		}

		// Token: 0x060004EC RID: 1260 RVA: 0x00011AA2 File Offset: 0x0000FCA2
		public override int GetHashCode()
		{
			return this.UniqueSeed;
		}

		// Token: 0x060004ED RID: 1261 RVA: 0x00011AAA File Offset: 0x0000FCAA
		bool ISavedStruct.IsDefault()
		{
			return this.UniqueSeed == 0;
		}

		// Token: 0x060004EE RID: 1262 RVA: 0x00011AB5 File Offset: 0x0000FCB5
		public static bool operator ==(UniqueTroopDescriptor a, UniqueTroopDescriptor b)
		{
			return a.UniqueSeed == b.UniqueSeed;
		}

		// Token: 0x060004EF RID: 1263 RVA: 0x00011AC7 File Offset: 0x0000FCC7
		public static bool operator !=(UniqueTroopDescriptor a, UniqueTroopDescriptor b)
		{
			return !(a == b);
		}

		// Token: 0x04000253 RID: 595
		private static readonly UniqueTroopDescriptor InvalidDescriptor;
	}
}
