using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000038 RID: 56
	public class WeaponDesignElement
	{
		// Token: 0x06000432 RID: 1074 RVA: 0x0000FD34 File Offset: 0x0000DF34
		internal static void AutoGeneratedStaticCollectObjectsWeaponDesignElement(object o, List<object> collectedObjects)
		{
			((WeaponDesignElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000433 RID: 1075 RVA: 0x0000FD42 File Offset: 0x0000DF42
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._craftingPiece);
		}

		// Token: 0x06000434 RID: 1076 RVA: 0x0000FD50 File Offset: 0x0000DF50
		internal static object AutoGeneratedGetMemberValue_craftingPiece(object o)
		{
			return ((WeaponDesignElement)o)._craftingPiece;
		}

		// Token: 0x06000435 RID: 1077 RVA: 0x0000FD5D File Offset: 0x0000DF5D
		internal static object AutoGeneratedGetMemberValue_scalePercentage(object o)
		{
			return ((WeaponDesignElement)o)._scalePercentage;
		}

		// Token: 0x17000165 RID: 357
		// (get) Token: 0x06000436 RID: 1078 RVA: 0x0000FD6F File Offset: 0x0000DF6F
		public int ScalePercentage
		{
			get
			{
				return this._scalePercentage;
			}
		}

		// Token: 0x17000166 RID: 358
		// (get) Token: 0x06000437 RID: 1079 RVA: 0x0000FD77 File Offset: 0x0000DF77
		public float ScaleFactor
		{
			get
			{
				return (float)this._scalePercentage * 0.01f;
			}
		}

		// Token: 0x17000167 RID: 359
		// (get) Token: 0x06000438 RID: 1080 RVA: 0x0000FD86 File Offset: 0x0000DF86
		public bool IsPieceScaled
		{
			get
			{
				return this._scalePercentage != 100;
			}
		}

		// Token: 0x17000168 RID: 360
		// (get) Token: 0x06000439 RID: 1081 RVA: 0x0000FD95 File Offset: 0x0000DF95
		public CraftingPiece CraftingPiece
		{
			get
			{
				return this._craftingPiece;
			}
		}

		// Token: 0x17000169 RID: 361
		// (get) Token: 0x0600043A RID: 1082 RVA: 0x0000FD9D File Offset: 0x0000DF9D
		public bool IsValid
		{
			get
			{
				return this.CraftingPiece.IsValid;
			}
		}

		// Token: 0x1700016A RID: 362
		// (get) Token: 0x0600043B RID: 1083 RVA: 0x0000FDAA File Offset: 0x0000DFAA
		public float ScaledLength
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.Length;
				}
				return this.CraftingPiece.Length * this.ScaleFactor;
			}
		}

		// Token: 0x1700016B RID: 363
		// (get) Token: 0x0600043C RID: 1084 RVA: 0x0000FDD4 File Offset: 0x0000DFD4
		public float ScaledWeight
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.Weight;
				}
				float num = this._craftingPiece.FullScale ? (this.ScaleFactor * this.ScaleFactor * this.ScaleFactor) : this.ScaleFactor;
				return this.CraftingPiece.Weight * num;
			}
		}

		// Token: 0x1700016C RID: 364
		// (get) Token: 0x0600043D RID: 1085 RVA: 0x0000FE2C File Offset: 0x0000E02C
		public float ScaledCenterOfMass
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.CenterOfMass;
				}
				return this.CraftingPiece.CenterOfMass * this.ScaleFactor;
			}
		}

		// Token: 0x1700016D RID: 365
		// (get) Token: 0x0600043E RID: 1086 RVA: 0x0000FE54 File Offset: 0x0000E054
		public float ScaledDistanceToNextPiece
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.DistanceToNextPiece;
				}
				return this.CraftingPiece.DistanceToNextPiece * this.ScaleFactor;
			}
		}

		// Token: 0x1700016E RID: 366
		// (get) Token: 0x0600043F RID: 1087 RVA: 0x0000FE7C File Offset: 0x0000E07C
		public float ScaledDistanceToPreviousPiece
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.DistanceToPreviousPiece;
				}
				return this.CraftingPiece.DistanceToPreviousPiece * this.ScaleFactor;
			}
		}

		// Token: 0x1700016F RID: 367
		// (get) Token: 0x06000440 RID: 1088 RVA: 0x0000FEA4 File Offset: 0x0000E0A4
		public float ScaledBladeLength
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.BladeData.BladeLength;
				}
				return this.CraftingPiece.BladeData.BladeLength * this.ScaleFactor;
			}
		}

		// Token: 0x17000170 RID: 368
		// (get) Token: 0x06000441 RID: 1089 RVA: 0x0000FED6 File Offset: 0x0000E0D6
		public float ScaledPieceOffset
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.PieceOffset;
				}
				return this.CraftingPiece.PieceOffset * this.ScaleFactor;
			}
		}

		// Token: 0x17000171 RID: 369
		// (get) Token: 0x06000442 RID: 1090 RVA: 0x0000FEFE File Offset: 0x0000E0FE
		public float ScaledPreviousPieceOffset
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.PreviousPieceOffset;
				}
				return this.CraftingPiece.PreviousPieceOffset * this.ScaleFactor;
			}
		}

		// Token: 0x17000172 RID: 370
		// (get) Token: 0x06000443 RID: 1091 RVA: 0x0000FF26 File Offset: 0x0000E126
		public float ScaledNextPieceOffset
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.NextPieceOffset;
				}
				return this.CraftingPiece.NextPieceOffset * this.ScaleFactor;
			}
		}

		// Token: 0x06000444 RID: 1092 RVA: 0x0000FF4E File Offset: 0x0000E14E
		public void SetScale(int scalePercentage)
		{
			this._scalePercentage = scalePercentage;
		}

		// Token: 0x06000445 RID: 1093 RVA: 0x0000FF57 File Offset: 0x0000E157
		private WeaponDesignElement(CraftingPiece craftingPiece, int scalePercentage = 100)
		{
			this._craftingPiece = craftingPiece;
			this._scalePercentage = scalePercentage;
		}

		// Token: 0x06000446 RID: 1094 RVA: 0x0000FF6D File Offset: 0x0000E16D
		public WeaponDesignElement GetCopy()
		{
			return new WeaponDesignElement(this.CraftingPiece, this.ScalePercentage);
		}

		// Token: 0x06000447 RID: 1095 RVA: 0x0000FF80 File Offset: 0x0000E180
		public static WeaponDesignElement GetInvalidPieceForType(CraftingPiece.PieceTypes pieceType)
		{
			return new WeaponDesignElement(CraftingPiece.GetInvalidCraftingPiece(pieceType), 100);
		}

		// Token: 0x06000448 RID: 1096 RVA: 0x0000FF8F File Offset: 0x0000E18F
		public static WeaponDesignElement CreateUsablePiece(CraftingPiece craftingPiece, int scalePercentage = 100)
		{
			return new WeaponDesignElement(craftingPiece, scalePercentage);
		}

		// Token: 0x0400021F RID: 543
		[SaveableField(10)]
		private readonly CraftingPiece _craftingPiece;

		// Token: 0x04000220 RID: 544
		[SaveableField(20)]
		private int _scalePercentage;
	}
}
