using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000026 RID: 38
	public sealed class CraftingPiece : MBObjectBase
	{
		// Token: 0x0600021D RID: 541 RVA: 0x0000A00A File Offset: 0x0000820A
		internal static void AutoGeneratedStaticCollectObjectsCraftingPiece(object o, List<object> collectedObjects)
		{
			((CraftingPiece)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600021E RID: 542 RVA: 0x0000A018 File Offset: 0x00008218
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600021F RID: 543 RVA: 0x0000A021 File Offset: 0x00008221
		public CraftingPiece()
		{
			this.InitializeLists();
		}

		// Token: 0x06000220 RID: 544 RVA: 0x0000A02F File Offset: 0x0000822F
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this.InitializeLists();
		}

		// Token: 0x06000221 RID: 545 RVA: 0x0000A038 File Offset: 0x00008238
		private void InitializeLists()
		{
			this._materialCosts = new MBList<int>(9);
			for (int i = 0; i < 9; i++)
			{
				this._materialCosts.Add(0);
			}
			this._materialsUsed = new MBList<ValueTuple<CraftingMaterials, int>>(0);
		}

		// Token: 0x06000222 RID: 546 RVA: 0x0000A078 File Offset: 0x00008278
		public static CraftingPiece GetInvalidCraftingPiece(CraftingPiece.PieceTypes pieceType)
		{
			if (CraftingPiece._invalidCraftingPiece == null)
			{
				CraftingPiece._invalidCraftingPiece = new CraftingPiece[4];
			}
			if (CraftingPiece._invalidCraftingPiece[(int)pieceType] == null)
			{
				CraftingPiece._invalidCraftingPiece[(int)pieceType] = new CraftingPiece
				{
					PieceType = pieceType,
					Name = new TextObject("{=!}Invalid", null),
					IsValid = false
				};
			}
			return CraftingPiece._invalidCraftingPiece[(int)pieceType];
		}

		// Token: 0x17000096 RID: 150
		// (get) Token: 0x06000223 RID: 547 RVA: 0x0000A0D2 File Offset: 0x000082D2
		// (set) Token: 0x06000224 RID: 548 RVA: 0x0000A0DA File Offset: 0x000082DA
		public bool IsValid { get; private set; }

		// Token: 0x17000097 RID: 151
		// (get) Token: 0x06000225 RID: 549 RVA: 0x0000A0E3 File Offset: 0x000082E3
		// (set) Token: 0x06000226 RID: 550 RVA: 0x0000A0EB File Offset: 0x000082EB
		public TextObject Name { get; private set; }

		// Token: 0x17000098 RID: 152
		// (get) Token: 0x06000227 RID: 551 RVA: 0x0000A0F4 File Offset: 0x000082F4
		// (set) Token: 0x06000228 RID: 552 RVA: 0x0000A0FC File Offset: 0x000082FC
		public CraftingPiece.PieceTypes PieceType { get; private set; }

		// Token: 0x17000099 RID: 153
		// (get) Token: 0x06000229 RID: 553 RVA: 0x0000A105 File Offset: 0x00008305
		// (set) Token: 0x0600022A RID: 554 RVA: 0x0000A10D File Offset: 0x0000830D
		public string MeshName { get; private set; }

		// Token: 0x1700009A RID: 154
		// (get) Token: 0x0600022B RID: 555 RVA: 0x0000A116 File Offset: 0x00008316
		// (set) Token: 0x0600022C RID: 556 RVA: 0x0000A11E File Offset: 0x0000831E
		public BasicCultureObject Culture { get; private set; }

		// Token: 0x1700009B RID: 155
		// (get) Token: 0x0600022D RID: 557 RVA: 0x0000A127 File Offset: 0x00008327
		// (set) Token: 0x0600022E RID: 558 RVA: 0x0000A12F File Offset: 0x0000832F
		public float Length { get; private set; }

		// Token: 0x1700009C RID: 156
		// (get) Token: 0x0600022F RID: 559 RVA: 0x0000A138 File Offset: 0x00008338
		// (set) Token: 0x06000230 RID: 560 RVA: 0x0000A140 File Offset: 0x00008340
		public float DistanceToNextPiece { get; private set; }

		// Token: 0x1700009D RID: 157
		// (get) Token: 0x06000231 RID: 561 RVA: 0x0000A149 File Offset: 0x00008349
		// (set) Token: 0x06000232 RID: 562 RVA: 0x0000A151 File Offset: 0x00008351
		public float DistanceToPreviousPiece { get; private set; }

		// Token: 0x1700009E RID: 158
		// (get) Token: 0x06000233 RID: 563 RVA: 0x0000A15A File Offset: 0x0000835A
		// (set) Token: 0x06000234 RID: 564 RVA: 0x0000A162 File Offset: 0x00008362
		public float PieceOffset { get; private set; }

		// Token: 0x1700009F RID: 159
		// (get) Token: 0x06000235 RID: 565 RVA: 0x0000A16B File Offset: 0x0000836B
		// (set) Token: 0x06000236 RID: 566 RVA: 0x0000A173 File Offset: 0x00008373
		public float PreviousPieceOffset { get; private set; }

		// Token: 0x170000A0 RID: 160
		// (get) Token: 0x06000237 RID: 567 RVA: 0x0000A17C File Offset: 0x0000837C
		// (set) Token: 0x06000238 RID: 568 RVA: 0x0000A184 File Offset: 0x00008384
		public float NextPieceOffset { get; private set; }

		// Token: 0x170000A1 RID: 161
		// (get) Token: 0x06000239 RID: 569 RVA: 0x0000A18D File Offset: 0x0000838D
		// (set) Token: 0x0600023A RID: 570 RVA: 0x0000A195 File Offset: 0x00008395
		public float Weight { get; private set; }

		// Token: 0x170000A2 RID: 162
		// (get) Token: 0x0600023B RID: 571 RVA: 0x0000A19E File Offset: 0x0000839E
		// (set) Token: 0x0600023C RID: 572 RVA: 0x0000A1A6 File Offset: 0x000083A6
		public float Inertia { get; private set; }

		// Token: 0x170000A3 RID: 163
		// (get) Token: 0x0600023D RID: 573 RVA: 0x0000A1AF File Offset: 0x000083AF
		// (set) Token: 0x0600023E RID: 574 RVA: 0x0000A1B7 File Offset: 0x000083B7
		public float CenterOfMass { get; private set; }

		// Token: 0x170000A4 RID: 164
		// (get) Token: 0x0600023F RID: 575 RVA: 0x0000A1C0 File Offset: 0x000083C0
		// (set) Token: 0x06000240 RID: 576 RVA: 0x0000A1C8 File Offset: 0x000083C8
		public int ArmorBonus { get; private set; }

		// Token: 0x170000A5 RID: 165
		// (get) Token: 0x06000241 RID: 577 RVA: 0x0000A1D1 File Offset: 0x000083D1
		// (set) Token: 0x06000242 RID: 578 RVA: 0x0000A1D9 File Offset: 0x000083D9
		public int SwingDamageBonus { get; private set; }

		// Token: 0x170000A6 RID: 166
		// (get) Token: 0x06000243 RID: 579 RVA: 0x0000A1E2 File Offset: 0x000083E2
		// (set) Token: 0x06000244 RID: 580 RVA: 0x0000A1EA File Offset: 0x000083EA
		public int SwingSpeedBonus { get; private set; }

		// Token: 0x170000A7 RID: 167
		// (get) Token: 0x06000245 RID: 581 RVA: 0x0000A1F3 File Offset: 0x000083F3
		// (set) Token: 0x06000246 RID: 582 RVA: 0x0000A1FB File Offset: 0x000083FB
		public int ThrustDamageBonus { get; private set; }

		// Token: 0x170000A8 RID: 168
		// (get) Token: 0x06000247 RID: 583 RVA: 0x0000A204 File Offset: 0x00008404
		// (set) Token: 0x06000248 RID: 584 RVA: 0x0000A20C File Offset: 0x0000840C
		public int ThrustSpeedBonus { get; private set; }

		// Token: 0x170000A9 RID: 169
		// (get) Token: 0x06000249 RID: 585 RVA: 0x0000A215 File Offset: 0x00008415
		// (set) Token: 0x0600024A RID: 586 RVA: 0x0000A21D File Offset: 0x0000841D
		public int HandlingBonus { get; private set; }

		// Token: 0x170000AA RID: 170
		// (get) Token: 0x0600024B RID: 587 RVA: 0x0000A226 File Offset: 0x00008426
		// (set) Token: 0x0600024C RID: 588 RVA: 0x0000A22E File Offset: 0x0000842E
		public int AccuracyBonus { get; private set; }

		// Token: 0x170000AB RID: 171
		// (get) Token: 0x0600024D RID: 589 RVA: 0x0000A237 File Offset: 0x00008437
		// (set) Token: 0x0600024E RID: 590 RVA: 0x0000A23F File Offset: 0x0000843F
		public int PieceTier { get; private set; }

		// Token: 0x170000AC RID: 172
		// (get) Token: 0x0600024F RID: 591 RVA: 0x0000A248 File Offset: 0x00008448
		// (set) Token: 0x06000250 RID: 592 RVA: 0x0000A250 File Offset: 0x00008450
		public bool FullScale { get; private set; }

		// Token: 0x170000AD RID: 173
		// (get) Token: 0x06000251 RID: 593 RVA: 0x0000A259 File Offset: 0x00008459
		// (set) Token: 0x06000252 RID: 594 RVA: 0x0000A261 File Offset: 0x00008461
		public Vec3 ItemHolsterPosShift { get; private set; }

		// Token: 0x170000AE RID: 174
		// (get) Token: 0x06000253 RID: 595 RVA: 0x0000A26A File Offset: 0x0000846A
		// (set) Token: 0x06000254 RID: 596 RVA: 0x0000A272 File Offset: 0x00008472
		public float Appearance { get; private set; }

		// Token: 0x170000AF RID: 175
		// (get) Token: 0x06000255 RID: 597 RVA: 0x0000A27B File Offset: 0x0000847B
		// (set) Token: 0x06000256 RID: 598 RVA: 0x0000A283 File Offset: 0x00008483
		public bool IsGivenByDefault { get; private set; }

		// Token: 0x170000B0 RID: 176
		// (get) Token: 0x06000257 RID: 599 RVA: 0x0000A28C File Offset: 0x0000848C
		// (set) Token: 0x06000258 RID: 600 RVA: 0x0000A294 File Offset: 0x00008494
		public bool IsHiddenOnDesigner { get; private set; }

		// Token: 0x170000B1 RID: 177
		// (get) Token: 0x06000259 RID: 601 RVA: 0x0000A29D File Offset: 0x0000849D
		// (set) Token: 0x0600025A RID: 602 RVA: 0x0000A2A5 File Offset: 0x000084A5
		public bool IsUnique { get; private set; }

		// Token: 0x170000B2 RID: 178
		// (get) Token: 0x0600025B RID: 603 RVA: 0x0000A2AE File Offset: 0x000084AE
		// (set) Token: 0x0600025C RID: 604 RVA: 0x0000A2B6 File Offset: 0x000084B6
		public string ItemUsageFeaturesToExclude { get; private set; }

		// Token: 0x170000B3 RID: 179
		// (get) Token: 0x0600025D RID: 605 RVA: 0x0000A2BF File Offset: 0x000084BF
		public MBReadOnlyList<ValueTuple<CraftingMaterials, int>> MaterialsUsed
		{
			get
			{
				return this._materialsUsed;
			}
		}

		// Token: 0x170000B4 RID: 180
		// (get) Token: 0x0600025E RID: 606 RVA: 0x0000A2C7 File Offset: 0x000084C7
		public bool IsEmptyPiece
		{
			get
			{
				return this._materialCosts.All((int cost) => cost == 0);
			}
		}

		// Token: 0x170000B5 RID: 181
		// (get) Token: 0x0600025F RID: 607 RVA: 0x0000A2F3 File Offset: 0x000084F3
		// (set) Token: 0x06000260 RID: 608 RVA: 0x0000A2FB File Offset: 0x000084FB
		public int CraftingCost { get; private set; }

		// Token: 0x170000B6 RID: 182
		// (get) Token: 0x06000261 RID: 609 RVA: 0x0000A304 File Offset: 0x00008504
		// (set) Token: 0x06000262 RID: 610 RVA: 0x0000A30C File Offset: 0x0000850C
		public int RequiredSkillValue { get; private set; }

		// Token: 0x170000B7 RID: 183
		// (get) Token: 0x06000263 RID: 611 RVA: 0x0000A315 File Offset: 0x00008515
		// (set) Token: 0x06000264 RID: 612 RVA: 0x0000A31D File Offset: 0x0000851D
		public BladeData BladeData { get; private set; }

		// Token: 0x06000265 RID: 613 RVA: 0x0000A328 File Offset: 0x00008528
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.IsValid = true;
			this.Name = new TextObject(node.Attributes["name"].InnerText, null);
			this.PieceType = (CraftingPiece.PieceTypes)Enum.Parse(typeof(CraftingPiece.PieceTypes), node.Attributes["piece_type"].InnerText, true);
			this.MeshName = node.Attributes["mesh"].InnerText;
			this.Culture = ((node.Attributes["mesh"] != null) ? ((BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node)) : null);
			this.Appearance = ((node.Attributes["appearance"] != null) ? float.Parse(node.Attributes["appearance"].Value) : 0.5f);
			this.CraftingCost = ((node.Attributes["CraftingCost"] != null) ? int.Parse(node.Attributes["CraftingCost"].Value) : 0);
			XmlAttribute xmlAttribute = node.Attributes["weight"];
			this.Weight = ((xmlAttribute != null) ? float.Parse(xmlAttribute.Value) : 0f);
			XmlAttribute xmlAttribute2 = node.Attributes["length"];
			if (xmlAttribute2 != null)
			{
				this.Length = 0.01f * float.Parse(xmlAttribute2.Value);
				this.DistanceToNextPiece = this.Length / 2f;
				this.DistanceToPreviousPiece = this.Length / 2f;
			}
			else
			{
				XmlAttribute xmlAttribute3 = node.Attributes["distance_to_next_piece"];
				XmlAttribute xmlAttribute4 = node.Attributes["distance_to_previous_piece"];
				this.DistanceToNextPiece = 0.01f * float.Parse(xmlAttribute3.Value);
				this.DistanceToPreviousPiece = 0.01f * float.Parse(xmlAttribute4.Value);
				this.Length = this.DistanceToNextPiece + this.DistanceToPreviousPiece;
			}
			this.Inertia = 0.083333336f * this.Weight * this.Length * this.Length;
			XmlAttribute xmlAttribute5 = node.Attributes["center_of_mass"];
			float num = (xmlAttribute5 != null) ? float.Parse(xmlAttribute5.Value) : 0.5f;
			this.CenterOfMass = this.Length * num;
			XmlAttribute xmlAttribute6 = node.Attributes["item_holster_pos_shift"];
			Vec3 itemHolsterPosShift = default(Vec3);
			if (xmlAttribute6 != null)
			{
				string[] array = xmlAttribute6.Value.Split(new char[]
				{
					','
				});
				if (array.Length == 3)
				{
					float.TryParse(array[0], out itemHolsterPosShift.x);
					float.TryParse(array[1], out itemHolsterPosShift.y);
					float.TryParse(array[2], out itemHolsterPosShift.z);
				}
			}
			this.ItemHolsterPosShift = itemHolsterPosShift;
			XmlAttribute xmlAttribute7 = node.Attributes["tier"];
			this.PieceTier = ((xmlAttribute7 != null) ? int.Parse(xmlAttribute7.Value) : 1);
			this.IsUnique = XmlHelper.ReadBool(node, "is_unique");
			this.IsGivenByDefault = XmlHelper.ReadBool(node, "is_default");
			this.IsHiddenOnDesigner = XmlHelper.ReadBool(node, "is_hidden");
			XmlAttribute xmlAttribute8 = node.Attributes["full_scale"];
			this.FullScale = ((xmlAttribute8 != null) ? (xmlAttribute8.InnerText == "true") : (this.PieceType == CraftingPiece.PieceTypes.Guard || this.PieceType == CraftingPiece.PieceTypes.Pommel));
			XmlAttribute xmlAttribute9 = node.Attributes["excluded_item_usage_features"];
			this.ItemUsageFeaturesToExclude = ((xmlAttribute9 != null) ? xmlAttribute9.InnerText : "");
			XmlAttribute xmlAttribute10 = node.Attributes["required_skill_value"];
			this.RequiredSkillValue = ((xmlAttribute10 != null) ? int.Parse(xmlAttribute10.Value) : 0);
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Attributes != null)
				{
					string name = xmlNode.Name;
					if (!(name == "StatContributions"))
					{
						if (!(name == "BladeData"))
						{
							if (!(name == "BuildData"))
							{
								if (!(name == "Materials"))
								{
									if (name == "Flags")
									{
										this.AdditionalItemFlags = (ItemFlags)0U;
										this.AdditionalWeaponFlags = (WeaponFlags)0UL;
										foreach (object obj2 in xmlNode.ChildNodes)
										{
											XmlNode xmlNode2 = (XmlNode)obj2;
											XmlAttribute xmlAttribute11 = xmlNode2.Attributes["name"];
											XmlAttribute xmlAttribute12 = xmlNode2.Attributes["type"];
											if (xmlAttribute12 == null || xmlAttribute12.Value == "WeaponFlags")
											{
												WeaponFlags weaponFlags = (WeaponFlags)Enum.Parse(typeof(WeaponFlags), xmlAttribute11.Value, true);
												this.AdditionalWeaponFlags |= weaponFlags;
											}
											else
											{
												ItemFlags itemFlags = (ItemFlags)Enum.Parse(typeof(ItemFlags), xmlAttribute11.Value, true);
												this.AdditionalItemFlags |= itemFlags;
											}
										}
									}
								}
								else
								{
									this._materialsUsed = new MBList<ValueTuple<CraftingMaterials, int>>();
									foreach (object obj3 in xmlNode.ChildNodes)
									{
										XmlNode xmlNode3 = (XmlNode)obj3;
										string value = xmlNode3.Attributes["id"].Value;
										string value2 = xmlNode3.Attributes["count"].Value;
										CraftingMaterials craftingMaterials;
										Enum.TryParse<CraftingMaterials>(value, out craftingMaterials);
										int num2;
										if (int.TryParse(value2, out num2) && num2 > 0)
										{
											this._materialsUsed.Add(new ValueTuple<CraftingMaterials, int>(craftingMaterials, num2));
										}
										this._materialCosts[(int)craftingMaterials] = num2;
									}
									this._materialsUsed.Capacity = this._materialsUsed.Count;
								}
							}
							else
							{
								XmlAttribute xmlAttribute13 = xmlNode.Attributes["piece_offset"];
								XmlAttribute xmlAttribute14 = xmlNode.Attributes["previous_piece_offset"];
								XmlAttribute xmlAttribute15 = xmlNode.Attributes["next_piece_offset"];
								this.PieceOffset = ((xmlAttribute13 != null) ? (0.01f * float.Parse(xmlAttribute13.Value)) : 0f);
								this.PreviousPieceOffset = ((xmlAttribute14 != null) ? (0.01f * float.Parse(xmlAttribute14.Value)) : 0f);
								this.NextPieceOffset = ((xmlAttribute15 != null) ? (0.01f * float.Parse(xmlAttribute15.Value)) : 0f);
							}
						}
						else
						{
							this.BladeData = new BladeData(this.PieceType, this.Length);
							this.BladeData.Deserialize(objectManager, xmlNode);
						}
					}
					else
					{
						XmlAttribute xmlAttribute16 = xmlNode.Attributes["armor_bonus"];
						this.ArmorBonus = ((xmlAttribute16 != null) ? int.Parse(xmlAttribute16.Value) : 0);
						XmlAttribute xmlAttribute17 = xmlNode.Attributes["handling_bonus"];
						this.HandlingBonus = ((xmlAttribute17 != null) ? int.Parse(xmlAttribute17.Value) : 0);
						XmlAttribute xmlAttribute18 = xmlNode.Attributes["swing_damage_bonus"];
						this.SwingDamageBonus = ((xmlAttribute18 != null) ? int.Parse(xmlAttribute18.Value) : 0);
						XmlAttribute xmlAttribute19 = xmlNode.Attributes["swing_speed_bonus"];
						this.SwingSpeedBonus = ((xmlAttribute19 != null) ? int.Parse(xmlAttribute19.Value) : 0);
						XmlAttribute xmlAttribute20 = xmlNode.Attributes["thrust_damage_bonus"];
						this.ThrustDamageBonus = ((xmlAttribute20 != null) ? int.Parse(xmlAttribute20.Value) : 0);
						XmlAttribute xmlAttribute21 = xmlNode.Attributes["thrust_speed_bonus"];
						this.ThrustSpeedBonus = ((xmlAttribute21 != null) ? int.Parse(xmlAttribute21.Value) : 0);
						XmlAttribute xmlAttribute22 = xmlNode.Attributes["accuracy_bonus"];
						this.AccuracyBonus = ((xmlAttribute22 != null) ? int.Parse(xmlAttribute22.Value) : 0);
					}
				}
			}
			CraftingPiece.PieceTypes pieceType = this.PieceType;
		}

		// Token: 0x170000B8 RID: 184
		// (get) Token: 0x06000266 RID: 614 RVA: 0x0000ABB8 File Offset: 0x00008DB8
		public static MBReadOnlyList<CraftingPiece> All
		{
			get
			{
				return Game.Current.ObjectManager.GetObjectTypeList<CraftingPiece>();
			}
		}

		// Token: 0x0400017B RID: 379
		private static CraftingPiece[] _invalidCraftingPiece;

		// Token: 0x04000199 RID: 409
		public WeaponFlags AdditionalWeaponFlags;

		// Token: 0x0400019A RID: 410
		public ItemFlags AdditionalItemFlags;

		// Token: 0x0400019B RID: 411
		private MBList<int> _materialCosts;

		// Token: 0x0400019C RID: 412
		private MBList<ValueTuple<CraftingMaterials, int>> _materialsUsed;

		// Token: 0x020000D9 RID: 217
		public enum PieceTypes
		{
			// Token: 0x04000628 RID: 1576
			Invalid = -1,
			// Token: 0x04000629 RID: 1577
			Blade,
			// Token: 0x0400062A RID: 1578
			Guard,
			// Token: 0x0400062B RID: 1579
			Handle,
			// Token: 0x0400062C RID: 1580
			Pommel,
			// Token: 0x0400062D RID: 1581
			NumberOfPieceTypes
		}
	}
}
