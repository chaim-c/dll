using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000025 RID: 37
	public class WeaponDesign
	{
		// Token: 0x060001FB RID: 507 RVA: 0x00009A1C File Offset: 0x00007C1C
		internal static void AutoGeneratedStaticCollectObjectsWeaponDesign(object o, List<object> collectedObjects)
		{
			((WeaponDesign)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060001FC RID: 508 RVA: 0x00009A2C File Offset: 0x00007C2C
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.Template);
			collectedObjects.Add(this.TopPivotOffsets);
			collectedObjects.Add(this.BottomPivotOffsets);
			collectedObjects.Add(this._usedPieces);
			collectedObjects.Add(this._piecePivotDistances);
			collectedObjects.Add(this.WeaponName);
		}

		// Token: 0x060001FD RID: 509 RVA: 0x00009A81 File Offset: 0x00007C81
		internal static object AutoGeneratedGetMemberValueWeaponName(object o)
		{
			return ((WeaponDesign)o).WeaponName;
		}

		// Token: 0x060001FE RID: 510 RVA: 0x00009A8E File Offset: 0x00007C8E
		internal static object AutoGeneratedGetMemberValueHandToBottomLength(object o)
		{
			return ((WeaponDesign)o).HandToBottomLength;
		}

		// Token: 0x060001FF RID: 511 RVA: 0x00009AA0 File Offset: 0x00007CA0
		internal static object AutoGeneratedGetMemberValueWeaponFlags(object o)
		{
			return ((WeaponDesign)o).WeaponFlags;
		}

		// Token: 0x06000200 RID: 512 RVA: 0x00009AB2 File Offset: 0x00007CB2
		internal static object AutoGeneratedGetMemberValueCraftedWeaponLength(object o)
		{
			return ((WeaponDesign)o).CraftedWeaponLength;
		}

		// Token: 0x06000201 RID: 513 RVA: 0x00009AC4 File Offset: 0x00007CC4
		internal static object AutoGeneratedGetMemberValueTemplate(object o)
		{
			return ((WeaponDesign)o).Template;
		}

		// Token: 0x06000202 RID: 514 RVA: 0x00009AD1 File Offset: 0x00007CD1
		internal static object AutoGeneratedGetMemberValueTopPivotOffsets(object o)
		{
			return ((WeaponDesign)o).TopPivotOffsets;
		}

		// Token: 0x06000203 RID: 515 RVA: 0x00009ADE File Offset: 0x00007CDE
		internal static object AutoGeneratedGetMemberValueBottomPivotOffsets(object o)
		{
			return ((WeaponDesign)o).BottomPivotOffsets;
		}

		// Token: 0x06000204 RID: 516 RVA: 0x00009AEB File Offset: 0x00007CEB
		internal static object AutoGeneratedGetMemberValueHolsterShiftAmount(object o)
		{
			return ((WeaponDesign)o).HolsterShiftAmount;
		}

		// Token: 0x06000205 RID: 517 RVA: 0x00009AFD File Offset: 0x00007CFD
		internal static object AutoGeneratedGetMemberValue_usedPieces(object o)
		{
			return ((WeaponDesign)o)._usedPieces;
		}

		// Token: 0x06000206 RID: 518 RVA: 0x00009B0A File Offset: 0x00007D0A
		internal static object AutoGeneratedGetMemberValue_piecePivotDistances(object o)
		{
			return ((WeaponDesign)o)._piecePivotDistances;
		}

		// Token: 0x1700008F RID: 143
		// (get) Token: 0x06000207 RID: 519 RVA: 0x00009B17 File Offset: 0x00007D17
		// (set) Token: 0x06000208 RID: 520 RVA: 0x00009B1F File Offset: 0x00007D1F
		[SaveableProperty(21)]
		public TextObject WeaponName { get; private set; }

		// Token: 0x17000090 RID: 144
		// (get) Token: 0x06000209 RID: 521 RVA: 0x00009B28 File Offset: 0x00007D28
		public WeaponDesignElement[] UsedPieces
		{
			get
			{
				return this._usedPieces;
			}
		}

		// Token: 0x17000091 RID: 145
		// (get) Token: 0x0600020A RID: 522 RVA: 0x00009B30 File Offset: 0x00007D30
		public string HashedCode
		{
			get
			{
				return this._hashedCode;
			}
		}

		// Token: 0x17000092 RID: 146
		// (get) Token: 0x0600020B RID: 523 RVA: 0x00009B38 File Offset: 0x00007D38
		public float[] PiecePivotDistances
		{
			get
			{
				return this._piecePivotDistances;
			}
		}

		// Token: 0x17000093 RID: 147
		// (get) Token: 0x0600020C RID: 524 RVA: 0x00009B40 File Offset: 0x00007D40
		public float TotalLength
		{
			get
			{
				return this.CraftedWeaponLength + this.HandToBottomLength;
			}
		}

		// Token: 0x17000094 RID: 148
		// (get) Token: 0x0600020D RID: 525 RVA: 0x00009B4F File Offset: 0x00007D4F
		// (set) Token: 0x0600020E RID: 526 RVA: 0x00009B57 File Offset: 0x00007D57
		[SaveableProperty(50)]
		public float HandToBottomLength { get; private set; }

		// Token: 0x17000095 RID: 149
		// (get) Token: 0x0600020F RID: 527 RVA: 0x00009B60 File Offset: 0x00007D60
		public float BottomPivotOffset
		{
			get
			{
				return this.BottomPivotOffsets[this.BottomPivotOffsets.Count - 1];
			}
		}

		// Token: 0x06000210 RID: 528 RVA: 0x00009B7C File Offset: 0x00007D7C
		public WeaponDesign(CraftingTemplate template, TextObject weaponName, WeaponDesignElement[] usedPieces)
		{
			this.Template = template;
			this._usedPieces = usedPieces.ToArray<WeaponDesignElement>();
			this.WeaponName = weaponName;
			this._piecePivotDistances = new float[usedPieces.Length];
			this.CalculatePivotDistances();
			this.CraftedWeaponLength = this.CalculateWeaponLength();
			this.HolsterShiftAmount = this.CalculateHolsterShiftAmount();
			foreach (WeaponDesignElement weaponDesignElement in usedPieces)
			{
				this.WeaponFlags |= weaponDesignElement.CraftingPiece.AdditionalWeaponFlags;
			}
			this.BuildHashedCode();
		}

		// Token: 0x06000211 RID: 529 RVA: 0x00009C07 File Offset: 0x00007E07
		[LoadInitializationCallback]
		private void OnLoad()
		{
			this.BuildHashedCode();
		}

		// Token: 0x06000212 RID: 530 RVA: 0x00009C0F File Offset: 0x00007E0F
		public void SetWeaponName(TextObject name)
		{
			this.WeaponName = name;
		}

		// Token: 0x06000213 RID: 531 RVA: 0x00009C18 File Offset: 0x00007E18
		private void CalculatePivotDistances()
		{
			float num = 0f;
			float num2 = 0f;
			foreach (PieceData pieceData in this.Template.BuildOrders)
			{
				WeaponDesignElement weaponDesignElement = this.UsedPieces[(int)pieceData.PieceType];
				if (weaponDesignElement == null || !weaponDesignElement.IsValid)
				{
					this._piecePivotDistances[(int)pieceData.PieceType] = float.NaN;
				}
				else
				{
					int num3 = MathF.Sign(pieceData.Order);
					if (num3 == 0)
					{
						num2 += weaponDesignElement.ScaledPieceOffset;
						num -= weaponDesignElement.ScaledPieceOffset;
					}
					else if (num3 < 0)
					{
						num += weaponDesignElement.ScaledDistanceToNextPiece;
						num += weaponDesignElement.ScaledPieceOffset;
						num -= weaponDesignElement.ScaledNextPieceOffset;
					}
					else if (num3 > 0)
					{
						num2 += weaponDesignElement.ScaledDistanceToPreviousPiece;
						num2 += weaponDesignElement.ScaledPieceOffset;
						num2 -= weaponDesignElement.ScaledPreviousPieceOffset;
					}
					this._piecePivotDistances[(int)pieceData.PieceType] = (float)num3 * ((num3 < 0) ? num : num2) + ((num3 == 0) ? weaponDesignElement.ScaledPieceOffset : 0f);
					this.AddTopPivotOffset(num2);
					this.AddBottomPivotOffset(num);
					if (num3 == 0)
					{
						num += weaponDesignElement.ScaledDistanceToPreviousPiece - weaponDesignElement.ScaledPreviousPieceOffset;
						num2 += weaponDesignElement.ScaledDistanceToNextPiece - weaponDesignElement.ScaledNextPieceOffset;
					}
					if (num3 < 0)
					{
						num += weaponDesignElement.ScaledDistanceToPreviousPiece - weaponDesignElement.ScaledPreviousPieceOffset;
					}
					if (num3 > 0)
					{
						num2 += weaponDesignElement.ScaledDistanceToNextPiece - weaponDesignElement.ScaledNextPieceOffset;
					}
				}
			}
			this.AddTopPivotOffset(num2);
			this.AddBottomPivotOffset(num);
			this.HandToBottomLength = num;
		}

		// Token: 0x06000214 RID: 532 RVA: 0x00009DA8 File Offset: 0x00007FA8
		public override bool Equals(object obj)
		{
			if (obj == null)
			{
				return false;
			}
			WeaponDesign weaponDesign = obj as WeaponDesign;
			return weaponDesign != null && this.HashedCode == weaponDesign.HashedCode && this.WeaponName == weaponDesign.WeaponName;
		}

		// Token: 0x06000215 RID: 533 RVA: 0x00009DE9 File Offset: 0x00007FE9
		public override int GetHashCode()
		{
			return this._cachedHashedCodeInt;
		}

		// Token: 0x06000216 RID: 534 RVA: 0x00009DF4 File Offset: 0x00007FF4
		public static bool operator ==(WeaponDesign x, WeaponDesign y)
		{
			bool flag = x == null;
			bool flag2 = y == null;
			return (flag && flag2) || (!flag && x.Equals(y));
		}

		// Token: 0x06000217 RID: 535 RVA: 0x00009E1E File Offset: 0x0000801E
		public static bool operator !=(WeaponDesign x, WeaponDesign y)
		{
			return !(x == y);
		}

		// Token: 0x06000218 RID: 536 RVA: 0x00009E2A File Offset: 0x0000802A
		private void AddTopPivotOffset(float offset)
		{
			if (this.TopPivotOffsets == null)
			{
				this.TopPivotOffsets = new List<float>();
			}
			this.TopPivotOffsets.Add(offset);
		}

		// Token: 0x06000219 RID: 537 RVA: 0x00009E4B File Offset: 0x0000804B
		private void AddBottomPivotOffset(float offset)
		{
			if (this.BottomPivotOffsets == null)
			{
				this.BottomPivotOffsets = new List<float>();
			}
			this.BottomPivotOffsets.Add(offset);
		}

		// Token: 0x0600021A RID: 538 RVA: 0x00009E6C File Offset: 0x0000806C
		private Vec3 CalculateHolsterShiftAmount()
		{
			WeaponDesignElement weaponDesignElement = this.UsedPieces[2];
			Vec3 vec = (this.Template.ItemHolsterPositionShift + weaponDesignElement.CraftingPiece.ItemHolsterPosShift) * weaponDesignElement.ScaleFactor;
			if (this.UsedPieces[1] != null)
			{
				vec += Vec3.Up * this.UsedPieces[1].ScaledLength;
			}
			return vec;
		}

		// Token: 0x0600021B RID: 539 RVA: 0x00009ED4 File Offset: 0x000080D4
		private float CalculateWeaponLength()
		{
			int num = 0;
			float a = this._piecePivotDistances[num] + this._usedPieces[num].ScaledDistanceToNextPiece;
			float num2 = 0f;
			foreach (WeaponDesignElement weaponDesignElement in this._usedPieces)
			{
				if (weaponDesignElement.IsValid && weaponDesignElement.ScaledDistanceToNextPiece > num2)
				{
					float scaledPieceOffset = weaponDesignElement.ScaledPieceOffset;
					num2 = weaponDesignElement.ScaledDistanceToNextPiece + scaledPieceOffset;
				}
			}
			return MathF.Max(a, num2);
		}

		// Token: 0x0600021C RID: 540 RVA: 0x00009F50 File Offset: 0x00008150
		private void BuildHashedCode()
		{
			string text = "";
			foreach (WeaponDesignElement weaponDesignElement in this.UsedPieces)
			{
				if (weaponDesignElement.IsValid)
				{
					text = string.Concat(new object[]
					{
						text,
						weaponDesignElement.CraftingPiece.StringId,
						";",
						weaponDesignElement.ScalePercentage,
						";"
					});
				}
				else
				{
					text += "invalid_piece;";
				}
			}
			text += this.Template.StringId;
			text += this.WeaponName;
			this._hashedCode = Common.CalculateMD5Hash(text);
			this._cachedHashedCodeInt = Common.GetDJB2(this._hashedCode);
		}

		// Token: 0x0400016F RID: 367
		[SaveableField(10)]
		public readonly WeaponFlags WeaponFlags;

		// Token: 0x04000171 RID: 369
		[SaveableField(30)]
		private readonly WeaponDesignElement[] _usedPieces;

		// Token: 0x04000172 RID: 370
		[CachedData]
		private int _cachedHashedCodeInt;

		// Token: 0x04000173 RID: 371
		[CachedData]
		private string _hashedCode;

		// Token: 0x04000174 RID: 372
		[SaveableField(40)]
		private readonly float[] _piecePivotDistances;

		// Token: 0x04000176 RID: 374
		[SaveableField(60)]
		public readonly float CraftedWeaponLength;

		// Token: 0x04000177 RID: 375
		[SaveableField(70)]
		public readonly CraftingTemplate Template;

		// Token: 0x04000178 RID: 376
		[SaveableField(80)]
		public List<float> TopPivotOffsets;

		// Token: 0x04000179 RID: 377
		[SaveableField(90)]
		public List<float> BottomPivotOffsets;

		// Token: 0x0400017A RID: 378
		[SaveableField(100)]
		public readonly Vec3 HolsterShiftAmount;
	}
}
