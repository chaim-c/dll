using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002C4 RID: 708
	public abstract class LogEntry
	{
		// Token: 0x060029BC RID: 10684 RVA: 0x000B32FD File Offset: 0x000B14FD
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.GameTime, collectedObjects);
		}

		// Token: 0x060029BD RID: 10685 RVA: 0x000B3310 File Offset: 0x000B1510
		internal static object AutoGeneratedGetMemberValueId(object o)
		{
			return ((LogEntry)o).Id;
		}

		// Token: 0x060029BE RID: 10686 RVA: 0x000B3322 File Offset: 0x000B1522
		internal static object AutoGeneratedGetMemberValueGameTime(object o)
		{
			return ((LogEntry)o).GameTime;
		}

		// Token: 0x17000A6D RID: 2669
		// (get) Token: 0x060029BF RID: 10687 RVA: 0x000B3334 File Offset: 0x000B1534
		// (set) Token: 0x060029C0 RID: 10688 RVA: 0x000B333C File Offset: 0x000B153C
		[SaveableProperty(0)]
		public long Id { get; private set; }

		// Token: 0x17000A6E RID: 2670
		// (get) Token: 0x060029C1 RID: 10689 RVA: 0x000B3345 File Offset: 0x000B1545
		// (set) Token: 0x060029C2 RID: 10690 RVA: 0x000B334D File Offset: 0x000B154D
		[SaveableProperty(1)]
		public CampaignTime GameTime { get; private set; }

		// Token: 0x17000A6F RID: 2671
		// (get) Token: 0x060029C3 RID: 10691 RVA: 0x000B3356 File Offset: 0x000B1556
		public virtual CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Days(7f);
			}
		}

		// Token: 0x17000A70 RID: 2672
		// (get) Token: 0x060029C4 RID: 10692 RVA: 0x000B3362 File Offset: 0x000B1562
		public virtual ChatNotificationType NotificationType
		{
			get
			{
				return ChatNotificationType.Default;
			}
		}

		// Token: 0x060029C5 RID: 10693 RVA: 0x000B3368 File Offset: 0x000B1568
		protected ChatNotificationType MilitaryNotification(IFaction benefiter, IFaction affected)
		{
			if (benefiter == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanPositive;
			}
			if (affected == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanNegative;
			}
			if (((benefiter != null) ? benefiter.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionPositive;
			}
			if (((affected != null) ? affected.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionNegative;
			}
			if (affected != null && affected.IsAtWarWith(Clan.PlayerClan.MapFaction))
			{
				return ChatNotificationType.PlayerFactionIndirectPositive;
			}
			if (benefiter != null && benefiter.IsAtWarWith(Clan.PlayerClan.MapFaction))
			{
				return ChatNotificationType.PlayerFactionIndirectNegative;
			}
			return ChatNotificationType.Neutral;
		}

		// Token: 0x060029C6 RID: 10694 RVA: 0x000B33F0 File Offset: 0x000B15F0
		protected ChatNotificationType DiplomaticNotification(IFaction faction1, IFaction faction2)
		{
			if (faction1 == Clan.PlayerClan || faction2 == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanPositive;
			}
			if (faction1 == Clan.PlayerClan.MapFaction || faction2 == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionPositive;
			}
			if (faction1 != null && Clan.PlayerClan.MapFaction.IsAtWarWith(faction1))
			{
				return ChatNotificationType.PlayerFactionIndirectNegative;
			}
			if (faction2 != null && Clan.PlayerClan.MapFaction.IsAtWarWith(faction2))
			{
				return ChatNotificationType.PlayerFactionIndirectNegative;
			}
			return ChatNotificationType.PlayerFactionIndirectPositive;
		}

		// Token: 0x060029C7 RID: 10695 RVA: 0x000B3460 File Offset: 0x000B1660
		protected ChatNotificationType AdversityNotification(IFaction faction1, IFaction faction2)
		{
			if (faction1 == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanNegative;
			}
			if (faction2 == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanNegative;
			}
			if (((faction1 != null) ? faction1.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionNegative;
			}
			if (((faction2 != null) ? faction2.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionNegative;
			}
			return ChatNotificationType.Neutral;
		}

		// Token: 0x060029C8 RID: 10696 RVA: 0x000B34B6 File Offset: 0x000B16B6
		protected ChatNotificationType PoliticalNotification(IFaction faction)
		{
			if (faction == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanPolitical;
			}
			if (((faction != null) ? faction.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionPolitical;
			}
			return ChatNotificationType.Political;
		}

		// Token: 0x060029C9 RID: 10697 RVA: 0x000B34E0 File Offset: 0x000B16E0
		protected ChatNotificationType CivilianNotification(IFaction faction)
		{
			if (faction == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanCivilian;
			}
			if (((faction != null) ? faction.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionCivilian;
			}
			return ChatNotificationType.Civilian;
		}

		// Token: 0x060029CA RID: 10698 RVA: 0x000B3508 File Offset: 0x000B1708
		public static void AddLogEntry(LogEntry logEntry)
		{
			logEntry.GameTime = CampaignTime.Now;
			LogEntryHistory logEntryHistory = Campaign.Current.LogEntryHistory;
			long num = logEntryHistory.LastAddedIndex + 1L;
			logEntryHistory.LastAddedIndex = num;
			logEntry.Id = num;
			Campaign.Current.LogEntryHistory.AddActionLog(logEntry, false);
		}

		// Token: 0x060029CB RID: 10699 RVA: 0x000B3554 File Offset: 0x000B1754
		public static void AddLogEntry(LogEntry logEntry, CampaignTime gameTime)
		{
			logEntry.GameTime = gameTime;
			LogEntryHistory logEntryHistory = Campaign.Current.LogEntryHistory;
			long num = logEntryHistory.LastAddedIndex + 1L;
			logEntryHistory.LastAddedIndex = num;
			logEntry.Id = num;
			Campaign.Current.LogEntryHistory.AddActionLog(logEntry, true);
		}

		// Token: 0x060029CC RID: 10700 RVA: 0x000B359A File Offset: 0x000B179A
		public virtual ImportanceEnum GetImportanceForClan(Clan clan)
		{
			return ImportanceEnum.Zero;
		}

		// Token: 0x060029CD RID: 10701 RVA: 0x000B359D File Offset: 0x000B179D
		public virtual void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			comment = "";
			score = ImportanceEnum.Zero;
		}

		// Token: 0x060029CE RID: 10702 RVA: 0x000B35AA File Offset: 0x000B17AA
		public virtual int GetAsRumor(Settlement settlement, ref TextObject comment)
		{
			return 0;
		}

		// Token: 0x060029CF RID: 10703 RVA: 0x000B35AD File Offset: 0x000B17AD
		public virtual TextObject GetHistoricComment(Hero talkTroop)
		{
			return TextObject.Empty;
		}

		// Token: 0x060029D0 RID: 10704 RVA: 0x000B35B4 File Offset: 0x000B17B4
		public virtual int AsReasonForEnmity(Hero referenceHero1, Hero referenceHero2)
		{
			return 0;
		}

		// Token: 0x060029D1 RID: 10705 RVA: 0x000B35B7 File Offset: 0x000B17B7
		public virtual int GetValueAsPoliticsAbuseOfPower(Hero referenceTroop, Hero liege)
		{
			return 0;
		}

		// Token: 0x060029D2 RID: 10706 RVA: 0x000B35BA File Offset: 0x000B17BA
		public virtual int GetValueAsPoliticsSlightedClan(Hero referenceTroop, Hero liege)
		{
			return 0;
		}

		// Token: 0x060029D3 RID: 10707 RVA: 0x000B35BD File Offset: 0x000B17BD
		public virtual int GetValueAsPoliticsShowedWeakness(Hero referenceTroop, Hero liege)
		{
			return 0;
		}

		// Token: 0x04000C93 RID: 3219
		protected const uint NotificationDefaultTextColor = 0U;
	}
}
