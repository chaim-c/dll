using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002CB RID: 715
	public class ChangeRomanticStateLogEntry : LogEntry
	{
		// Token: 0x06002A28 RID: 10792 RVA: 0x000B455C File Offset: 0x000B275C
		internal static void AutoGeneratedStaticCollectObjectsChangeRomanticStateLogEntry(object o, List<object> collectedObjects)
		{
			((ChangeRomanticStateLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002A29 RID: 10793 RVA: 0x000B456A File Offset: 0x000B276A
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Hero1);
			collectedObjects.Add(this.Hero2);
		}

		// Token: 0x06002A2A RID: 10794 RVA: 0x000B458B File Offset: 0x000B278B
		internal static object AutoGeneratedGetMemberValueHero1(object o)
		{
			return ((ChangeRomanticStateLogEntry)o).Hero1;
		}

		// Token: 0x06002A2B RID: 10795 RVA: 0x000B4598 File Offset: 0x000B2798
		internal static object AutoGeneratedGetMemberValueHero2(object o)
		{
			return ((ChangeRomanticStateLogEntry)o).Hero2;
		}

		// Token: 0x06002A2C RID: 10796 RVA: 0x000B45A5 File Offset: 0x000B27A5
		internal static object AutoGeneratedGetMemberValueLevel(object o)
		{
			return ((ChangeRomanticStateLogEntry)o).Level;
		}

		// Token: 0x06002A2D RID: 10797 RVA: 0x000B45B7 File Offset: 0x000B27B7
		public ChangeRomanticStateLogEntry(Hero hero1, Hero hero2, Romance.RomanceLevelEnum level)
		{
			this.Hero1 = hero1;
			this.Hero2 = hero2;
			this.Level = level;
		}

		// Token: 0x06002A2E RID: 10798 RVA: 0x000B45D4 File Offset: 0x000B27D4
		public override string ToString()
		{
			TextObject textObject = new TextObject("{=!}Relation between {HERO_1.NAME} and {HERO_2.NAME} : {RELATION}", null);
			textObject.SetTextVariable("RELATION", this.Level.ToString());
			StringHelpers.SetCharacterProperties("HERO_1", this.Hero1.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("HERO_2", this.Hero2.CharacterObject, textObject, false);
			return textObject.ToString();
		}

		// Token: 0x06002A2F RID: 10799 RVA: 0x000B4640 File Offset: 0x000B2840
		public override ImportanceEnum GetImportanceForClan(Clan clan)
		{
			if (this.Hero1.Clan != clan && this.Hero2.Clan != clan)
			{
				return ImportanceEnum.Zero;
			}
			if (this.Level >= Romance.RomanceLevelEnum.CourtshipStarted)
			{
				return ImportanceEnum.ExtremelyImportant;
			}
			return ImportanceEnum.Important;
		}

		// Token: 0x06002A30 RID: 10800 RVA: 0x000B466C File Offset: 0x000B286C
		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (this.Hero1 == Hero.MainHero || this.Hero2 == Hero.MainHero)
			{
				Hero hero = this.Hero2;
				if (this.Hero2 == Hero.MainHero)
				{
					hero = this.Hero1;
				}
				hero.SetTextVariables();
				if ((this.Hero1 == Hero.OneToOneConversationHero || this.Hero2 == Hero.OneToOneConversationHero) && this.Level == Romance.RomanceLevelEnum.MatchMadeByFamily)
				{
					score = ImportanceEnum.MatterOfLifeAndDeath;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_match_made_by_family";
						return;
					}
				}
				else if (this.Level >= Romance.RomanceLevelEnum.Marriage && hero == Hero.OneToOneConversationHero)
				{
					score = ImportanceEnum.Important;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_congratulations_marriage_self";
						return;
					}
				}
				else if (this.Level >= Romance.RomanceLevelEnum.Marriage && hero != Hero.OneToOneConversationHero && hero.MapFaction == Hero.OneToOneConversationHero.MapFaction && Hero.OneToOneConversationHero.IsLord)
				{
					score = ImportanceEnum.Important;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_congratulations_marriage";
						return;
					}
				}
				else if (Hero.OneToOneConversationHero.Spouse == hero && this.Level >= Romance.RomanceLevelEnum.CourtshipStarted)
				{
					score = ImportanceEnum.MatterOfLifeAndDeath;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_stay_away_from_my_spouse";
						return;
					}
				}
				else if (Romance.GetRomanticLevel(hero, Hero.OneToOneConversationHero) >= Romance.RomanceLevelEnum.CourtshipStarted && this.Level >= Romance.RomanceLevelEnum.CourtshipStarted)
				{
					score = ImportanceEnum.MatterOfLifeAndDeath;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_romantic_rival";
					}
				}
			}
		}

		// Token: 0x04000CAD RID: 3245
		[SaveableField(70)]
		public readonly Hero Hero1;

		// Token: 0x04000CAE RID: 3246
		[SaveableField(71)]
		public readonly Hero Hero2;

		// Token: 0x04000CAF RID: 3247
		[SaveableField(72)]
		public readonly Romance.RomanceLevelEnum Level;
	}
}
