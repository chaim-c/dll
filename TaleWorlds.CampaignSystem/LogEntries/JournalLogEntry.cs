using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002E8 RID: 744
	public class JournalLogEntry : LogEntry
	{
		// Token: 0x06002B8E RID: 11150 RVA: 0x000B874D File Offset: 0x000B694D
		internal static void AutoGeneratedStaticCollectObjectsJournalLogEntry(object o, List<object> collectedObjects)
		{
			((JournalLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002B8F RID: 11151 RVA: 0x000B875C File Offset: 0x000B695C
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Title);
			collectedObjects.Add(this.RelatedHero);
			collectedObjects.Add(this.Antagonist);
			collectedObjects.Add(this._entries);
			collectedObjects.Add(this._relatedObjectIds);
		}

		// Token: 0x06002B90 RID: 11152 RVA: 0x000B87AC File Offset: 0x000B69AC
		internal static object AutoGeneratedGetMemberValueTitle(object o)
		{
			return ((JournalLogEntry)o).Title;
		}

		// Token: 0x06002B91 RID: 11153 RVA: 0x000B87B9 File Offset: 0x000B69B9
		internal static object AutoGeneratedGetMemberValueRelatedHero(object o)
		{
			return ((JournalLogEntry)o).RelatedHero;
		}

		// Token: 0x06002B92 RID: 11154 RVA: 0x000B87C6 File Offset: 0x000B69C6
		internal static object AutoGeneratedGetMemberValueAntagonist(object o)
		{
			return ((JournalLogEntry)o).Antagonist;
		}

		// Token: 0x06002B93 RID: 11155 RVA: 0x000B87D3 File Offset: 0x000B69D3
		internal static object AutoGeneratedGetMemberValueIsSpecial(object o)
		{
			return ((JournalLogEntry)o).IsSpecial;
		}

		// Token: 0x06002B94 RID: 11156 RVA: 0x000B87E5 File Offset: 0x000B69E5
		internal static object AutoGeneratedGetMemberValue_entries(object o)
		{
			return ((JournalLogEntry)o)._entries;
		}

		// Token: 0x06002B95 RID: 11157 RVA: 0x000B87F2 File Offset: 0x000B69F2
		internal static object AutoGeneratedGetMemberValue_lastIssueStatus(object o)
		{
			return ((JournalLogEntry)o)._lastIssueStatus;
		}

		// Token: 0x06002B96 RID: 11158 RVA: 0x000B8804 File Offset: 0x000B6A04
		internal static object AutoGeneratedGetMemberValue_questCompletionDetail(object o)
		{
			return ((JournalLogEntry)o)._questCompletionDetail;
		}

		// Token: 0x06002B97 RID: 11159 RVA: 0x000B8816 File Offset: 0x000B6A16
		internal static object AutoGeneratedGetMemberValue_relatedObjectIds(object o)
		{
			return ((JournalLogEntry)o)._relatedObjectIds;
		}

		// Token: 0x17000AAF RID: 2735
		// (get) Token: 0x06002B98 RID: 11160 RVA: 0x000B8823 File Offset: 0x000B6A23
		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				if (!this.IsSpecial)
				{
					return CampaignTime.Years(1f);
				}
				return CampaignTime.Years(10000f);
			}
		}

		// Token: 0x06002B99 RID: 11161 RVA: 0x000B8844 File Offset: 0x000B6A44
		public JournalLogEntry(TextObject title, Hero relatedHero, Hero antagonist, bool isSpecial, params MBObjectBase[] relatedObjects)
		{
			this.Title = title;
			this.RelatedHero = relatedHero;
			this.Antagonist = antagonist;
			this._lastIssueStatus = IssueBase.IssueUpdateDetails.None;
			this._questCompletionDetail = QuestBase.QuestCompleteDetails.Invalid;
			this.IsSpecial = isSpecial;
			this._relatedObjectIds = new string[relatedObjects.Length];
			for (int i = 0; i < relatedObjects.Length; i++)
			{
				this._relatedObjectIds[i] = relatedObjects[i].StringId;
			}
		}

		// Token: 0x06002B9A RID: 11162 RVA: 0x000B88B1 File Offset: 0x000B6AB1
		public bool IsRelatedTo(MBObjectBase obj)
		{
			return this._relatedObjectIds.Contains(obj.StringId);
		}

		// Token: 0x06002B9B RID: 11163 RVA: 0x000B88C4 File Offset: 0x000B6AC4
		public IEnumerable<JournalLog> GetEntries()
		{
			foreach (JournalLog journalLog in this._entries)
			{
				yield return journalLog;
			}
			List<JournalLog>.Enumerator enumerator = default(List<JournalLog>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x06002B9C RID: 11164 RVA: 0x000B88D4 File Offset: 0x000B6AD4
		public void Update(MBReadOnlyList<JournalLog> entries, IssueBase.IssueUpdateDetails issueStatus = IssueBase.IssueUpdateDetails.None)
		{
			this._entries = entries.ToList<JournalLog>();
			if (issueStatus != IssueBase.IssueUpdateDetails.None)
			{
				this._lastIssueStatus = issueStatus;
			}
		}

		// Token: 0x06002B9D RID: 11165 RVA: 0x000B88EC File Offset: 0x000B6AEC
		public void Update(MBReadOnlyList<JournalLog> entries, QuestBase.QuestCompleteDetails questCompletionDetail)
		{
			this._entries = entries.ToList<JournalLog>();
			this._questCompletionDetail = questCompletionDetail;
		}

		// Token: 0x06002B9E RID: 11166 RVA: 0x000B8904 File Offset: 0x000B6B04
		public bool IsEndedUnsuccessfully()
		{
			if (this._lastIssueStatus != IssueBase.IssueUpdateDetails.None)
			{
				return this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueCancel || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFail || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueTimedOut || this._lastIssueStatus == IssueBase.IssueUpdateDetails.SentTroopsFailedQuest || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal;
			}
			return this._questCompletionDetail == QuestBase.QuestCompleteDetails.Cancel || this._questCompletionDetail == QuestBase.QuestCompleteDetails.Fail || this._questCompletionDetail == QuestBase.QuestCompleteDetails.FailWithBetrayal || this._questCompletionDetail == QuestBase.QuestCompleteDetails.Timeout;
		}

		// Token: 0x06002B9F RID: 11167 RVA: 0x000B8974 File Offset: 0x000B6B74
		public bool IsEnded()
		{
			if (this._lastIssueStatus != IssueBase.IssueUpdateDetails.None)
			{
				return this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueCancel || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFail || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueTimedOut || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedByAILord || this._lastIssueStatus == IssueBase.IssueUpdateDetails.SentTroopsFinishedQuest || this._lastIssueStatus == IssueBase.IssueUpdateDetails.SentTroopsFailedQuest || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess;
			}
			return this._questCompletionDetail > QuestBase.QuestCompleteDetails.Invalid;
		}

		// Token: 0x06002BA0 RID: 11168 RVA: 0x000B89DF File Offset: 0x000B6BDF
		public override string ToString()
		{
			return "Quest status change";
		}

		// Token: 0x04000D0F RID: 3343
		[SaveableField(10)]
		public readonly TextObject Title;

		// Token: 0x04000D10 RID: 3344
		[SaveableField(20)]
		public readonly Hero RelatedHero;

		// Token: 0x04000D11 RID: 3345
		[SaveableField(30)]
		public readonly Hero Antagonist;

		// Token: 0x04000D12 RID: 3346
		[SaveableField(40)]
		private List<JournalLog> _entries;

		// Token: 0x04000D13 RID: 3347
		[SaveableField(50)]
		public readonly bool IsSpecial;

		// Token: 0x04000D14 RID: 3348
		[SaveableField(61)]
		private IssueBase.IssueUpdateDetails _lastIssueStatus;

		// Token: 0x04000D15 RID: 3349
		[SaveableField(70)]
		private QuestBase.QuestCompleteDetails _questCompletionDetail;

		// Token: 0x04000D16 RID: 3350
		[SaveableField(80)]
		private readonly string[] _relatedObjectIds;
	}
}
