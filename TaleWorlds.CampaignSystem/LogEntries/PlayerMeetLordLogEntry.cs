using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002E0 RID: 736
	public class PlayerMeetLordLogEntry : LogEntry, IEncyclopediaLog
	{
		// Token: 0x06002B27 RID: 11047 RVA: 0x000B7670 File Offset: 0x000B5870
		internal static void AutoGeneratedStaticCollectObjectsPlayerMeetLordLogEntry(object o, List<object> collectedObjects)
		{
			((PlayerMeetLordLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002B28 RID: 11048 RVA: 0x000B767E File Offset: 0x000B587E
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Hero);
		}

		// Token: 0x06002B29 RID: 11049 RVA: 0x000B7693 File Offset: 0x000B5893
		internal static object AutoGeneratedGetMemberValueHero(object o)
		{
			return ((PlayerMeetLordLogEntry)o).Hero;
		}

		// Token: 0x17000A9D RID: 2717
		// (get) Token: 0x06002B2A RID: 11050 RVA: 0x000B76A0 File Offset: 0x000B58A0
		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(1f);
			}
		}

		// Token: 0x06002B2B RID: 11051 RVA: 0x000B76AC File Offset: 0x000B58AC
		public PlayerMeetLordLogEntry(Hero hero)
		{
			this.Hero = hero;
		}

		// Token: 0x06002B2C RID: 11052 RVA: 0x000B76BB File Offset: 0x000B58BB
		public override ImportanceEnum GetImportanceForClan(Clan clan)
		{
			return ImportanceEnum.SlightlyImportant;
		}

		// Token: 0x06002B2D RID: 11053 RVA: 0x000B76C0 File Offset: 0x000B58C0
		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (Campaign.Current.ConversationManager.CurrentConversationIsFirst && this.Hero == talkTroop)
			{
				score = ImportanceEnum.SlightlyImportant;
				if (HeroHelper.UnderPlayerCommand(talkTroop))
				{
					score = ImportanceEnum.ExtremelyImportant;
				}
			}
			if (findString)
			{
				comment = "str_comment_intro";
				if (talkTroop.Clan != null && talkTroop.Clan.MapFaction != Hero.MainHero.MapFaction)
				{
					string text = "str_comment_special_clan_intro_" + talkTroop.Clan.StringId;
					TextObject textObject = new TextObject("", null);
					if (GameTexts.TryGetText(text, out textObject, null))
					{
						comment = text;
					}
				}
			}
		}

		// Token: 0x06002B2E RID: 11054 RVA: 0x000B7761 File Offset: 0x000B5961
		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		// Token: 0x06002B2F RID: 11055 RVA: 0x000B776E File Offset: 0x000B596E
		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Hero;
		}

		// Token: 0x06002B30 RID: 11056 RVA: 0x000B7780 File Offset: 0x000B5980
		public TextObject GetEncyclopediaText()
		{
			TextObject textObject = GameTexts.FindText("str_action_meet_lord", null);
			StringHelpers.SetCharacterProperties("HERO_1", this.Hero.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("HERO_2", CharacterObject.PlayerCharacter, textObject, false);
			return textObject;
		}

		// Token: 0x04000CF5 RID: 3317
		[SaveableField(290)]
		public readonly Hero Hero;
	}
}
