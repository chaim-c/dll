using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002D1 RID: 721
	public class CharacterMarriedLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
	{
		// Token: 0x06002A73 RID: 10867 RVA: 0x000B5637 File Offset: 0x000B3837
		internal static void AutoGeneratedStaticCollectObjectsCharacterMarriedLogEntry(object o, List<object> collectedObjects)
		{
			((CharacterMarriedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002A74 RID: 10868 RVA: 0x000B5645 File Offset: 0x000B3845
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.MarriedHero);
			collectedObjects.Add(this.MarriedTo);
		}

		// Token: 0x06002A75 RID: 10869 RVA: 0x000B5666 File Offset: 0x000B3866
		internal static object AutoGeneratedGetMemberValueMarriedHero(object o)
		{
			return ((CharacterMarriedLogEntry)o).MarriedHero;
		}

		// Token: 0x06002A76 RID: 10870 RVA: 0x000B5673 File Offset: 0x000B3873
		internal static object AutoGeneratedGetMemberValueMarriedTo(object o)
		{
			return ((CharacterMarriedLogEntry)o).MarriedTo;
		}

		// Token: 0x17000A83 RID: 2691
		// (get) Token: 0x06002A77 RID: 10871 RVA: 0x000B5680 File Offset: 0x000B3880
		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(240f);
			}
		}

		// Token: 0x17000A84 RID: 2692
		// (get) Token: 0x06002A78 RID: 10872 RVA: 0x000B568C File Offset: 0x000B388C
		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.DiplomaticNotification(this.MarriedHero.Clan, this.MarriedTo.Clan);
			}
		}

		// Token: 0x17000A85 RID: 2693
		// (get) Token: 0x06002A79 RID: 10873 RVA: 0x000B56AA File Offset: 0x000B38AA
		public bool IsVisibleNotification
		{
			get
			{
				return this.MarriedHero.CharacterObject.IsHero && this.MarriedTo.CharacterObject.IsHero;
			}
		}

		// Token: 0x06002A7A RID: 10874 RVA: 0x000B56D0 File Offset: 0x000B38D0
		public CharacterMarriedLogEntry(Hero marriedHero, Hero marriedTo)
		{
			this.MarriedHero = marriedHero;
			this.MarriedTo = marriedTo;
		}

		// Token: 0x06002A7B RID: 10875 RVA: 0x000B56E6 File Offset: 0x000B38E6
		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		// Token: 0x06002A7C RID: 10876 RVA: 0x000B56F4 File Offset: 0x000B38F4
		public TextObject GetNotificationText()
		{
			TextObject textObject = GameTexts.FindText("str_hero_married_hero", null);
			StringHelpers.SetCharacterProperties("MARRIED_TO", this.MarriedTo.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("MARRIED_HERO", this.MarriedHero.CharacterObject, textObject, false);
			return textObject;
		}

		// Token: 0x06002A7D RID: 10877 RVA: 0x000B573E File Offset: 0x000B393E
		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.MarriedHero || obj == this.MarriedTo;
		}

		// Token: 0x06002A7E RID: 10878 RVA: 0x000B575E File Offset: 0x000B395E
		public TextObject GetEncyclopediaText()
		{
			return this.GetNotificationText();
		}

		// Token: 0x04000CBF RID: 3263
		[SaveableField(130)]
		public readonly Hero MarriedHero;

		// Token: 0x04000CC0 RID: 3264
		[SaveableField(131)]
		public readonly Hero MarriedTo;
	}
}
