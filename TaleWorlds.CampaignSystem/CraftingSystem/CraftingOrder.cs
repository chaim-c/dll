using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CampaignBehaviors;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CraftingSystem
{
	// Token: 0x020001E2 RID: 482
	public class CraftingOrder : ITrackableCampaignObject, ITrackableBase
	{
		// Token: 0x06001D5E RID: 7518 RVA: 0x00084490 File Offset: 0x00082690
		internal static void AutoGeneratedStaticCollectObjectsCraftingOrder(object o, List<object> collectedObjects)
		{
			((CraftingOrder)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06001D5F RID: 7519 RVA: 0x0008449E File Offset: 0x0008269E
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.PreCraftedWeaponDesignItem);
			collectedObjects.Add(this.OrderOwner);
			collectedObjects.Add(this._weaponDesignTemplate);
			collectedObjects.Add(this._preCraftedWeaponDesignItemData);
		}

		// Token: 0x06001D60 RID: 7520 RVA: 0x000844D0 File Offset: 0x000826D0
		internal static object AutoGeneratedGetMemberValueBaseGoldReward(object o)
		{
			return ((CraftingOrder)o).BaseGoldReward;
		}

		// Token: 0x06001D61 RID: 7521 RVA: 0x000844E2 File Offset: 0x000826E2
		internal static object AutoGeneratedGetMemberValueOrderDifficulty(object o)
		{
			return ((CraftingOrder)o).OrderDifficulty;
		}

		// Token: 0x06001D62 RID: 7522 RVA: 0x000844F4 File Offset: 0x000826F4
		internal static object AutoGeneratedGetMemberValuePreCraftedWeaponDesignItem(object o)
		{
			return ((CraftingOrder)o).PreCraftedWeaponDesignItem;
		}

		// Token: 0x06001D63 RID: 7523 RVA: 0x00084501 File Offset: 0x00082701
		internal static object AutoGeneratedGetMemberValueOrderOwner(object o)
		{
			return ((CraftingOrder)o).OrderOwner;
		}

		// Token: 0x06001D64 RID: 7524 RVA: 0x0008450E File Offset: 0x0008270E
		internal static object AutoGeneratedGetMemberValueDifficultyLevel(object o)
		{
			return ((CraftingOrder)o).DifficultyLevel;
		}

		// Token: 0x06001D65 RID: 7525 RVA: 0x00084520 File Offset: 0x00082720
		internal static object AutoGeneratedGetMemberValue_weaponDesignTemplate(object o)
		{
			return ((CraftingOrder)o)._weaponDesignTemplate;
		}

		// Token: 0x06001D66 RID: 7526 RVA: 0x0008452D File Offset: 0x0008272D
		internal static object AutoGeneratedGetMemberValue_preCraftedWeaponDesignItemData(object o)
		{
			return ((CraftingOrder)o)._preCraftedWeaponDesignItemData;
		}

		// Token: 0x17000774 RID: 1908
		// (get) Token: 0x06001D67 RID: 7527 RVA: 0x0008453A File Offset: 0x0008273A
		public bool IsLordOrder
		{
			get
			{
				return this.OrderOwner.IsLord;
			}
		}

		// Token: 0x06001D68 RID: 7528 RVA: 0x00084548 File Offset: 0x00082748
		public CraftingOrder(Hero orderOwner, float orderDifficulty, WeaponDesign weaponDesignTemplate, CraftingTemplate template, int difficultyLevel = -1)
		{
			this.OrderOwner = orderOwner;
			this.OrderDifficulty = orderDifficulty;
			this.DifficultyLevel = difficultyLevel;
			this._weaponDesignTemplate = weaponDesignTemplate;
			Crafting.GenerateItem(weaponDesignTemplate, TextObject.Empty, orderOwner.Culture, template.ItemModifierGroup, ref this.PreCraftedWeaponDesignItem);
			if (this.PreCraftedWeaponDesignItem == null)
			{
				this.PreCraftedWeaponDesignItem = DefaultItems.Trash;
			}
			this._preCraftedWeaponDesignItemData = new CraftingCampaignBehavior.CraftedItemInitializationData(weaponDesignTemplate, this.PreCraftedWeaponDesignItem.Name, orderOwner.Culture);
			int theoreticalMaxItemMarketValue = Campaign.Current.Models.TradeItemPriceFactorModel.GetTheoreticalMaxItemMarketValue(this.PreCraftedWeaponDesignItem);
			this.BaseGoldReward = (int)((float)theoreticalMaxItemMarketValue + (float)theoreticalMaxItemMarketValue * MBRandom.RandomFloatRanged(-0.1f, 0.1f));
		}

		// Token: 0x06001D69 RID: 7529 RVA: 0x00084600 File Offset: 0x00082800
		public void InitializeCraftingOrderOnLoad()
		{
			this.PreCraftedWeaponDesignItem = Crafting.InitializePreCraftedWeaponOnLoad(this.PreCraftedWeaponDesignItem, this._preCraftedWeaponDesignItemData.CraftedData, this._preCraftedWeaponDesignItemData.ItemName, this._preCraftedWeaponDesignItemData.Culture);
			if (this.PreCraftedWeaponDesignItem != null)
			{
				this.PreCraftedWeaponDesignItem.IsReady = true;
			}
		}

		// Token: 0x06001D6A RID: 7530 RVA: 0x00084654 File Offset: 0x00082854
		public bool IsPreCraftedWeaponDesignValid()
		{
			if (this._preCraftedWeaponDesignItemData.CraftedData.Template.BuildOrders == null)
			{
				return false;
			}
			foreach (PieceData pieceData in this._preCraftedWeaponDesignItemData.CraftedData.Template.BuildOrders)
			{
				bool flag = false;
				foreach (WeaponDesignElement weaponDesignElement in this._preCraftedWeaponDesignItemData.CraftedData.UsedPieces)
				{
					if (pieceData.PieceType == weaponDesignElement.CraftingPiece.PieceType && weaponDesignElement.IsValid)
					{
						flag = true;
					}
				}
				if (!flag)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06001D6B RID: 7531 RVA: 0x000846FC File Offset: 0x000828FC
		public WeaponComponentData GetStatWeapon()
		{
			if (this.PreCraftedWeaponDesignItem.Weapons.Count > 1)
			{
				string stringId = this.PreCraftedWeaponDesignItem.WeaponDesign.Template.StringId;
				string text = "";
				if (stringId == "TwoHandedSword")
				{
					text = "TwoHandedSword";
				}
				else if (stringId == "Dagger")
				{
					text = "Dagger";
				}
				else if (stringId == "ThrowingKnife")
				{
					text = "ThrowingKnife";
				}
				else if (stringId == "TwoHandedAxe")
				{
					text = "TwoHandedAxe";
				}
				else if (stringId == "ThrowingAxe")
				{
					text = "ThrowingAxe";
				}
				else if (stringId == "TwoHandedPolearm")
				{
					text = "TwoHandedPolearm";
				}
				else if (stringId == "Javelin")
				{
					text = "Javelin";
				}
				if (!text.IsEmpty<char>())
				{
					foreach (WeaponComponentData weaponComponentData in this.PreCraftedWeaponDesignItem.Weapons)
					{
						if (weaponComponentData.WeaponDescriptionId == text || (text == "TwoHandedPolearm" && (weaponComponentData.WeaponDescriptionId == "TwoHandedPolearm_Couchable" || weaponComponentData.WeaponDescriptionId == "TwoHandedPolearm_Bracing")))
						{
							return weaponComponentData;
						}
					}
				}
			}
			return this.PreCraftedWeaponDesignItem.PrimaryWeapon;
		}

		// Token: 0x06001D6C RID: 7532 RVA: 0x0008486C File Offset: 0x00082A6C
		public bool IsOrderAvailableForHero(Hero hero)
		{
			return (float)(hero.GetSkillValue(DefaultSkills.Crafting) + 50) >= this.OrderDifficulty;
		}

		// Token: 0x06001D6D RID: 7533 RVA: 0x00084888 File Offset: 0x00082A88
		public bool CanHeroCompleteOrder(Hero hero, ItemObject craftDesignItem)
		{
			return true;
		}

		// Token: 0x06001D6E RID: 7534 RVA: 0x0008488C File Offset: 0x00082A8C
		public float GetOrderExperience(ItemObject craftedItem, ItemModifier itemModifier)
		{
			int num = (int)(this.PreCraftedWeaponDesignItem.Tier + 1);
			int num2 = (int)(craftedItem.Tier + 1);
			float num3 = MathF.Pow(3f, (float)(num2 - num));
			num3 = MathF.Clamp(num3, 0f, 1f);
			float num4 = (float)Campaign.Current.Models.TradeItemPriceFactorModel.GetTheoreticalMaxItemMarketValue(this.PreCraftedWeaponDesignItem) * 0.25f;
			float num5;
			float num6;
			bool flag;
			bool flag2;
			this.CheckForBonusesAndPenalties(craftedItem, itemModifier, out num5, out num6, out flag, out flag2);
			if (num5 < num6 || !flag || !flag2)
			{
				num4 = num4 * 0.5f * num3;
			}
			return num4;
		}

		// Token: 0x06001D6F RID: 7535 RVA: 0x0008491C File Offset: 0x00082B1C
		public void CheckForBonusesAndPenalties(ItemObject craftedItem, ItemModifier itemModifier, out float craftedStatsSum, out float requiredStatsSum, out bool thrustDamageCheck, out bool swingDamageCheck)
		{
			List<CraftingStatData> list = null;
			WeaponComponentData weaponComponentData;
			list = this.GetStatDataForItem(this.PreCraftedWeaponDesignItem, out weaponComponentData);
			WeaponComponentData weaponComponentData2;
			List<CraftingStatData> list2 = this.GetStatDataForItem(craftedItem, out weaponComponentData2);
			swingDamageCheck = true;
			thrustDamageCheck = true;
			if (weaponComponentData.SwingDamageType != DamageTypes.Invalid && weaponComponentData.SwingDamageType != weaponComponentData2.SwingDamageType)
			{
				swingDamageCheck = false;
			}
			if (weaponComponentData.ThrustDamageType != DamageTypes.Invalid && weaponComponentData.ThrustDamageType != weaponComponentData2.ThrustDamageType)
			{
				thrustDamageCheck = false;
			}
			requiredStatsSum = 0f;
			craftedStatsSum = 0f;
			if (itemModifier != null)
			{
				List<CraftingStatData> list3 = new List<CraftingStatData>();
				foreach (CraftingStatData craftingStatData in list2)
				{
					float curValue = craftingStatData.CurValue;
					if (craftingStatData.Type == CraftingTemplate.CraftingStatTypes.SwingDamage)
					{
						curValue = (float)itemModifier.ModifyDamage((int)craftingStatData.CurValue);
					}
					else if (craftingStatData.Type == CraftingTemplate.CraftingStatTypes.SwingSpeed)
					{
						curValue = (float)itemModifier.ModifySpeed((int)craftingStatData.CurValue);
					}
					else if (craftingStatData.Type == CraftingTemplate.CraftingStatTypes.ThrustDamage)
					{
						curValue = (float)itemModifier.ModifyDamage((int)craftingStatData.CurValue);
					}
					else if (craftingStatData.Type == CraftingTemplate.CraftingStatTypes.ThrustSpeed)
					{
						curValue = (float)itemModifier.ModifySpeed((int)craftingStatData.CurValue);
					}
					else if (craftingStatData.Type == CraftingTemplate.CraftingStatTypes.Handling)
					{
						curValue = (float)itemModifier.ModifySpeed((int)craftingStatData.CurValue);
					}
					list3.Add(new CraftingStatData(craftingStatData.DescriptionText, curValue, craftingStatData.MaxValue, craftingStatData.Type, craftingStatData.DamageType));
				}
				list2 = list3;
			}
			using (List<CraftingStatData>.Enumerator enumerator = list.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					CraftingStatData orderStat = enumerator.Current;
					if (orderStat.IsValid)
					{
						CraftingStatData craftingStatData2 = list2.FirstOrDefault((CraftingStatData x) => x.Type == orderStat.Type);
						if (craftingStatData2.CurValue != orderStat.CurValue)
						{
							requiredStatsSum += orderStat.CurValue;
							craftedStatsSum += craftingStatData2.CurValue;
						}
					}
				}
			}
		}

		// Token: 0x06001D70 RID: 7536 RVA: 0x00084B44 File Offset: 0x00082D44
		public List<CraftingStatData> GetStatDataForItem(ItemObject itemObject, out WeaponComponentData weapon)
		{
			List<CraftingStatData> list = new List<CraftingStatData>();
			weapon = null;
			WeaponComponentData statWeapon = this.GetStatWeapon();
			int usageIndex = -1;
			for (int i = 0; i < itemObject.Weapons.Count; i++)
			{
				if (statWeapon.WeaponDescriptionId == itemObject.Weapons[i].WeaponDescriptionId)
				{
					weapon = itemObject.Weapons[i];
					usageIndex = i;
					break;
				}
			}
			if (weapon == null && this.PreCraftedWeaponDesignItem.Weapons.Count > 1)
			{
				for (int j = 0; j < this.PreCraftedWeaponDesignItem.Weapons.Count; j++)
				{
					if (itemObject.PrimaryWeapon.WeaponDescriptionId == this.PreCraftedWeaponDesignItem.Weapons[j].WeaponDescriptionId)
					{
						weapon = itemObject.PrimaryWeapon;
						usageIndex = 1;
						break;
					}
				}
			}
			bool flag = weapon.ThrustDamageType != DamageTypes.Invalid;
			bool flag2 = weapon.SwingDamageType != DamageTypes.Invalid;
			foreach (KeyValuePair<CraftingTemplate.CraftingStatTypes, float> keyValuePair in itemObject.WeaponDesign.Template.GetStatDatas(usageIndex, weapon.ThrustDamageType, weapon.SwingDamageType))
			{
				TextObject textObject = GameTexts.FindText("str_crafting_stat", keyValuePair.Key.ToString());
				if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.ThrustSpeed && flag)
				{
					list.Add(new CraftingStatData(textObject, (float)weapon.ThrustSpeed, keyValuePair.Value, keyValuePair.Key, DamageTypes.Invalid));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.SwingSpeed && flag2)
				{
					list.Add(new CraftingStatData(textObject, (float)weapon.SwingSpeed, keyValuePair.Value, keyValuePair.Key, DamageTypes.Invalid));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.ThrustDamage && flag)
				{
					textObject.SetTextVariable("THRUST_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.ThrustDamageType).ToString()));
					list.Add(new CraftingStatData(textObject, (float)weapon.ThrustDamage, keyValuePair.Value, keyValuePair.Key, weapon.ThrustDamageType));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.SwingDamage && flag2)
				{
					textObject.SetTextVariable("SWING_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.SwingDamageType).ToString()));
					list.Add(new CraftingStatData(textObject, (float)weapon.SwingDamage, keyValuePair.Value, keyValuePair.Key, weapon.SwingDamageType));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.Handling)
				{
					list.Add(new CraftingStatData(textObject, (float)weapon.Handling, keyValuePair.Value, keyValuePair.Key, DamageTypes.Invalid));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.MissileDamage)
				{
					DamageTypes damageType = DamageTypes.Invalid;
					if (weapon.ThrustDamageType != DamageTypes.Invalid)
					{
						damageType = weapon.ThrustDamageType;
						textObject.SetTextVariable("THRUST_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.ThrustDamageType).ToString()));
					}
					else if (weapon.SwingDamageType != DamageTypes.Invalid)
					{
						damageType = weapon.SwingDamageType;
						textObject.SetTextVariable("SWING_DAMAGE_TYPE", GameTexts.FindText("str_inventory_dmg_type", ((int)weapon.SwingDamageType).ToString()));
					}
					else
					{
						Debug.FailedAssert("Missile damage type is missing.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CraftingSystem\\CraftingOrder.cs", "GetStatDataForItem", 365);
					}
					list.Add(new CraftingStatData(textObject, (float)weapon.MissileDamage, keyValuePair.Value, keyValuePair.Key, damageType));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.MissileSpeed)
				{
					list.Add(new CraftingStatData(textObject, (float)weapon.MissileSpeed, keyValuePair.Value, keyValuePair.Key, DamageTypes.Invalid));
				}
				else if (statWeapon.IsRangedWeapon && keyValuePair.Key == CraftingTemplate.CraftingStatTypes.Accuracy)
				{
					list.Add(new CraftingStatData(textObject, (float)weapon.Accuracy, keyValuePair.Value, keyValuePair.Key, DamageTypes.Invalid));
				}
				else if (keyValuePair.Key == CraftingTemplate.CraftingStatTypes.WeaponReach)
				{
					list.Add(new CraftingStatData(textObject, (float)weapon.WeaponLength, keyValuePair.Value, keyValuePair.Key, DamageTypes.Invalid));
				}
			}
			return list;
		}

		// Token: 0x06001D71 RID: 7537 RVA: 0x00084F94 File Offset: 0x00083194
		public TextObject GetName()
		{
			return this.PreCraftedWeaponDesignItem.Name;
		}

		// Token: 0x06001D72 RID: 7538 RVA: 0x00084FA4 File Offset: 0x000831A4
		public Vec3 GetPosition()
		{
			float z = 0f;
			Campaign.Current.MapSceneWrapper.GetHeightAtPoint(this.OrderOwner.CurrentSettlement.Position2D, ref z);
			return new Vec3(this.OrderOwner.CurrentSettlement.Position2D.x, this.OrderOwner.CurrentSettlement.Position2D.y, z, -1f);
		}

		// Token: 0x06001D73 RID: 7539 RVA: 0x00085010 File Offset: 0x00083210
		public float GetTrackDistanceToMainAgent()
		{
			return this.GetPosition().Distance(Hero.MainHero.GetPosition());
		}

		// Token: 0x06001D74 RID: 7540 RVA: 0x00085035 File Offset: 0x00083235
		public bool CheckTracked(BasicCharacterObject basicCharacter)
		{
			return false;
		}

		// Token: 0x040008FC RID: 2300
		private const string TwoHandedSwordCraftingTemplateId = "TwoHandedSword";

		// Token: 0x040008FD RID: 2301
		private const string DaggerCraftingTemplateId = "Dagger";

		// Token: 0x040008FE RID: 2302
		private const string ThrowingKnifeCraftingTemplateId = "ThrowingKnife";

		// Token: 0x040008FF RID: 2303
		private const string TwoHandedAxeCraftingTemplateId = "TwoHandedAxe";

		// Token: 0x04000900 RID: 2304
		private const string ThrowingAxeCraftingTemplateId = "ThrowingAxe";

		// Token: 0x04000901 RID: 2305
		private const string TwoHandedPolearmCraftingTemplateId = "TwoHandedPolearm";

		// Token: 0x04000902 RID: 2306
		private const string JavelinCraftingTemplateId = "Javelin";

		// Token: 0x04000903 RID: 2307
		private const string TwoHandedPolearmUsageCouchableId = "TwoHandedPolearm_Couchable";

		// Token: 0x04000904 RID: 2308
		private const string TwoHandedPolearmUsageBracingId = "TwoHandedPolearm_Bracing";

		// Token: 0x04000905 RID: 2309
		private const int CraftingAttemptDifficultyGap = 50;

		// Token: 0x04000906 RID: 2310
		[SaveableField(10)]
		public readonly int BaseGoldReward;

		// Token: 0x04000907 RID: 2311
		[SaveableField(20)]
		public readonly float OrderDifficulty;

		// Token: 0x04000908 RID: 2312
		[SaveableField(30)]
		private readonly WeaponDesign _weaponDesignTemplate;

		// Token: 0x04000909 RID: 2313
		[SaveableField(40)]
		public ItemObject PreCraftedWeaponDesignItem;

		// Token: 0x0400090A RID: 2314
		[SaveableField(50)]
		private readonly CraftingCampaignBehavior.CraftedItemInitializationData _preCraftedWeaponDesignItemData;

		// Token: 0x0400090B RID: 2315
		[SaveableField(60)]
		public Hero OrderOwner;

		// Token: 0x0400090C RID: 2316
		[SaveableField(70)]
		public readonly int DifficultyLevel;
	}
}
