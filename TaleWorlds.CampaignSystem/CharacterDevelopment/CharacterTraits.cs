using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	// Token: 0x02000346 RID: 838
	public class CharacterTraits : PropertyOwner<TraitObject>
	{
		// Token: 0x06002F30 RID: 12080 RVA: 0x000C294C File Offset: 0x000C0B4C
		internal static void AutoGeneratedStaticCollectObjectsCharacterTraits(object o, List<object> collectedObjects)
		{
			((CharacterTraits)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F31 RID: 12081 RVA: 0x000C295A File Offset: 0x000C0B5A
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F32 RID: 12082 RVA: 0x000C2963 File Offset: 0x000C0B63
		public CharacterTraits(CharacterTraits propertyOwner) : base(propertyOwner)
		{
		}

		// Token: 0x06002F33 RID: 12083 RVA: 0x000C296C File Offset: 0x000C0B6C
		public CharacterTraits()
		{
		}

		// Token: 0x17000B49 RID: 2889
		// (get) Token: 0x06002F34 RID: 12084 RVA: 0x000C2974 File Offset: 0x000C0B74
		public int Mercy
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Mercy);
			}
		}

		// Token: 0x17000B4A RID: 2890
		// (get) Token: 0x06002F35 RID: 12085 RVA: 0x000C2981 File Offset: 0x000C0B81
		public int Valor
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Valor);
			}
		}

		// Token: 0x17000B4B RID: 2891
		// (get) Token: 0x06002F36 RID: 12086 RVA: 0x000C298E File Offset: 0x000C0B8E
		public int Honor
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Honor);
			}
		}

		// Token: 0x17000B4C RID: 2892
		// (get) Token: 0x06002F37 RID: 12087 RVA: 0x000C299B File Offset: 0x000C0B9B
		public int Generosity
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Generosity);
			}
		}

		// Token: 0x17000B4D RID: 2893
		// (get) Token: 0x06002F38 RID: 12088 RVA: 0x000C29A8 File Offset: 0x000C0BA8
		public int Calculating
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Calculating);
			}
		}

		// Token: 0x06002F39 RID: 12089 RVA: 0x000C29B8 File Offset: 0x000C0BB8
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			this.Initialize();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.NodeType != XmlNodeType.Comment)
				{
					XmlAttributeCollection attributes = xmlNode.Attributes;
					string value = attributes["id"].Value;
					string value2 = attributes["value"].Value;
					TraitObject @object = Game.Current.ObjectManager.GetObject<TraitObject>(value);
					if (@object != null)
					{
						int value3 = (value2 != null) ? Convert.ToInt32(value2) : 1;
						base.SetPropertyValue(@object, value3);
					}
				}
			}
			foreach (object obj2 in node.ChildNodes)
			{
				XmlNode xmlNode2 = (XmlNode)obj2;
				if (xmlNode2.NodeType != XmlNodeType.Comment)
				{
					string text = xmlNode2.Name;
					int value4 = 1;
					if (text == "Trait")
					{
						text = null;
						if (xmlNode2.Attributes != null)
						{
							XmlAttribute xmlAttribute = xmlNode2.Attributes["id"];
							if (xmlAttribute != null)
							{
								text = xmlAttribute.InnerText;
							}
						}
					}
					if (text != null)
					{
						TraitObject object2 = Game.Current.ObjectManager.GetObject<TraitObject>(text);
						if (object2 != null)
						{
							XmlAttribute xmlAttribute2 = xmlNode2.Attributes["value"];
							if (xmlAttribute2 != null)
							{
								string value5 = xmlAttribute2.Value;
								value4 = ((value5 != null) ? Convert.ToInt32(value5) : 1);
							}
							base.SetPropertyValue(object2, value4);
						}
					}
				}
			}
		}

		// Token: 0x06002F3A RID: 12090 RVA: 0x000C2B64 File Offset: 0x000C0D64
		protected override void AfterLoad()
		{
			if (MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("e1.8.1.0", 45697))
			{
				List<KeyValuePair<TraitObject, int>> list = this._attributes.ToMBList<KeyValuePair<TraitObject, int>>();
				int num = 0;
				foreach (KeyValuePair<TraitObject, int> keyValuePair in list)
				{
					if (keyValuePair.Key.StringId == "DesertScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "WoodsScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "HillScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "MarshesLore")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "SteppeScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
				}
				if (num > 0)
				{
					this._attributes.Add(DefaultTraits.ScoutSkills, num);
				}
				List<string> source = new List<string>
				{
					"Engineer",
					"SergeantCommandSkills",
					"Manager",
					"Surgeon",
					"ScoutSkills",
					"Commander",
					"Politician",
					"RogueSkills",
					"Blacksmith"
				};
				foreach (KeyValuePair<TraitObject, int> keyValuePair2 in this._attributes.ToMBList<KeyValuePair<TraitObject, int>>())
				{
					if (source.ContainsQ(keyValuePair2.Key.StringId) && keyValuePair2.Value > 0)
					{
						this._attributes[keyValuePair2.Key] = keyValuePair2.Value * 2;
					}
				}
			}
		}

		// Token: 0x04000E06 RID: 3590
		public const int MaxTraitValue = 20;
	}
}
