using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	// Token: 0x02000348 RID: 840
	public class HeroDeveloper : PropertyOwnerF<PropertyObject>, IHeroDeveloper
	{
		// Token: 0x06002F43 RID: 12099 RVA: 0x000C2F38 File Offset: 0x000C1138
		internal static void AutoGeneratedStaticCollectObjectsHeroDeveloper(object o, List<object> collectedObjects)
		{
			((HeroDeveloper)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F44 RID: 12100 RVA: 0x000C2F46 File Offset: 0x000C1146
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._newFocuses);
			collectedObjects.Add(this.Hero);
		}

		// Token: 0x06002F45 RID: 12101 RVA: 0x000C2F67 File Offset: 0x000C1167
		internal static object AutoGeneratedGetMemberValueUnspentFocusPoints(object o)
		{
			return ((HeroDeveloper)o).UnspentFocusPoints;
		}

		// Token: 0x06002F46 RID: 12102 RVA: 0x000C2F79 File Offset: 0x000C1179
		internal static object AutoGeneratedGetMemberValueUnspentAttributePoints(object o)
		{
			return ((HeroDeveloper)o).UnspentAttributePoints;
		}

		// Token: 0x06002F47 RID: 12103 RVA: 0x000C2F8B File Offset: 0x000C118B
		internal static object AutoGeneratedGetMemberValueHero(object o)
		{
			return ((HeroDeveloper)o).Hero;
		}

		// Token: 0x06002F48 RID: 12104 RVA: 0x000C2F98 File Offset: 0x000C1198
		internal static object AutoGeneratedGetMemberValue_newFocuses(object o)
		{
			return ((HeroDeveloper)o)._newFocuses;
		}

		// Token: 0x06002F49 RID: 12105 RVA: 0x000C2FA5 File Offset: 0x000C11A5
		internal static object AutoGeneratedGetMemberValue_totalXp(object o)
		{
			return ((HeroDeveloper)o)._totalXp;
		}

		// Token: 0x17000B4F RID: 2895
		// (get) Token: 0x06002F4A RID: 12106 RVA: 0x000C2FB7 File Offset: 0x000C11B7
		// (set) Token: 0x06002F4B RID: 12107 RVA: 0x000C2FBF File Offset: 0x000C11BF
		[SaveableProperty(101)]
		public int UnspentFocusPoints { get; set; }

		// Token: 0x17000B50 RID: 2896
		// (get) Token: 0x06002F4C RID: 12108 RVA: 0x000C2FC8 File Offset: 0x000C11C8
		// (set) Token: 0x06002F4D RID: 12109 RVA: 0x000C2FD0 File Offset: 0x000C11D0
		[SaveableProperty(102)]
		public int UnspentAttributePoints { get; set; }

		// Token: 0x17000B51 RID: 2897
		// (get) Token: 0x06002F4E RID: 12110 RVA: 0x000C2FD9 File Offset: 0x000C11D9
		public bool IsDeveloperInitialized
		{
			get
			{
				return this.Hero != null;
			}
		}

		// Token: 0x17000B52 RID: 2898
		// (get) Token: 0x06002F4F RID: 12111 RVA: 0x000C2FE4 File Offset: 0x000C11E4
		// (set) Token: 0x06002F50 RID: 12112 RVA: 0x000C2FEC File Offset: 0x000C11EC
		[SaveableProperty(103)]
		public Hero Hero { get; private set; }

		// Token: 0x17000B53 RID: 2899
		// (get) Token: 0x06002F51 RID: 12113 RVA: 0x000C2FF5 File Offset: 0x000C11F5
		// (set) Token: 0x06002F52 RID: 12114 RVA: 0x000C2FFD File Offset: 0x000C11FD
		public int TotalXp
		{
			get
			{
				return this._totalXp;
			}
			private set
			{
				this._totalXp = value;
			}
		}

		// Token: 0x06002F53 RID: 12115 RVA: 0x000C3008 File Offset: 0x000C1208
		public int GetSkillXpProgress(SkillObject skill)
		{
			int skillValue = this.Hero.GetSkillValue(skill);
			return MathF.Round(base.GetPropertyValue(skill)) - Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(skillValue);
		}

		// Token: 0x06002F54 RID: 12116 RVA: 0x000C3044 File Offset: 0x000C1244
		internal HeroDeveloper(Hero hero)
		{
			this.Hero = hero;
			this._newFocuses = new CharacterSkills();
		}

		// Token: 0x06002F55 RID: 12117 RVA: 0x000C305E File Offset: 0x000C125E
		public void ClearUnspentPoints()
		{
			this.UnspentAttributePoints = 0;
			this.UnspentFocusPoints = 0;
		}

		// Token: 0x06002F56 RID: 12118 RVA: 0x000C3070 File Offset: 0x000C1270
		public void ClearHero()
		{
			base.ClearAllProperty();
			this.ClearFocuses();
			this.Hero.ClearAttributes();
			this.Hero.ClearSkills();
			this.Hero.ClearPerks();
			this.UnspentFocusPoints = 0;
			this.UnspentAttributePoints = 0;
			this.Hero.ClearTraits();
			this.ClearHeroLevel();
		}

		// Token: 0x06002F57 RID: 12119 RVA: 0x000C30C9 File Offset: 0x000C12C9
		public void InitializeHeroDeveloper(bool isByNaturalGrowth = false, CharacterObject template = null)
		{
			this.DeriveSkillsFromTraits(isByNaturalGrowth, template);
			this.SetInitialLevelFromSkills();
			this.CheckLevel(false);
			this.SetupDefaultPoints();
			this.SetInitialFocusAndAttributePoints();
			if (!this.Hero.IsChild)
			{
				this.DevelopCharacterStats();
			}
		}

		// Token: 0x06002F58 RID: 12120 RVA: 0x000C30FF File Offset: 0x000C12FF
		public void DevelopCharacterStats()
		{
			if (this.UnspentAttributePoints > 0)
			{
				this.DistributeUnspentAttributePoints();
			}
			if (this.UnspentFocusPoints > 0)
			{
				this.DistributeUnspentFocusPoints();
			}
			this.SelectPerks();
		}

		// Token: 0x06002F59 RID: 12121 RVA: 0x000C3128 File Offset: 0x000C1328
		public int GetTotalSkillPoints()
		{
			int num = 0;
			foreach (SkillObject skill in Skills.All)
			{
				num += this.Hero.GetSkillValue(skill);
			}
			return num;
		}

		// Token: 0x06002F5A RID: 12122 RVA: 0x000C3188 File Offset: 0x000C1388
		public void ChangeSkillLevel(SkillObject skill, int changeAmount, bool shouldNotify = true)
		{
			int skillValue = this.Hero.GetSkillValue(skill);
			int num = skillValue + changeAmount;
			float num2 = 0f;
			float propertyValue = base.GetPropertyValue(skill);
			num2 -= propertyValue - (float)Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(skillValue);
			for (int i = skillValue + 1; i <= num; i++)
			{
				num2 += (float)(Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(i) - Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(i - 1));
			}
			this.AddSkillXp(skill, num2 + 1f, false, shouldNotify);
		}

		// Token: 0x06002F5B RID: 12123 RVA: 0x000C3224 File Offset: 0x000C1424
		private void DeriveSkillsFromTraits(bool isByNaturalGrowth = false, CharacterObject template = null)
		{
			foreach (Tuple<SkillObject, int> tuple in Campaign.Current.Models.CharacterDevelopmentModel.GetSkillsDerivedFromTraits(this.Hero, template, isByNaturalGrowth))
			{
				SkillObject item = tuple.Item1;
				int item2 = tuple.Item2;
				if (this.Hero.GetSkillValue(item) < item2)
				{
					this.SetInitialSkillLevel(item, item2);
				}
			}
		}

		// Token: 0x06002F5C RID: 12124 RVA: 0x000C32AC File Offset: 0x000C14AC
		public void SetInitialSkillLevel(SkillObject skill, int newSkillValue)
		{
			int xpRequiredForSkillLevel = Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(newSkillValue);
			base.SetPropertyValue(skill, (float)xpRequiredForSkillLevel);
			this.Hero.SetSkillValue(skill, newSkillValue);
			this.InitializeSkillXp(skill);
		}

		// Token: 0x06002F5D RID: 12125 RVA: 0x000C32EC File Offset: 0x000C14EC
		public void AddSkillXp(SkillObject skill, float rawXp, bool isAffectedByFocusFactor = true, bool shouldNotify = true)
		{
			if (rawXp <= 0f)
			{
				return;
			}
			if (isAffectedByFocusFactor)
			{
				this.GainRawXp(rawXp, shouldNotify);
			}
			float num = rawXp * Campaign.Current.Models.GenericXpModel.GetXpMultiplier(this.Hero);
			if (num <= 0f)
			{
				return;
			}
			float propertyValue = base.GetPropertyValue(skill);
			float focusFactor = this.GetFocusFactor(skill);
			float num2 = isAffectedByFocusFactor ? (num * focusFactor) : num;
			float num3 = propertyValue + num2;
			int skillLevelChange = Campaign.Current.Models.CharacterDevelopmentModel.GetSkillLevelChange(this.Hero, skill, num3);
			base.SetPropertyValue(skill, num3);
			if (skillLevelChange > 0)
			{
				this.ChangeSkillLevelFromXpChange(skill, skillLevelChange, shouldNotify);
			}
		}

		// Token: 0x06002F5E RID: 12126 RVA: 0x000C3388 File Offset: 0x000C1588
		private void GainRawXp(float rawXp, bool shouldNotify)
		{
			if ((long)this._totalXp + (long)MathF.Round(rawXp) < (long)Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint())
			{
				this._totalXp += MathF.Round(rawXp);
				this.CheckLevel(shouldNotify);
				return;
			}
			this._totalXp = Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint();
		}

		// Token: 0x06002F5F RID: 12127 RVA: 0x000C33F0 File Offset: 0x000C15F0
		public float GetFocusFactor(SkillObject skill)
		{
			return Campaign.Current.Models.CharacterDevelopmentModel.CalculateLearningRate(this.Hero, skill);
		}

		// Token: 0x06002F60 RID: 12128 RVA: 0x000C3410 File Offset: 0x000C1610
		private void ChangeSkillLevelFromXpChange(SkillObject skill, int changeAmount, bool shouldNotify = false)
		{
			if (changeAmount != 0)
			{
				int value = this.Hero.GetSkillValue(skill) + changeAmount;
				this.Hero.SetSkillValue(skill, value);
				CampaignEventDispatcher.Instance.OnHeroGainedSkill(this.Hero, skill, changeAmount, shouldNotify);
			}
		}

		// Token: 0x06002F61 RID: 12129 RVA: 0x000C344F File Offset: 0x000C164F
		void IHeroDeveloper.AfterLoad()
		{
			base.AfterLoadInternal();
		}

		// Token: 0x06002F62 RID: 12130 RVA: 0x000C3458 File Offset: 0x000C1658
		internal void CheckLevel(bool shouldNotify = false)
		{
			bool flag = false;
			int totalXp = this._totalXp;
			while (!flag)
			{
				int xpRequiredForLevel = this.GetXpRequiredForLevel(this.Hero.Level + 1);
				if (xpRequiredForLevel != Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint() && totalXp >= xpRequiredForLevel)
				{
					this.Hero.Level++;
					this.OnGainLevel(shouldNotify);
				}
				else
				{
					flag = true;
				}
			}
		}

		// Token: 0x06002F63 RID: 12131 RVA: 0x000C34C0 File Offset: 0x000C16C0
		public void SetInitialLevel(int level)
		{
			int xpRequiredForLevel = this.GetXpRequiredForLevel(level);
			this.TotalXp = xpRequiredForLevel + 1;
		}

		// Token: 0x06002F64 RID: 12132 RVA: 0x000C34E0 File Offset: 0x000C16E0
		private void SetupDefaultPoints()
		{
			this.UnspentFocusPoints = (this.Hero.Level - 1) * Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsPerLevel + Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsAtStart;
			this.UnspentAttributePoints = (this.Hero.Level - 1) / Campaign.Current.Models.CharacterDevelopmentModel.LevelsPerAttributePoint + Campaign.Current.Models.CharacterDevelopmentModel.AttributePointsAtStart;
		}

		// Token: 0x06002F65 RID: 12133 RVA: 0x000C3568 File Offset: 0x000C1768
		private void SetInitialLevelFromSkills()
		{
			int b = (int)Skills.All.Sum((SkillObject s) => 2f * MathF.Pow((float)this.Hero.GetSkillValue(s), 2.2f)) - 2000;
			this.TotalXp = MathF.Max(1, b);
		}

		// Token: 0x06002F66 RID: 12134 RVA: 0x000C35A0 File Offset: 0x000C17A0
		private void SetInitialFocusAndAttributePoints()
		{
			foreach (CharacterAttribute characterAttribute in Attributes.All)
			{
				int attributeValue = this.Hero.GetAttributeValue(characterAttribute);
				this.UnspentAttributePoints -= attributeValue;
				if (attributeValue == 0)
				{
					this.AddAttribute(characterAttribute, 1, true);
				}
			}
			foreach (SkillObject skill in Skills.All)
			{
				this.UnspentFocusPoints -= this.GetFocus(skill);
				this.InitializeSkillXp(skill);
			}
		}

		// Token: 0x06002F67 RID: 12135 RVA: 0x000C366C File Offset: 0x000C186C
		private void DistributeUnspentAttributePoints()
		{
			while (this.UnspentAttributePoints > 0)
			{
				CharacterAttribute nextAttributeToUpgrade = Campaign.Current.Models.CharacterDevelopmentModel.GetNextAttributeToUpgrade(this.Hero);
				if (nextAttributeToUpgrade == null)
				{
					break;
				}
				this.AddAttribute(nextAttributeToUpgrade, 1, true);
			}
		}

		// Token: 0x06002F68 RID: 12136 RVA: 0x000C36AB File Offset: 0x000C18AB
		private void ClearHeroLevel()
		{
			this.Hero.Level = 0;
		}

		// Token: 0x06002F69 RID: 12137 RVA: 0x000C36B9 File Offset: 0x000C18B9
		public void AddPerk(PerkObject perk)
		{
			this.Hero.SetPerkValueInternal(perk, true);
		}

		// Token: 0x06002F6A RID: 12138 RVA: 0x000C36C8 File Offset: 0x000C18C8
		private void OnGainLevel(bool shouldNotify = true)
		{
			this.UnspentFocusPoints += Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsPerLevel;
			if (this.Hero.Level % Campaign.Current.Models.CharacterDevelopmentModel.LevelsPerAttributePoint == 0)
			{
				this.UnspentAttributePoints++;
			}
			CampaignEventDispatcher.Instance.OnHeroLevelledUp(this.Hero, shouldNotify);
		}

		// Token: 0x06002F6B RID: 12139 RVA: 0x000C3737 File Offset: 0x000C1937
		public int GetXpRequiredForLevel(int level)
		{
			return Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(level);
		}

		// Token: 0x06002F6C RID: 12140 RVA: 0x000C3750 File Offset: 0x000C1950
		public void RemoveAttribute(CharacterAttribute attrib, int changeAmount)
		{
			if (changeAmount == 0)
			{
				return;
			}
			int value = this.Hero.GetAttributeValue(attrib) - changeAmount;
			this.Hero.SetAttributeValueInternal(attrib, value);
		}

		// Token: 0x06002F6D RID: 12141 RVA: 0x000C3780 File Offset: 0x000C1980
		public void AddAttribute(CharacterAttribute attrib, int changeAmount, bool checkUnspentPoints = true)
		{
			if (changeAmount == 0)
			{
				return;
			}
			int attributeValue = this.Hero.GetAttributeValue(attrib);
			if (attributeValue + changeAmount <= Campaign.Current.Models.CharacterDevelopmentModel.MaxAttribute && (this.UnspentAttributePoints >= 1 || !checkUnspentPoints))
			{
				int value = attributeValue + changeAmount;
				this.Hero.SetAttributeValueInternal(attrib, value);
				if (checkUnspentPoints)
				{
					this.UnspentAttributePoints--;
				}
			}
		}

		// Token: 0x06002F6E RID: 12142 RVA: 0x000C37E6 File Offset: 0x000C19E6
		private void ClearFocuses()
		{
			this._newFocuses.ClearAllProperty();
		}

		// Token: 0x06002F6F RID: 12143 RVA: 0x000C37F4 File Offset: 0x000C19F4
		public void AddFocus(SkillObject skill, int changeAmount, bool checkUnspentFocusPoints = true)
		{
			int focus = this.GetFocus(skill);
			int requiredFocusPointsToAddFocus = this.GetRequiredFocusPointsToAddFocus(skill);
			int newAmount = focus + changeAmount;
			this.SetFocus(skill, newAmount);
			this.UnspentFocusPoints = (checkUnspentFocusPoints ? (this.UnspentFocusPoints - requiredFocusPointsToAddFocus) : this.UnspentFocusPoints);
		}

		// Token: 0x06002F70 RID: 12144 RVA: 0x000C3834 File Offset: 0x000C1A34
		public void RemoveFocus(SkillObject skill, int changeAmount)
		{
			int newAmount = this.GetFocus(skill) - changeAmount;
			this.SetFocus(skill, newAmount);
		}

		// Token: 0x06002F71 RID: 12145 RVA: 0x000C3853 File Offset: 0x000C1A53
		public bool CanAddFocusToSkill(SkillObject skill)
		{
			return this.GetFocus(skill) < Campaign.Current.Models.CharacterDevelopmentModel.MaxFocusPerSkill && this.UnspentFocusPoints >= this.GetRequiredFocusPointsToAddFocus(skill);
		}

		// Token: 0x06002F72 RID: 12146 RVA: 0x000C3886 File Offset: 0x000C1A86
		public int GetRequiredFocusPointsToAddFocus(SkillObject skill)
		{
			return 1;
		}

		// Token: 0x06002F73 RID: 12147 RVA: 0x000C3889 File Offset: 0x000C1A89
		private void SetFocus(SkillObject focus, int newAmount)
		{
			this._newFocuses.SetPropertyValue(focus, newAmount);
		}

		// Token: 0x06002F74 RID: 12148 RVA: 0x000C3898 File Offset: 0x000C1A98
		public int GetFocus(SkillObject skill)
		{
			return this._newFocuses.GetPropertyValue(skill);
		}

		// Token: 0x06002F75 RID: 12149 RVA: 0x000C38A8 File Offset: 0x000C1AA8
		private void DistributeUnspentFocusPoints()
		{
			while (this.UnspentFocusPoints > 0)
			{
				SkillObject nextSkillToAddFocus = Campaign.Current.Models.CharacterDevelopmentModel.GetNextSkillToAddFocus(this.Hero);
				if (nextSkillToAddFocus == null)
				{
					break;
				}
				this.AddFocus(nextSkillToAddFocus, 1, true);
			}
		}

		// Token: 0x06002F76 RID: 12150 RVA: 0x000C38E7 File Offset: 0x000C1AE7
		public bool GetPerkValue(PerkObject perk)
		{
			return this.Hero.GetPerkValue(perk);
		}

		// Token: 0x06002F77 RID: 12151 RVA: 0x000C38F8 File Offset: 0x000C1AF8
		private void SelectPerks()
		{
			foreach (PerkObject perkObject in PerkObject.All)
			{
				if ((float)this.Hero.GetSkillValue(perkObject.Skill) >= perkObject.RequiredSkillValue && !this.Hero.GetPerkValue(perkObject) && (perkObject.AlternativePerk == null || !this.Hero.GetPerkValue(perkObject.AlternativePerk)))
				{
					PerkObject nextPerkToChoose = Campaign.Current.Models.CharacterDevelopmentModel.GetNextPerkToChoose(this.Hero, perkObject);
					if (nextPerkToChoose != null)
					{
						this.AddPerk(nextPerkToChoose);
					}
				}
			}
		}

		// Token: 0x06002F78 RID: 12152 RVA: 0x000C39AC File Offset: 0x000C1BAC
		public void InitializeSkillXp(SkillObject skill)
		{
			int xpRequiredForSkillLevel = Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(this.Hero.GetSkillValue(skill));
			base.SetPropertyValue(skill, (float)xpRequiredForSkillLevel);
		}

		// Token: 0x06002F79 RID: 12153 RVA: 0x000C39E4 File Offset: 0x000C1BE4
		protected override void AfterLoad()
		{
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.6", 45697))
			{
				foreach (CharacterAttribute charAttribute in Attributes.All)
				{
					if (this.Hero.GetAttributeValue(charAttribute) == 0)
					{
						this.InitializeHeroDeveloper(false, null);
						break;
					}
				}
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0", 45697))
			{
				if (this.Hero.Age >= (float)Campaign.Current.Models.AgeModel.HeroComesOfAge && Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(this.Hero.Level) > this.TotalXp)
				{
					this.TotalXp = Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(this.Hero.Level);
					this.CheckLevel(false);
				}
				foreach (SkillObject skill in Skills.All)
				{
					if (this.GetSkillXpProgress(skill) < 0)
					{
						this.InitializeSkillXp(skill);
					}
				}
			}
		}

		// Token: 0x04000E08 RID: 3592
		[SaveableField(100)]
		private CharacterSkills _newFocuses;

		// Token: 0x04000E0C RID: 3596
		[SaveableField(130)]
		private int _totalXp;
	}
}
