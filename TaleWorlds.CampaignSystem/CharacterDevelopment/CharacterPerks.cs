using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	// Token: 0x02000345 RID: 837
	public class CharacterPerks : PropertyOwner<PerkObject>
	{
		// Token: 0x06002F2A RID: 12074 RVA: 0x000C2701 File Offset: 0x000C0901
		internal static void AutoGeneratedStaticCollectObjectsCharacterPerks(object o, List<object> collectedObjects)
		{
			((CharacterPerks)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F2B RID: 12075 RVA: 0x000C270F File Offset: 0x000C090F
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F2C RID: 12076 RVA: 0x000C2718 File Offset: 0x000C0918
		public CharacterPerks()
		{
		}

		// Token: 0x06002F2D RID: 12077 RVA: 0x000C2720 File Offset: 0x000C0920
		public CharacterPerks(CharacterPerks perks) : base(perks)
		{
		}

		// Token: 0x06002F2E RID: 12078 RVA: 0x000C272C File Offset: 0x000C092C
		public void ClearChangedPerks(Hero owner)
		{
			foreach (PerkObject perkObject in this._attributes.Keys.ToList<PerkObject>())
			{
				if (perkObject == null || perkObject.IsTrash || (float)owner.GetSkillValue(perkObject.Skill) < perkObject.RequiredSkillValue)
				{
					base.SetPropertyValue(perkObject, 0);
				}
			}
		}

		// Token: 0x06002F2F RID: 12079 RVA: 0x000C27AC File Offset: 0x000C09AC
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			this.Initialize();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.NodeType != XmlNodeType.Comment)
				{
					XmlAttributeCollection attributes = xmlNode.Attributes;
					string value = attributes["id"].Value;
					string value2 = attributes["value"].Value;
					PerkObject @object = Game.Current.ObjectManager.GetObject<PerkObject>(value);
					if (@object != null)
					{
						int value3 = (value2 != null) ? Convert.ToInt32(value2) : 1;
						base.SetPropertyValue(@object, value3);
					}
				}
			}
			foreach (object obj2 in node.ChildNodes)
			{
				XmlNode xmlNode2 = (XmlNode)obj2;
				string text = xmlNode2.Name;
				int value4 = 1;
				if (text == "Perk")
				{
					text = null;
					if (xmlNode2.Attributes != null)
					{
						XmlAttribute xmlAttribute = xmlNode2.Attributes["id"];
						if (xmlAttribute != null)
						{
							text = xmlAttribute.InnerText;
						}
					}
				}
				if (text != null)
				{
					PerkObject object2 = Game.Current.ObjectManager.GetObject<PerkObject>(text);
					if (object2 != null)
					{
						XmlAttribute xmlAttribute2 = xmlNode2.Attributes["value"];
						if (xmlAttribute2 != null)
						{
							string value5 = xmlAttribute2.Value;
							value4 = ((value5 != null) ? Convert.ToInt32(value5) : 1);
						}
						base.SetPropertyValue(object2, value4);
					}
				}
			}
		}
	}
}
