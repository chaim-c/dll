using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapEvents
{
	// Token: 0x020002B6 RID: 694
	public class MapEventManager
	{
		// Token: 0x060028D3 RID: 10451 RVA: 0x000AE670 File Offset: 0x000AC870
		internal static void AutoGeneratedStaticCollectObjectsMapEventManager(object o, List<object> collectedObjects)
		{
			((MapEventManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060028D4 RID: 10452 RVA: 0x000AE67E File Offset: 0x000AC87E
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._mapEvents);
		}

		// Token: 0x060028D5 RID: 10453 RVA: 0x000AE68C File Offset: 0x000AC88C
		internal static object AutoGeneratedGetMemberValue_mapEvents(object o)
		{
			return ((MapEventManager)o)._mapEvents;
		}

		// Token: 0x17000A48 RID: 2632
		// (get) Token: 0x060028D6 RID: 10454 RVA: 0x000AE699 File Offset: 0x000AC899
		public MBReadOnlyList<MapEvent> MapEvents
		{
			get
			{
				return this._mapEvents;
			}
		}

		// Token: 0x060028D7 RID: 10455 RVA: 0x000AE6A1 File Offset: 0x000AC8A1
		internal MapEventManager()
		{
			this._mapEvents = new MBList<MapEvent>();
		}

		// Token: 0x060028D8 RID: 10456 RVA: 0x000AE6B4 File Offset: 0x000AC8B4
		internal void OnAfterLoad()
		{
			foreach (MapEvent mapEvent in this._mapEvents)
			{
				mapEvent.OnAfterLoad();
			}
		}

		// Token: 0x060028D9 RID: 10457 RVA: 0x000AE704 File Offset: 0x000AC904
		public void OnMapEventCreated(MapEvent mapEvent)
		{
			this._mapEvents.Add(mapEvent);
		}

		// Token: 0x060028DA RID: 10458 RVA: 0x000AE714 File Offset: 0x000AC914
		internal void Tick()
		{
			for (int i = this._mapEvents.Count - 1; i >= 0; i--)
			{
				if (this._mapEvents[i].IsFinished)
				{
					this._mapEvents.RemoveAt(i);
				}
				else if (this._mapEvents[i].IsRaid || this._mapEvents[i] != MobileParty.MainParty.MapEvent)
				{
					this._mapEvents[i].Update();
				}
			}
		}

		// Token: 0x060028DB RID: 10459 RVA: 0x000AE798 File Offset: 0x000AC998
		public MapEvent GetMapEvent(int attackerPartyIndex)
		{
			return this._mapEvents.FirstOrDefault((MapEvent mapEvent) => mapEvent.AttackerSide.LeaderParty.Index == attackerPartyIndex);
		}

		// Token: 0x060028DC RID: 10460 RVA: 0x000AE7CC File Offset: 0x000AC9CC
		public List<MapEvent> GetMapEventsBetweenFactions(IFaction faction1, IFaction faction2)
		{
			List<MapEvent> list = new List<MapEvent>();
			Func<MapEventParty, bool> <>9__0;
			Func<MapEventParty, bool> <>9__1;
			Func<MapEventParty, bool> <>9__2;
			Func<MapEventParty, bool> <>9__3;
			foreach (MapEvent mapEvent in this._mapEvents)
			{
				MBReadOnlyList<MapEventParty> mbreadOnlyList = mapEvent.PartiesOnSide(BattleSideEnum.Defender);
				MBReadOnlyList<MapEventParty> mbreadOnlyList2 = mapEvent.PartiesOnSide(BattleSideEnum.Attacker);
				IEnumerable<MapEventParty> source = mbreadOnlyList;
				Func<MapEventParty, bool> predicate;
				if ((predicate = <>9__0) == null)
				{
					predicate = (<>9__0 = ((MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction1));
				}
				if (source.Any(predicate))
				{
					IEnumerable<MapEventParty> source2 = mbreadOnlyList2;
					Func<MapEventParty, bool> predicate2;
					if ((predicate2 = <>9__1) == null)
					{
						predicate2 = (<>9__1 = ((MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction2));
					}
					if (source2.Any(predicate2))
					{
						goto IL_ED;
					}
				}
				IEnumerable<MapEventParty> source3 = mbreadOnlyList;
				Func<MapEventParty, bool> predicate3;
				if ((predicate3 = <>9__2) == null)
				{
					predicate3 = (<>9__2 = ((MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction2));
				}
				if (!source3.Any(predicate3))
				{
					continue;
				}
				IEnumerable<MapEventParty> source4 = mbreadOnlyList2;
				Func<MapEventParty, bool> predicate4;
				if ((predicate4 = <>9__3) == null)
				{
					predicate4 = (<>9__3 = ((MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction1));
				}
				if (!source4.Any(predicate4))
				{
					continue;
				}
				IL_ED:
				list.Add(mapEvent);
			}
			return list;
		}

		// Token: 0x060028DD RID: 10461 RVA: 0x000AE8FC File Offset: 0x000ACAFC
		public void FinalizePlayerMapEvent(MapEvent mapEvent = null)
		{
			if (MobileParty.MainParty.MapEvent == null)
			{
				throw new MBNotFoundException("Trying to finalize a non-existing map event.");
			}
			PartyBase.MainParty.MapEvent.FinalizeEvent();
			PlayerEncounter.Finish(true);
		}

		// Token: 0x060028DE RID: 10462 RVA: 0x000AE92C File Offset: 0x000ACB2C
		public MapEvent StartSiegeMapEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			mapEvent.Initialize(attackerParty, defenderParty, null, MapEvent.BattleTypes.Siege);
			this.OnMapEventCreated(mapEvent);
			return mapEvent;
		}

		// Token: 0x060028DF RID: 10463 RVA: 0x000AE954 File Offset: 0x000ACB54
		public MapEvent StartSallyOutMapEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			mapEvent.Initialize(attackerParty, defenderParty, null, MapEvent.BattleTypes.SallyOut);
			this.OnMapEventCreated(mapEvent);
			return mapEvent;
		}

		// Token: 0x060028E0 RID: 10464 RVA: 0x000AE97C File Offset: 0x000ACB7C
		public MapEvent StartSiegeOutsideMapEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			mapEvent.Initialize(attackerParty, defenderParty, null, MapEvent.BattleTypes.SiegeOutside);
			this.OnMapEventCreated(mapEvent);
			return mapEvent;
		}

		// Token: 0x04000C5E RID: 3166
		[SaveableField(1)]
		private MBList<MapEvent> _mapEvents;
	}
}
