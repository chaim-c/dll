using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000057 RID: 87
	public class CharacterRelationManager
	{
		// Token: 0x0600097A RID: 2426 RVA: 0x00039132 File Offset: 0x00037332
		internal static void AutoGeneratedStaticCollectObjectsCharacterRelationManager(object o, List<object> collectedObjects)
		{
			((CharacterRelationManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600097B RID: 2427 RVA: 0x00039140 File Offset: 0x00037340
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._heroRelations);
		}

		// Token: 0x0600097C RID: 2428 RVA: 0x0003914E File Offset: 0x0003734E
		internal static object AutoGeneratedGetMemberValue_heroRelations(object o)
		{
			return ((CharacterRelationManager)o)._heroRelations;
		}

		// Token: 0x170001EC RID: 492
		// (get) Token: 0x0600097D RID: 2429 RVA: 0x0003915B File Offset: 0x0003735B
		public static CharacterRelationManager Instance
		{
			get
			{
				return Campaign.Current.CharacterRelationManager;
			}
		}

		// Token: 0x0600097E RID: 2430 RVA: 0x00039167 File Offset: 0x00037367
		public CharacterRelationManager()
		{
			this._heroRelations = new CharacterRelationManager.HeroRelations();
		}

		// Token: 0x0600097F RID: 2431 RVA: 0x0003917A File Offset: 0x0003737A
		public static int GetHeroRelation(Hero hero1, Hero hero2)
		{
			return CharacterRelationManager.Instance._heroRelations.GetRelation(hero1, hero2);
		}

		// Token: 0x06000980 RID: 2432 RVA: 0x0003918D File Offset: 0x0003738D
		public static void SetHeroRelation(Hero hero1, Hero hero2, int value)
		{
			if (hero1 != hero2)
			{
				CharacterRelationManager.Instance._heroRelations.SetRelation(hero1, hero2, value);
				return;
			}
			Debug.FailedAssert("hero1 != hero2", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CharacterRelationManager.cs", "SetHeroRelation", 262);
		}

		// Token: 0x06000981 RID: 2433 RVA: 0x000391BF File Offset: 0x000373BF
		public void AfterLoad()
		{
			if (MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.0", 45697))
			{
				this._heroRelations.ClearOldData();
			}
		}

		// Token: 0x06000982 RID: 2434 RVA: 0x000391E7 File Offset: 0x000373E7
		public void RemoveHero(Hero deadHero)
		{
			this._heroRelations.Remove(deadHero);
		}

		// Token: 0x040002C1 RID: 705
		[SaveableField(1)]
		private readonly CharacterRelationManager.HeroRelations _heroRelations;

		// Token: 0x020004A0 RID: 1184
		internal class HeroRelations
		{
			// Token: 0x06004252 RID: 16978 RVA: 0x0014393D File Offset: 0x00141B3D
			internal static void AutoGeneratedStaticCollectObjectsHeroRelations(object o, List<object> collectedObjects)
			{
				((CharacterRelationManager.HeroRelations)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004253 RID: 16979 RVA: 0x0014394B File Offset: 0x00141B4B
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this._relations);
			}

			// Token: 0x06004254 RID: 16980 RVA: 0x00143959 File Offset: 0x00141B59
			internal static object AutoGeneratedGetMemberValue_relations(object o)
			{
				return ((CharacterRelationManager.HeroRelations)o)._relations;
			}

			// Token: 0x06004255 RID: 16981 RVA: 0x00143968 File Offset: 0x00141B68
			public int GetRelation(Hero hero1, Hero hero2)
			{
				ValueTuple<long, long> hashCodes = this.GetHashCodes(hero1, hero2);
				Dictionary<long, int> dictionary;
				int result;
				if (this._relations.TryGetValue(hashCodes.Item1, out dictionary) && dictionary.TryGetValue(hashCodes.Item2, out result))
				{
					return result;
				}
				return 0;
			}

			// Token: 0x06004256 RID: 16982 RVA: 0x001439A8 File Offset: 0x00141BA8
			public void SetRelation(Hero hero1, Hero hero2, int value)
			{
				ValueTuple<long, long> hashCodes = this.GetHashCodes(hero1, hero2);
				if (value != 0)
				{
					Dictionary<long, int> dictionary;
					if (!this._relations.TryGetValue(hashCodes.Item1, out dictionary))
					{
						dictionary = new Dictionary<long, int>();
						this._relations.Add(hashCodes.Item1, dictionary);
					}
					dictionary[hashCodes.Item2] = value;
					return;
				}
				Dictionary<long, int> dictionary2;
				if (this._relations.TryGetValue(hashCodes.Item1, out dictionary2) && dictionary2.ContainsKey(hashCodes.Item2))
				{
					dictionary2.Remove(hashCodes.Item2);
					if (!dictionary2.Any<KeyValuePair<long, int>>())
					{
						this._relations.Remove(hashCodes.Item1);
					}
				}
			}

			// Token: 0x06004257 RID: 16983 RVA: 0x00143A48 File Offset: 0x00141C48
			public void Remove(Hero hero)
			{
				int hashCode = hero.Id.GetHashCode();
				this._relations.Remove((long)hashCode);
				foreach (Dictionary<long, int> dictionary in this._relations.Values)
				{
					dictionary.Remove((long)hashCode);
				}
			}

			// Token: 0x06004258 RID: 16984 RVA: 0x00143AC4 File Offset: 0x00141CC4
			public void ClearOldData()
			{
				this.ClearOldData<Dictionary<long, int>>(this._relations);
				foreach (Dictionary<long, int> obj in this._relations.Values)
				{
					this.ClearOldData<int>(obj);
				}
			}

			// Token: 0x06004259 RID: 16985 RVA: 0x00143B28 File Offset: 0x00141D28
			private void ClearOldData<T>(Dictionary<long, T> obj)
			{
				HashSet<long> hashSet = new HashSet<long>(obj.Keys);
				foreach (Hero hero in Campaign.Current.CampaignObjectManager.AliveHeroes)
				{
					if (hashSet.Contains((long)hero.Id.GetHashCode()))
					{
						hashSet.Remove((long)hero.Id.GetHashCode());
					}
				}
				foreach (long key in hashSet)
				{
					obj.Remove(key);
				}
			}

			// Token: 0x0600425A RID: 16986 RVA: 0x00143C04 File Offset: 0x00141E04
			private ValueTuple<long, long> GetHashCodes(Hero hero1, Hero hero2)
			{
				if (hero1.Id > hero2.Id)
				{
					return new ValueTuple<long, long>((long)hero1.Id.GetHashCode(), (long)hero2.Id.GetHashCode());
				}
				return new ValueTuple<long, long>((long)hero2.Id.GetHashCode(), (long)hero1.Id.GetHashCode());
			}

			// Token: 0x040013FD RID: 5117
			[SaveableField(1)]
			private Dictionary<long, Dictionary<long, int>> _relations = new Dictionary<long, Dictionary<long, int>>();
		}
	}
}
