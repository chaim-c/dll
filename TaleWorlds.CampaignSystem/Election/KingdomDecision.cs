using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x0200026E RID: 622
	public abstract class KingdomDecision
	{
		// Token: 0x0600209B RID: 8347 RVA: 0x0008B537 File Offset: 0x00089737
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._kingdom);
			collectedObjects.Add(this.ProposerClan);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.TriggerTime, collectedObjects);
		}

		// Token: 0x0600209C RID: 8348 RVA: 0x0008B562 File Offset: 0x00089762
		internal static object AutoGeneratedGetMemberValueProposerClan(object o)
		{
			return ((KingdomDecision)o).ProposerClan;
		}

		// Token: 0x0600209D RID: 8349 RVA: 0x0008B56F File Offset: 0x0008976F
		internal static object AutoGeneratedGetMemberValueTriggerTime(object o)
		{
			return ((KingdomDecision)o).TriggerTime;
		}

		// Token: 0x0600209E RID: 8350 RVA: 0x0008B581 File Offset: 0x00089781
		internal static object AutoGeneratedGetMemberValue_isEnforced(object o)
		{
			return ((KingdomDecision)o)._isEnforced;
		}

		// Token: 0x0600209F RID: 8351 RVA: 0x0008B593 File Offset: 0x00089793
		internal static object AutoGeneratedGetMemberValue_playerExamined(object o)
		{
			return ((KingdomDecision)o)._playerExamined;
		}

		// Token: 0x060020A0 RID: 8352 RVA: 0x0008B5A5 File Offset: 0x000897A5
		internal static object AutoGeneratedGetMemberValue_kingdom(object o)
		{
			return ((KingdomDecision)o)._kingdom;
		}

		// Token: 0x1700085E RID: 2142
		// (get) Token: 0x060020A1 RID: 8353 RVA: 0x0008B5B2 File Offset: 0x000897B2
		public Kingdom Kingdom
		{
			get
			{
				return this._kingdom ?? this.ProposerClan.Kingdom;
			}
		}

		// Token: 0x1700085F RID: 2143
		// (get) Token: 0x060020A2 RID: 8354 RVA: 0x0008B5C9 File Offset: 0x000897C9
		// (set) Token: 0x060020A3 RID: 8355 RVA: 0x0008B5D1 File Offset: 0x000897D1
		[SaveableProperty(4)]
		public Clan ProposerClan { get; private set; }

		// Token: 0x17000860 RID: 2144
		// (get) Token: 0x060020A4 RID: 8356 RVA: 0x0008B5DA File Offset: 0x000897DA
		// (set) Token: 0x060020A5 RID: 8357 RVA: 0x0008B5E2 File Offset: 0x000897E2
		public bool IsEnforced
		{
			get
			{
				return this._isEnforced;
			}
			set
			{
				this._isEnforced = value;
			}
		}

		// Token: 0x17000861 RID: 2145
		// (get) Token: 0x060020A6 RID: 8358 RVA: 0x0008B5EB File Offset: 0x000897EB
		// (set) Token: 0x060020A7 RID: 8359 RVA: 0x0008B5F3 File Offset: 0x000897F3
		public bool PlayerExamined
		{
			get
			{
				return this._playerExamined;
			}
			set
			{
				this._playerExamined = value;
			}
		}

		// Token: 0x17000862 RID: 2146
		// (get) Token: 0x060020A8 RID: 8360 RVA: 0x0008B5FC File Offset: 0x000897FC
		// (set) Token: 0x060020A9 RID: 8361 RVA: 0x0008B60E File Offset: 0x0008980E
		public bool NotifyPlayer
		{
			get
			{
				return this._notifyPlayer || this.IsEnforced;
			}
			set
			{
				this._notifyPlayer = value;
			}
		}

		// Token: 0x17000863 RID: 2147
		// (get) Token: 0x060020AA RID: 8362 RVA: 0x0008B617 File Offset: 0x00089817
		public bool IsPlayerParticipant
		{
			get
			{
				return this.Kingdom == Clan.PlayerClan.Kingdom && !Clan.PlayerClan.IsUnderMercenaryService;
			}
		}

		// Token: 0x17000864 RID: 2148
		// (get) Token: 0x060020AB RID: 8363 RVA: 0x0008B63A File Offset: 0x0008983A
		// (set) Token: 0x060020AC RID: 8364 RVA: 0x0008B642 File Offset: 0x00089842
		[SaveableProperty(3)]
		public CampaignTime TriggerTime { get; protected set; }

		// Token: 0x060020AD RID: 8365 RVA: 0x0008B64B File Offset: 0x0008984B
		protected KingdomDecision(Clan proposerClan)
		{
			this.ProposerClan = proposerClan;
			this._kingdom = proposerClan.Kingdom;
			this.TriggerTime = CampaignTime.HoursFromNow((float)this.HoursToWait);
		}

		// Token: 0x17000865 RID: 2149
		// (get) Token: 0x060020AE RID: 8366 RVA: 0x0008B683 File Offset: 0x00089883
		public virtual bool IsKingsVoteAllowed
		{
			get
			{
				return true;
			}
		}

		// Token: 0x060020AF RID: 8367
		public abstract bool IsAllowed();

		// Token: 0x060020B0 RID: 8368 RVA: 0x0008B688 File Offset: 0x00089888
		public int GetInfluenceCost(Clan sponsorClan)
		{
			int proposalInfluenceCost = this.GetProposalInfluenceCost();
			if (sponsorClan != Clan.PlayerClan)
			{
				return proposalInfluenceCost;
			}
			return proposalInfluenceCost;
		}

		// Token: 0x060020B1 RID: 8369
		public abstract int GetProposalInfluenceCost();

		// Token: 0x060020B2 RID: 8370
		public abstract TextObject GetGeneralTitle();

		// Token: 0x060020B3 RID: 8371
		public abstract TextObject GetSupportTitle();

		// Token: 0x060020B4 RID: 8372
		public abstract TextObject GetChooseTitle();

		// Token: 0x060020B5 RID: 8373
		public abstract TextObject GetSupportDescription();

		// Token: 0x060020B6 RID: 8374
		public abstract TextObject GetChooseDescription();

		// Token: 0x060020B7 RID: 8375 RVA: 0x0008B6A7 File Offset: 0x000898A7
		public virtual float CalculateMeritOfOutcome(DecisionOutcome candidateOutcome)
		{
			return 1f;
		}

		// Token: 0x060020B8 RID: 8376
		public abstract IEnumerable<DecisionOutcome> DetermineInitialCandidates();

		// Token: 0x060020B9 RID: 8377 RVA: 0x0008B6B0 File Offset: 0x000898B0
		public MBList<DecisionOutcome> NarrowDownCandidates(MBList<DecisionOutcome> initialCandidates, int maxCandidateCount)
		{
			foreach (DecisionOutcome decisionOutcome in initialCandidates)
			{
				decisionOutcome.InitialMerit = this.CalculateMeritOfOutcome(decisionOutcome);
			}
			return this.SortDecisionOutcomes(initialCandidates).Take(maxCandidateCount).ToMBList<DecisionOutcome>();
		}

		// Token: 0x060020BA RID: 8378
		public abstract Clan DetermineChooser();

		// Token: 0x060020BB RID: 8379 RVA: 0x0008B718 File Offset: 0x00089918
		public IEnumerable<Supporter> DetermineSupporters()
		{
			foreach (Clan clan in this.Kingdom.Clans)
			{
				if (!clan.IsUnderMercenaryService)
				{
					yield return new Supporter(clan);
				}
			}
			List<Clan>.Enumerator enumerator = default(List<Clan>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x060020BC RID: 8380 RVA: 0x0008B728 File Offset: 0x00089928
		protected virtual bool ShouldBeCancelledInternal()
		{
			return false;
		}

		// Token: 0x060020BD RID: 8381 RVA: 0x0008B72B File Offset: 0x0008992B
		protected virtual bool CanProposerClanChangeOpinion()
		{
			return false;
		}

		// Token: 0x060020BE RID: 8382 RVA: 0x0008B730 File Offset: 0x00089930
		public bool ShouldBeCancelled()
		{
			if (this.Kingdom.IsEliminated)
			{
				return true;
			}
			if (this.ProposerClan.Kingdom != this.Kingdom)
			{
				return true;
			}
			if (!this.IsAllowed())
			{
				return true;
			}
			if (this.ShouldBeCancelledInternal())
			{
				return true;
			}
			if (this.ProposerClan == Clan.PlayerClan)
			{
				return false;
			}
			MBList<DecisionOutcome> mblist = this.NarrowDownCandidates(this.DetermineInitialCandidates().ToMBList<DecisionOutcome>(), 3);
			DecisionOutcome queriedDecisionOutcome = this.GetQueriedDecisionOutcome(mblist);
			this.DetermineSponsors(mblist);
			Supporter.SupportWeights supportWeights;
			DecisionOutcome decisionOutcome = this.DetermineSupportOption(new Supporter(this.ProposerClan), mblist, out supportWeights, true);
			bool flag = this.ProposerClan.Influence < (float)this.GetInfluenceCostOfSupport(this.ProposerClan, Supporter.SupportWeights.SlightlyFavor) * 1.5f;
			bool flag2 = mblist.Any((DecisionOutcome t) => t.SponsorClan != null && t.SponsorClan.IsEliminated);
			bool flag3 = supportWeights == Supporter.SupportWeights.StayNeutral || decisionOutcome == null;
			bool flag4 = decisionOutcome != queriedDecisionOutcome || (decisionOutcome == queriedDecisionOutcome && flag3);
			return flag2 || (mblist.Any((DecisionOutcome t) => t.SponsorClan == this.ProposerClan) && !flag && ((!this.CanProposerClanChangeOpinion() && flag4) || (this.CanProposerClanChangeOpinion() && flag3)));
		}

		// Token: 0x17000866 RID: 2150
		// (get) Token: 0x060020BF RID: 8383 RVA: 0x0008B858 File Offset: 0x00089A58
		protected virtual int HoursToWait
		{
			get
			{
				return 48;
			}
		}

		// Token: 0x17000867 RID: 2151
		// (get) Token: 0x060020C0 RID: 8384 RVA: 0x0008B85C File Offset: 0x00089A5C
		public bool NeedsPlayerResolution
		{
			get
			{
				return this.Kingdom == Clan.PlayerClan.Kingdom && (this.IsEnforced || (this.TriggerTime.IsPast && this.Kingdom.RulingClan == Clan.PlayerClan));
			}
		}

		// Token: 0x060020C1 RID: 8385 RVA: 0x0008B8AC File Offset: 0x00089AAC
		public DecisionOutcome DetermineSupportOption(Supporter supporter, MBReadOnlyList<DecisionOutcome> possibleOutcomes, out Supporter.SupportWeights supportWeightOfSelectedOutcome, bool calculateRelationshipEffect)
		{
			Supporter.SupportWeights supportWeights = Supporter.SupportWeights.Choose;
			DecisionOutcome decisionOutcome = null;
			DecisionOutcome decisionOutcome2 = null;
			float num = float.MinValue;
			float num2 = 0f;
			int num3 = 0;
			Clan clan = supporter.Clan;
			foreach (DecisionOutcome decisionOutcome3 in possibleOutcomes)
			{
				float num4 = this.DetermineSupport(supporter.Clan, decisionOutcome3);
				if (num4 > num)
				{
					decisionOutcome = decisionOutcome3;
					num = num4;
				}
				if (num4 < num2)
				{
					decisionOutcome2 = decisionOutcome3;
					num2 = num4;
				}
				num3++;
			}
			if (decisionOutcome != null)
			{
				float num5 = num;
				if (decisionOutcome2 != null)
				{
					num5 -= 0.5f * num2;
				}
				float num6 = num5;
				if (clan.Influence < num6 * 2f)
				{
					num6 *= 0.5f;
					if (num6 > clan.Influence * 0.7f)
					{
						num6 = clan.Influence * 0.7f;
					}
				}
				else if (clan.Influence > num6 * 10f)
				{
					num6 *= 1.5f;
				}
				if (decisionOutcome.Likelihood > 0.65f)
				{
					num6 *= 1.6f * (1.2f - decisionOutcome.Likelihood);
				}
				if (calculateRelationshipEffect && decisionOutcome.SponsorClan != null)
				{
					int num7 = (int)(100f - MathF.Clamp((float)clan.Leader.GetRelation(decisionOutcome.SponsorClan.Leader), -100f, 100f));
					float num8 = MathF.Lerp(0.2f, 1.8f, 1f - (float)num7 / 200f, 1E-05f);
					num6 *= num8;
				}
				if (num6 > (float)this.GetInfluenceCostOfSupport(supporter.Clan, Supporter.SupportWeights.FullyPush))
				{
					supportWeights = Supporter.SupportWeights.FullyPush;
				}
				else if (num6 > (float)this.GetInfluenceCostOfSupport(supporter.Clan, Supporter.SupportWeights.StronglyFavor))
				{
					supportWeights = Supporter.SupportWeights.StronglyFavor;
				}
				else if (num6 > (float)this.GetInfluenceCostOfSupport(supporter.Clan, Supporter.SupportWeights.SlightlyFavor))
				{
					supportWeights = Supporter.SupportWeights.SlightlyFavor;
				}
			}
			while (supportWeights >= Supporter.SupportWeights.SlightlyFavor && supporter.Clan != null && supporter.Clan.Influence < (float)this.GetInfluenceCostOfSupport(supporter.Clan, supportWeights))
			{
				supportWeights--;
			}
			supportWeightOfSelectedOutcome = supportWeights;
			if (supportWeights == Supporter.SupportWeights.StayNeutral || supportWeights == Supporter.SupportWeights.Choose)
			{
				return null;
			}
			return decisionOutcome;
		}

		// Token: 0x060020C2 RID: 8386
		public abstract float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome);

		// Token: 0x060020C3 RID: 8387
		public abstract void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes);

		// Token: 0x060020C4 RID: 8388 RVA: 0x0008BABC File Offset: 0x00089CBC
		protected void AssignDefaultSponsor(DecisionOutcome outcome)
		{
			if (outcome.SupporterList.Count > 0)
			{
				Supporter.SupportWeights maxWeight = outcome.SupporterList.Max((Supporter t) => t.SupportWeight);
				Supporter supporter = outcome.SupporterList.First((Supporter t) => t.SupportWeight == maxWeight);
				outcome.SetSponsor(supporter.Clan);
			}
		}

		// Token: 0x060020C5 RID: 8389
		public abstract void ApplyChosenOutcome(DecisionOutcome chosenOutcome);

		// Token: 0x060020C6 RID: 8390 RVA: 0x0008BB34 File Offset: 0x00089D34
		public int GetInfluenceCost(DecisionOutcome decisionOutcome, Clan clan, Supporter.SupportWeights supportWeight)
		{
			int result = 0;
			switch (supportWeight)
			{
			case Supporter.SupportWeights.Choose:
				result = 0;
				break;
			case Supporter.SupportWeights.StayNeutral:
				result = 0;
				break;
			case Supporter.SupportWeights.SlightlyFavor:
				result = this.GetInfluenceCostOfSupport(clan, Supporter.SupportWeights.SlightlyFavor);
				break;
			case Supporter.SupportWeights.StronglyFavor:
				result = this.GetInfluenceCostOfSupport(clan, Supporter.SupportWeights.StronglyFavor);
				break;
			case Supporter.SupportWeights.FullyPush:
				result = this.GetInfluenceCostOfSupport(clan, Supporter.SupportWeights.FullyPush);
				break;
			default:
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Election\\KingdomDecision.cs", "GetInfluenceCost", 339);
				break;
			}
			return result;
		}

		// Token: 0x060020C7 RID: 8391
		public abstract TextObject GetSecondaryEffects();

		// Token: 0x060020C8 RID: 8392
		public abstract void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome);

		// Token: 0x060020C9 RID: 8393
		public abstract TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false);

		// Token: 0x060020CA RID: 8394 RVA: 0x0008BBA2 File Offset: 0x00089DA2
		public MBList<DecisionOutcome> SortDecisionOutcomes(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return (from k in possibleOutcomes
			orderby k.InitialMerit descending
			select k).ToMBList<DecisionOutcome>();
		}

		// Token: 0x060020CB RID: 8395
		public abstract DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes);

		// Token: 0x060020CC RID: 8396 RVA: 0x0008BBCE File Offset: 0x00089DCE
		public bool IsSingleClanDecision()
		{
			return this.Kingdom.Clans.Count == 1;
		}

		// Token: 0x060020CD RID: 8397 RVA: 0x0008BBE4 File Offset: 0x00089DE4
		public virtual float CalculateRelationshipEffectWithSponsor(Clan clan)
		{
			float num = 0.8f;
			return (float)clan.Leader.GetRelation(this.ProposerClan.Leader) * num;
		}

		// Token: 0x060020CE RID: 8398 RVA: 0x0008BC10 File Offset: 0x00089E10
		public int GetInfluenceCostOfSupport(Clan clan, Supporter.SupportWeights supportWeight)
		{
			float influenceCostOfSupportInternal = (float)this.GetInfluenceCostOfSupportInternal(supportWeight);
			float num = 1f;
			if (clan.Leader.GetPerkValue(DefaultPerks.Charm.FlexibleEthics))
			{
				num += DefaultPerks.Charm.FlexibleEthics.PrimaryBonus;
			}
			return (int)(influenceCostOfSupportInternal * num);
		}

		// Token: 0x060020CF RID: 8399 RVA: 0x0008BC4D File Offset: 0x00089E4D
		protected virtual int GetInfluenceCostOfSupportInternal(Supporter.SupportWeights supportWeight)
		{
			switch (supportWeight)
			{
			case Supporter.SupportWeights.Choose:
			case Supporter.SupportWeights.StayNeutral:
				return 0;
			case Supporter.SupportWeights.SlightlyFavor:
				return 20;
			case Supporter.SupportWeights.StronglyFavor:
				return 60;
			case Supporter.SupportWeights.FullyPush:
				return 150;
			default:
				throw new ArgumentOutOfRangeException("supportWeight", supportWeight, null);
			}
		}

		// Token: 0x060020D0 RID: 8400 RVA: 0x0008BC8A File Offset: 0x00089E8A
		public virtual bool OnShowDecision()
		{
			return true;
		}

		// Token: 0x060020D1 RID: 8401 RVA: 0x0008BC8D File Offset: 0x00089E8D
		public virtual KingdomDecision GetFollowUpDecision()
		{
			return null;
		}

		// Token: 0x04000A44 RID: 2628
		[SaveableField(0)]
		private static bool _notificationsEnabled = true;

		// Token: 0x04000A45 RID: 2629
		[SaveableField(1)]
		private bool _isEnforced;

		// Token: 0x04000A46 RID: 2630
		[SaveableField(2)]
		private bool _playerExamined;

		// Token: 0x04000A47 RID: 2631
		private bool _notifyPlayer = KingdomDecision._notificationsEnabled;

		// Token: 0x04000A49 RID: 2633
		[SaveableField(10)]
		private Kingdom _kingdom;

		// Token: 0x04000A4A RID: 2634
		public KingdomDecision.SupportStatus SupportStatusOfFinalDecision;

		// Token: 0x02000579 RID: 1401
		public enum SupportStatus
		{
			// Token: 0x040016F4 RID: 5876
			Equal,
			// Token: 0x040016F5 RID: 5877
			Majority,
			// Token: 0x040016F6 RID: 5878
			Minority
		}
	}
}
