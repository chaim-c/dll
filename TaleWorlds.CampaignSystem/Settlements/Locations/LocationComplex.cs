using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations
{
	// Token: 0x0200036A RID: 874
	public class LocationComplex
	{
		// Token: 0x0600336F RID: 13167 RVA: 0x000D57AA File Offset: 0x000D39AA
		internal static void AutoGeneratedStaticCollectObjectsLocationComplex(object o, List<object> collectedObjects)
		{
			((LocationComplex)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003370 RID: 13168 RVA: 0x000D57B8 File Offset: 0x000D39B8
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._locations);
		}

		// Token: 0x06003371 RID: 13169 RVA: 0x000D57C6 File Offset: 0x000D39C6
		internal static object AutoGeneratedGetMemberValue_locations(object o)
		{
			return ((LocationComplex)o)._locations;
		}

		// Token: 0x17000C9A RID: 3226
		// (get) Token: 0x06003372 RID: 13170 RVA: 0x000D57D3 File Offset: 0x000D39D3
		public static LocationComplex Current
		{
			get
			{
				if (PlayerEncounter.LocationEncounter != null)
				{
					return PlayerEncounter.LocationEncounter.Settlement.LocationComplex;
				}
				return null;
			}
		}

		// Token: 0x06003373 RID: 13171 RVA: 0x000D57ED File Offset: 0x000D39ED
		public static bool CanAlways(LocationCharacter locationCharacter, Location location)
		{
			return true;
		}

		// Token: 0x06003374 RID: 13172 RVA: 0x000D57F0 File Offset: 0x000D39F0
		public static bool CanNever(LocationCharacter locationCharacter, Location location)
		{
			return false;
		}

		// Token: 0x06003375 RID: 13173 RVA: 0x000D57F3 File Offset: 0x000D39F3
		public static bool CanIfHero(LocationCharacter locationCharacter, Location location)
		{
			return locationCharacter.Character.IsHero;
		}

		// Token: 0x06003376 RID: 13174 RVA: 0x000D5800 File Offset: 0x000D3A00
		public static bool CanIfDay(LocationCharacter locationCharacter, Location location)
		{
			return !Campaign.Current.IsNight;
		}

		// Token: 0x06003377 RID: 13175 RVA: 0x000D5810 File Offset: 0x000D3A10
		public static bool CanIfPriceIsPaid(LocationCharacter locationCharacter, Location location)
		{
			string stringId = location.StringId;
			if (!(stringId == "lordshall"))
			{
				return stringId == "prison" && Campaign.Current.Models.BribeCalculationModel.GetBribeToEnterDungeon(Settlement.CurrentSettlement) == 0;
			}
			return Campaign.Current.Models.BribeCalculationModel.GetBribeToEnterLordsHall(Settlement.CurrentSettlement) == 0;
		}

		// Token: 0x06003378 RID: 13176 RVA: 0x000D587B File Offset: 0x000D3A7B
		public static bool CanIfGrownUpMaleOrHero(LocationCharacter locationCharacter, Location location)
		{
			return LocationComplex.CanIfMaleOrHero(locationCharacter, location) && locationCharacter.Character.Age >= (float)Campaign.Current.Models.AgeModel.HeroComesOfAge;
		}

		// Token: 0x06003379 RID: 13177 RVA: 0x000D58AD File Offset: 0x000D3AAD
		public static bool CanIfMaleOrHero(LocationCharacter locationCharacter, Location location)
		{
			return !locationCharacter.Character.IsFemale || locationCharacter.Character.IsHero;
		}

		// Token: 0x0600337A RID: 13178 RVA: 0x000D58CC File Offset: 0x000D3ACC
		public static bool CanIfSettlementAccessModelLetsPlayer(LocationCharacter locationCharacter, Location location)
		{
			bool flag;
			TextObject textObject;
			return Campaign.Current.Models.SettlementAccessModel.CanMainHeroAccessLocation(Settlement.CurrentSettlement, location.StringId, out flag, out textObject);
		}

		// Token: 0x0600337B RID: 13179 RVA: 0x000D58FC File Offset: 0x000D3AFC
		public LocationComplex()
		{
			this._locations = new Dictionary<string, Location>();
		}

		// Token: 0x0600337C RID: 13180 RVA: 0x000D5910 File Offset: 0x000D3B10
		public LocationComplex(LocationComplexTemplate complexTemplate) : this()
		{
			foreach (Location location in complexTemplate.Locations)
			{
				this._locations.Add(location.StringId, new Location(location, this));
			}
			foreach (KeyValuePair<string, string> keyValuePair in complexTemplate.Passages)
			{
				this.AddPassage(this.GetLocationWithId(keyValuePair.Key), this.GetLocationWithId(keyValuePair.Value));
			}
		}

		// Token: 0x0600337D RID: 13181 RVA: 0x000D59D8 File Offset: 0x000D3BD8
		public LocationComplex(LocationComplex complex) : this()
		{
			List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>();
			foreach (Location location in complex.GetListOfLocations())
			{
				this._locations.Add(location.StringId, new Location(location, this));
				foreach (Location location2 in location.LocationsOfPassages)
				{
					if (!list.Contains(new KeyValuePair<string, string>(location2.StringId, location.StringId)) && !list.Contains(new KeyValuePair<string, string>(location.StringId, location2.StringId)))
					{
						list.Add(new KeyValuePair<string, string>(location.StringId, location2.StringId));
					}
				}
			}
			foreach (KeyValuePair<string, string> keyValuePair in list)
			{
				this.AddPassage(this.GetLocationWithId(keyValuePair.Key), this.GetLocationWithId(keyValuePair.Value));
			}
		}

		// Token: 0x0600337E RID: 13182 RVA: 0x000D5B28 File Offset: 0x000D3D28
		public void Initialize(LocationComplexTemplate complexTemplate)
		{
			foreach (Location location in complexTemplate.Locations)
			{
				Location location2 = this.GetLocationWithId(location.StringId);
				if (location2 == null)
				{
					location2 = new Location(location, this);
					this._locations.Add(location.StringId, location2);
				}
				if (location2 != null)
				{
					location2.Initialize(location, this);
				}
			}
			foreach (string text in this._locations.Keys.ToList<string>())
			{
				Location locationWithId = this.GetLocationWithId(text);
				if (locationWithId == null || !locationWithId.IsInitialized)
				{
					this._locations.Remove(text);
				}
			}
			foreach (KeyValuePair<string, string> keyValuePair in complexTemplate.Passages)
			{
				this.AddPassage(this.GetLocationWithId(keyValuePair.Key), this.GetLocationWithId(keyValuePair.Value));
			}
		}

		// Token: 0x0600337F RID: 13183 RVA: 0x000D5C74 File Offset: 0x000D3E74
		public void AddPassage(Location firstLocation, Location secondLocation)
		{
			firstLocation.AddPassageToLocation(secondLocation);
			secondLocation.AddPassageToLocation(firstLocation);
		}

		// Token: 0x06003380 RID: 13184 RVA: 0x000D5C84 File Offset: 0x000D3E84
		public void ChangeLocation(LocationCharacter locationCharacter, Location fromLocation, Location toLocation)
		{
			if (fromLocation != null)
			{
				fromLocation.RemoveLocationCharacter(locationCharacter);
			}
			if (toLocation != null)
			{
				toLocation.AddCharacter(locationCharacter);
			}
			if (toLocation != null)
			{
				toLocation.OnAIChangeLocation(fromLocation);
			}
			if (CampaignMission.Current != null && (toLocation == null || toLocation == CampaignMission.Current.Location))
			{
				PlayerEncounter.LocationEncounter.OnCharacterLocationChanged(locationCharacter, fromLocation, toLocation);
			}
		}

		// Token: 0x06003381 RID: 13185 RVA: 0x000D5CD3 File Offset: 0x000D3ED3
		public IEnumerable<LocationCharacter> GetListOfCharactersInLocation(string locationName)
		{
			foreach (LocationCharacter locationCharacter in this._locations[locationName].GetCharacterList())
			{
				yield return locationCharacter;
			}
			IEnumerator<LocationCharacter> enumerator = null;
			yield break;
			yield break;
		}

		// Token: 0x06003382 RID: 13186 RVA: 0x000D5CEC File Offset: 0x000D3EEC
		public IList<LocationCharacter> GetListOfCharacters()
		{
			List<LocationCharacter> list = new List<LocationCharacter>();
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				list = list.Concat(keyValuePair.Value.GetCharacterList()).ToList<LocationCharacter>();
			}
			return list.AsReadOnly();
		}

		// Token: 0x06003383 RID: 13187 RVA: 0x000D5D5C File Offset: 0x000D3F5C
		public IEnumerable<Location> GetListOfLocations()
		{
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				yield return keyValuePair.Value;
			}
			Dictionary<string, Location>.Enumerator enumerator = default(Dictionary<string, Location>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x06003384 RID: 13188 RVA: 0x000D5D6C File Offset: 0x000D3F6C
		public void AgentPassageUsageTick()
		{
			if (CampaignMission.Current.Mode != MissionMode.Stealth)
			{
				List<LocationCharacter> list = new List<LocationCharacter>();
				foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
				{
					if (keyValuePair.Value != CampaignMission.Current.Location && keyValuePair.Value.CanAIExit(null))
					{
						foreach (LocationCharacter locationCharacter in keyValuePair.Value.GetCharacterList())
						{
							if (!locationCharacter.FixedLocation)
							{
								list.Add(locationCharacter);
							}
						}
					}
				}
				if (list.Count > 0)
				{
					LocationCharacter locationCharacter2 = list[MBRandom.RandomInt(list.Count)];
					Location locationOfCharacter = this.GetLocationOfCharacter(locationCharacter2);
					int num = 0;
					foreach (Location location in locationOfCharacter.LocationsOfPassages)
					{
						if (location.CanAIEnter(locationCharacter2) && location.CharacterCount < location.ProsperityMax)
						{
							num += location.ProsperityMax;
						}
					}
					if (num <= 0)
					{
						return;
					}
					int num2 = MBRandom.RandomInt(num);
					Location toLocation = null;
					foreach (Location location2 in locationOfCharacter.LocationsOfPassages)
					{
						if (location2.CanAIEnter(locationCharacter2) && location2.CharacterCount < location2.ProsperityMax)
						{
							num2 -= location2.ProsperityMax;
							if (num2 < 0)
							{
								toLocation = location2;
							}
						}
					}
					this.ChangeLocation(locationCharacter2, locationOfCharacter, toLocation);
				}
			}
		}

		// Token: 0x06003385 RID: 13189 RVA: 0x000D5F5C File Offset: 0x000D415C
		public Location GetLocationOfCharacter(LocationCharacter character)
		{
			Location result = null;
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				if (keyValuePair.Value.ContainsCharacter(character))
				{
					result = keyValuePair.Value;
				}
			}
			return result;
		}

		// Token: 0x06003386 RID: 13190 RVA: 0x000D5FC4 File Offset: 0x000D41C4
		public Location GetLocationOfCharacter(Hero hero)
		{
			Location result = null;
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				if (keyValuePair.Value.ContainsCharacter(hero))
				{
					result = keyValuePair.Value;
					break;
				}
			}
			return result;
		}

		// Token: 0x06003387 RID: 13191 RVA: 0x000D602C File Offset: 0x000D422C
		public LocationCharacter GetLocationCharacterOfHero(Hero hero)
		{
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				LocationCharacter locationCharacter = keyValuePair.Value.GetLocationCharacter(hero);
				if (locationCharacter != null)
				{
					return locationCharacter;
				}
			}
			return null;
		}

		// Token: 0x06003388 RID: 13192 RVA: 0x000D6090 File Offset: 0x000D4290
		public LocationCharacter GetFirstLocationCharacterOfCharacter(CharacterObject character)
		{
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				foreach (LocationCharacter locationCharacter in keyValuePair.Value.GetCharacterList())
				{
					if (locationCharacter.Character == character)
					{
						return locationCharacter;
					}
				}
			}
			return null;
		}

		// Token: 0x06003389 RID: 13193 RVA: 0x000D612C File Offset: 0x000D432C
		public void RemoveCharacterIfExists(Hero hero)
		{
			Location locationOfCharacter = this.GetLocationOfCharacter(hero);
			if (locationOfCharacter != null)
			{
				locationOfCharacter.RemoveCharacter(hero);
			}
		}

		// Token: 0x0600338A RID: 13194 RVA: 0x000D614C File Offset: 0x000D434C
		public void RemoveCharacterIfExists(LocationCharacter locationCharacter)
		{
			Location locationOfCharacter = this.GetLocationOfCharacter(locationCharacter);
			if (locationOfCharacter != null)
			{
				locationOfCharacter.RemoveLocationCharacter(locationCharacter);
			}
		}

		// Token: 0x0600338B RID: 13195 RVA: 0x000D616C File Offset: 0x000D436C
		public void ClearTempCharacters()
		{
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				keyValuePair.Value.RemoveAllCharacters();
			}
		}

		// Token: 0x0600338C RID: 13196 RVA: 0x000D61C4 File Offset: 0x000D43C4
		public Location GetLocationWithId(string id)
		{
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				if (keyValuePair.Key == id)
				{
					return keyValuePair.Value;
				}
			}
			return null;
		}

		// Token: 0x0600338D RID: 13197 RVA: 0x000D622C File Offset: 0x000D442C
		public string GetScene(string stringId, int upgradeLevel)
		{
			return this.GetLocationWithId(stringId).GetSceneName(upgradeLevel);
		}

		// Token: 0x0600338E RID: 13198 RVA: 0x000D623C File Offset: 0x000D443C
		public LocationCharacter FindCharacter(IAgent agent)
		{
			LocationCharacter locationCharacter = null;
			foreach (KeyValuePair<string, Location> keyValuePair in this._locations)
			{
				locationCharacter = keyValuePair.Value.GetLocationCharacter(agent.Origin);
				if (locationCharacter != null)
				{
					break;
				}
			}
			return locationCharacter;
		}

		// Token: 0x0600338F RID: 13199 RVA: 0x000D62A4 File Offset: 0x000D44A4
		public IEnumerable<Location> FindAll(Func<string, bool> predicate)
		{
			return from kv in this._locations
			where predicate(kv.Key)
			select kv.Value;
		}

		// Token: 0x0400109D RID: 4253
		[SaveableField(1)]
		private readonly Dictionary<string, Location> _locations;
	}
}
