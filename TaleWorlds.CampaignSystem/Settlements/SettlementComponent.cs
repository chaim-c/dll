using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x0200035C RID: 860
	public abstract class SettlementComponent : MBObjectBase
	{
		// Token: 0x060031C5 RID: 12741 RVA: 0x000D0CE2 File Offset: 0x000CEEE2
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060031C6 RID: 12742 RVA: 0x000D0CEB File Offset: 0x000CEEEB
		internal static object AutoGeneratedGetMemberValueGold(object o)
		{
			return ((SettlementComponent)o).Gold;
		}

		// Token: 0x060031C7 RID: 12743 RVA: 0x000D0CFD File Offset: 0x000CEEFD
		internal static object AutoGeneratedGetMemberValueIsOwnerUnassigned(object o)
		{
			return ((SettlementComponent)o).IsOwnerUnassigned;
		}

		// Token: 0x17000C01 RID: 3073
		// (get) Token: 0x060031C8 RID: 12744 RVA: 0x000D0D0F File Offset: 0x000CEF0F
		// (set) Token: 0x060031C9 RID: 12745 RVA: 0x000D0D17 File Offset: 0x000CEF17
		[SaveableProperty(50)]
		public int Gold { get; private set; }

		// Token: 0x060031CA RID: 12746 RVA: 0x000D0D20 File Offset: 0x000CEF20
		public virtual SettlementComponent.ProsperityLevel GetProsperityLevel()
		{
			return SettlementComponent.ProsperityLevel.Mid;
		}

		// Token: 0x17000C02 RID: 3074
		// (get) Token: 0x060031CB RID: 12747 RVA: 0x000D0D23 File Offset: 0x000CEF23
		// (set) Token: 0x060031CC RID: 12748 RVA: 0x000D0D2B File Offset: 0x000CEF2B
		public float BackgroundCropPosition { get; protected set; }

		// Token: 0x17000C03 RID: 3075
		// (get) Token: 0x060031CD RID: 12749 RVA: 0x000D0D34 File Offset: 0x000CEF34
		// (set) Token: 0x060031CE RID: 12750 RVA: 0x000D0D3C File Offset: 0x000CEF3C
		public string BackgroundMeshName { get; protected set; }

		// Token: 0x17000C04 RID: 3076
		// (get) Token: 0x060031CF RID: 12751 RVA: 0x000D0D45 File Offset: 0x000CEF45
		// (set) Token: 0x060031D0 RID: 12752 RVA: 0x000D0D4D File Offset: 0x000CEF4D
		public string WaitMeshName { get; protected set; }

		// Token: 0x17000C05 RID: 3077
		// (get) Token: 0x060031D1 RID: 12753 RVA: 0x000D0D56 File Offset: 0x000CEF56
		// (set) Token: 0x060031D2 RID: 12754 RVA: 0x000D0D5E File Offset: 0x000CEF5E
		public string CastleBackgroundMeshName { get; protected set; }

		// Token: 0x17000C06 RID: 3078
		// (get) Token: 0x060031D3 RID: 12755 RVA: 0x000D0D67 File Offset: 0x000CEF67
		// (set) Token: 0x060031D4 RID: 12756 RVA: 0x000D0D70 File Offset: 0x000CEF70
		public PartyBase Owner
		{
			get
			{
				return this._owner;
			}
			internal set
			{
				if (this._owner != value)
				{
					if (this._owner != null)
					{
						this._owner.ItemRoster.RosterUpdatedEvent -= this.OnInventoryUpdated;
					}
					this._owner = value;
					if (this._owner != null)
					{
						this._owner.ItemRoster.RosterUpdatedEvent += this.OnInventoryUpdated;
					}
				}
			}
		}

		// Token: 0x17000C07 RID: 3079
		// (get) Token: 0x060031D5 RID: 12757 RVA: 0x000D0DD7 File Offset: 0x000CEFD7
		public Settlement Settlement
		{
			get
			{
				return this._owner.Settlement;
			}
		}

		// Token: 0x060031D6 RID: 12758
		protected abstract void OnInventoryUpdated(ItemRosterElement item, int count);

		// Token: 0x17000C08 RID: 3080
		// (get) Token: 0x060031D7 RID: 12759 RVA: 0x000D0DE4 File Offset: 0x000CEFE4
		public TextObject Name
		{
			get
			{
				return this.Owner.Name;
			}
		}

		// Token: 0x17000C09 RID: 3081
		// (get) Token: 0x060031D9 RID: 12761 RVA: 0x000D0DF9 File Offset: 0x000CEFF9
		// (set) Token: 0x060031DA RID: 12762 RVA: 0x000D0E01 File Offset: 0x000CF001
		[SaveableProperty(80)]
		public bool IsOwnerUnassigned { get; set; }

		// Token: 0x060031DB RID: 12763 RVA: 0x000D0E0A File Offset: 0x000CF00A
		public virtual void OnPartyEntered(MobileParty mobileParty)
		{
		}

		// Token: 0x060031DC RID: 12764 RVA: 0x000D0E0C File Offset: 0x000CF00C
		public virtual void OnPartyLeft(MobileParty mobileParty)
		{
		}

		// Token: 0x060031DD RID: 12765 RVA: 0x000D0E0E File Offset: 0x000CF00E
		public virtual void OnInit()
		{
		}

		// Token: 0x060031DE RID: 12766 RVA: 0x000D0E10 File Offset: 0x000CF010
		public void ChangeGold(int changeAmount)
		{
			this.Gold += changeAmount;
			if (this.Gold < 0)
			{
				this.Gold = 0;
			}
		}

		// Token: 0x060031DF RID: 12767 RVA: 0x000D0E30 File Offset: 0x000CF030
		public int GetNumberOfTroops()
		{
			int num = 0;
			foreach (MobileParty mobileParty in this.Owner.Settlement.Parties)
			{
				if (mobileParty.IsMilitia || mobileParty.IsGarrison)
				{
					num += mobileParty.Party.NumberOfAllMembers;
				}
			}
			return num;
		}

		// Token: 0x060031E0 RID: 12768 RVA: 0x000D0EA8 File Offset: 0x000CF0A8
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
		}

		// Token: 0x060031E1 RID: 12769 RVA: 0x000D0EB2 File Offset: 0x000CF0B2
		public virtual int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
		{
			return 0;
		}

		// Token: 0x060031E2 RID: 12770 RVA: 0x000D0EB5 File Offset: 0x000CF0B5
		public virtual int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
		{
			return 0;
		}

		// Token: 0x17000C0A RID: 3082
		// (get) Token: 0x060031E3 RID: 12771 RVA: 0x000D0EB8 File Offset: 0x000CF0B8
		public virtual bool IsTown
		{
			get
			{
				return false;
			}
		}

		// Token: 0x17000C0B RID: 3083
		// (get) Token: 0x060031E4 RID: 12772 RVA: 0x000D0EBB File Offset: 0x000CF0BB
		public virtual bool IsCastle
		{
			get
			{
				return false;
			}
		}

		// Token: 0x060031E5 RID: 12773 RVA: 0x000D0EBE File Offset: 0x000CF0BE
		public virtual void OnRelatedPartyRemoved(MobileParty mobileParty)
		{
		}

		// Token: 0x060031E6 RID: 12774 RVA: 0x000D0EC0 File Offset: 0x000CF0C0
		public List<CharacterObject> GetPrisonerHeroes()
		{
			List<PartyBase> list = new List<PartyBase>
			{
				this.Owner
			};
			foreach (MobileParty mobileParty in this.Owner.Settlement.Parties)
			{
				if (mobileParty.IsGarrison)
				{
					list.Add(mobileParty.Party);
				}
			}
			List<CharacterObject> list2 = new List<CharacterObject>();
			foreach (PartyBase partyBase in list)
			{
				for (int i = 0; i < partyBase.PrisonRoster.Count; i++)
				{
					for (int j = 0; j < partyBase.PrisonRoster.GetElementNumber(i); j++)
					{
						CharacterObject character = partyBase.PrisonRoster.GetElementCopyAtIndex(i).Character;
						if (character.IsHero)
						{
							list2.Add(character);
						}
					}
				}
			}
			return list2;
		}

		// Token: 0x04001023 RID: 4131
		private PartyBase _owner;

		// Token: 0x020006A0 RID: 1696
		public enum ProsperityLevel
		{
			// Token: 0x04001B93 RID: 7059
			Low,
			// Token: 0x04001B94 RID: 7060
			Mid,
			// Token: 0x04001B95 RID: 7061
			High,
			// Token: 0x04001B96 RID: 7062
			NumberOfLevels
		}
	}
}
