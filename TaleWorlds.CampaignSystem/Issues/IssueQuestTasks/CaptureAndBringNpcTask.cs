using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks
{
	// Token: 0x02000322 RID: 802
	public class CaptureAndBringNpcTask : QuestTaskBase
	{
		// Token: 0x06002E10 RID: 11792 RVA: 0x000C1280 File Offset: 0x000BF480
		internal static void AutoGeneratedStaticCollectObjectsCaptureAndBringNpcTask(object o, List<object> collectedObjects)
		{
			((CaptureAndBringNpcTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002E11 RID: 11793 RVA: 0x000C128E File Offset: 0x000BF48E
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._targetHero);
		}

		// Token: 0x06002E12 RID: 11794 RVA: 0x000C12A3 File Offset: 0x000BF4A3
		internal static object AutoGeneratedGetMemberValue_targetHero(object o)
		{
			return ((CaptureAndBringNpcTask)o)._targetHero;
		}

		// Token: 0x06002E13 RID: 11795 RVA: 0x000C12B0 File Offset: 0x000BF4B0
		public CaptureAndBringNpcTask(Hero targetHero, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null) : base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._targetHero = targetHero;
		}

		// Token: 0x06002E14 RID: 11796 RVA: 0x000C12C8 File Offset: 0x000BF4C8
		private DialogFlow GetTakePrisonerDialogFlow()
		{
			return DialogFlow.CreateDialogFlow("lord_start", int.MaxValue).NpcLine("{=2vcfifbb}I yield", null, null).Condition(() => Hero.OneToOneConversationHero == this._targetHero && this.isFinishedSuccess).BeginPlayerOptions().PlayerOption("{=cbzJRaDJ}You are my prisoner now!", null).GotoDialogState("lord_start").Consequence(delegate
			{
				TakePrisonerAction.Apply(Hero.MainHero.PartyBelongedTo.Party, this._targetHero);
			}).EndPlayerOptions();
		}

		// Token: 0x06002E15 RID: 11797 RVA: 0x000C1334 File Offset: 0x000BF534
		public void OnPlayerBattleEnd(MapEvent mapEvent)
		{
			if (PartyBase.MainParty.Side == mapEvent.WinningSide)
			{
				using (IEnumerator<PartyBase> enumerator = mapEvent.InvolvedParties.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.Side == mapEvent.DefeatedSide)
						{
							using (IEnumerator<CharacterObject> enumerator2 = PartyBase.MainParty.PrisonerHeroes.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									if (enumerator2.Current == this._targetHero.CharacterObject)
									{
										base.Finish(QuestTaskBase.FinishStates.Success);
										break;
									}
								}
							}
						}
						if (!base.IsActive)
						{
							break;
						}
					}
				}
			}
		}

		// Token: 0x06002E16 RID: 11798 RVA: 0x000C13F4 File Offset: 0x000BF5F4
		protected override void OnFinished()
		{
			this._targetHero = null;
		}

		// Token: 0x06002E17 RID: 11799 RVA: 0x000C13FD File Offset: 0x000BF5FD
		public override void SetReferences()
		{
			CampaignEvents.OnPlayerBattleEndEvent.AddNonSerializedListener(this, new Action<MapEvent>(this.OnPlayerBattleEnd));
		}

		// Token: 0x04000DC6 RID: 3526
		[SaveableField(10)]
		private Hero _targetHero;

		// Token: 0x04000DC7 RID: 3527
		public bool isFinishedSuccess;
	}
}
