using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using TaleWorlds.Library;

namespace TaleWorlds.DotNet
{
	// Token: 0x02000022 RID: 34
	public static class Managed
	{
		// Token: 0x17000018 RID: 24
		// (get) Token: 0x06000089 RID: 137 RVA: 0x00002F7D File Offset: 0x0000117D
		// (set) Token: 0x0600008A RID: 138 RVA: 0x00002F84 File Offset: 0x00001184
		internal static bool Closing { get; private set; }

		// Token: 0x17000019 RID: 25
		// (get) Token: 0x0600008B RID: 139 RVA: 0x00002F8C File Offset: 0x0000118C
		internal static Dictionary<string, Type> ModuleTypes
		{
			get
			{
				return Managed._moduleTypes;
			}
		}

		// Token: 0x1700001A RID: 26
		// (get) Token: 0x0600008C RID: 140 RVA: 0x00002F93 File Offset: 0x00001193
		// (set) Token: 0x0600008D RID: 141 RVA: 0x00002F9A File Offset: 0x0000119A
		internal static NativeTelemetryManager NativeTelemetryManager { get; private set; }

		// Token: 0x0600008E RID: 142 RVA: 0x00002FA4 File Offset: 0x000011A4
		static Managed()
		{
			Managed._components = new List<IManagedComponent>();
			Managed.Closing = false;
			Managed.NativeTelemetryManager = new NativeTelemetryManager();
			Debug.TelemetryManager = Managed.NativeTelemetryManager;
		}

		// Token: 0x1700001B RID: 27
		// (get) Token: 0x0600008F RID: 143 RVA: 0x00003027 File Offset: 0x00001227
		public static string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.DotNet.AutoGenerated.dll";
			}
		}

		// Token: 0x06000090 RID: 144 RVA: 0x00003038 File Offset: 0x00001238
		[LibraryCallback]
		internal static void SetLogsFolder(string logFolder)
		{
		}

		// Token: 0x06000091 RID: 145 RVA: 0x0000303C File Offset: 0x0000123C
		[LibraryCallback]
		public static string GetStackTraceStr(int skipCount = 0)
		{
			string text = new StackTrace(skipCount, true).ToString();
			text = text.Replace("\r", "");
			text = text.Replace("   ", "");
			if (text.Length >= 16)
			{
				return text;
			}
			return "";
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00003089 File Offset: 0x00001289
		[LibraryCallback]
		public static string GetStackTraceRaw(int skipCount = 0)
		{
			return Managed.GetStackTraceRaw(new StackTrace(0, false), skipCount);
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00003098 File Offset: 0x00001298
		public static string GetStackTraceRaw(StackTrace stack, int skipCount = 0)
		{
			MBStringBuilder mbstringBuilder = default(MBStringBuilder);
			mbstringBuilder.Initialize(16, "GetStackTraceRaw");
			for (int i = 0; i < stack.FrameCount; i++)
			{
				if (i >= skipCount)
				{
					string text = "unknown_module.dll";
					try
					{
						StackFrame frame = stack.GetFrame(i);
						MethodBase method = frame.GetMethod();
						text = method.Module.Assembly.Location;
						int iloffset = frame.GetILOffset();
						int metadataToken = method.MetadataToken;
						mbstringBuilder.AppendLine<string>(string.Concat(new object[]
						{
							text,
							"@",
							metadataToken,
							"@",
							iloffset
						}));
					}
					catch
					{
						mbstringBuilder.AppendLine<string>(text + "@-1@-1");
					}
				}
			}
			return mbstringBuilder.ToStringAndRelease();
		}

		// Token: 0x06000094 RID: 148 RVA: 0x00003178 File Offset: 0x00001378
		[LibraryCallback]
		public static string GetModuleList()
		{
			Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
			string text = "";
			foreach (Assembly assembly in assemblies)
			{
				try
				{
					text += assembly.Location;
					text += "\n";
				}
				catch
				{
				}
			}
			return text;
		}

		// Token: 0x06000095 RID: 149 RVA: 0x000031D8 File Offset: 0x000013D8
		[LibraryCallback]
		public static void GetVersionInts(ref int major, ref int minor, ref int revision)
		{
			ApplicationVersion applicationVersion = ApplicationVersion.FromParametersFile(null);
			major = applicationVersion.Major;
			minor = applicationVersion.Minor;
			revision = applicationVersion.Revision;
		}

		// Token: 0x06000096 RID: 150 RVA: 0x00003207 File Offset: 0x00001407
		[LibraryCallback]
		internal static DotNetObject CreateCustomParameterStringArray(int length)
		{
			return new CustomParameter<string[]>(new string[length]);
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00003214 File Offset: 0x00001414
		internal static DotNetObject AddCustomParameter<T>(T parameterData) where T : class
		{
			return new CustomParameter<T>(parameterData);
		}

		// Token: 0x06000098 RID: 152 RVA: 0x0000321C File Offset: 0x0000141C
		[LibraryCallback]
		internal static void GarbageCollect(bool forceTimer)
		{
			Common.MemoryCleanupGC(forceTimer);
		}

		// Token: 0x06000099 RID: 153 RVA: 0x00003224 File Offset: 0x00001424
		[LibraryCallback]
		internal static void SetStringArrayValueAtIndex(string[] array, int index, string value)
		{
			array[index] = value;
		}

		// Token: 0x0600009A RID: 154 RVA: 0x0000322A File Offset: 0x0000142A
		[LibraryCallback]
		internal static string GetStringArrayValueAtIndex(string[] array, int index)
		{
			return array[index];
		}

		// Token: 0x0600009B RID: 155 RVA: 0x0000322F File Offset: 0x0000142F
		internal static void PassInitializationMethodPointersForMono(IntPtr a, IntPtr b)
		{
			Managed.PassManagedInitializeMethodPointerMono = (Managed.PassManagedInitializeMethodPointerDelegate)Marshal.GetDelegateForFunctionPointer(a, typeof(Managed.PassManagedInitializeMethodPointerDelegate));
			Managed.PassManagedEngineCallbackMethodPointersMono = (Managed.PassManagedCallbackMethodPointersDelegate)Marshal.GetDelegateForFunctionPointer(b, typeof(Managed.PassManagedCallbackMethodPointersDelegate));
		}

		// Token: 0x0600009C RID: 156 RVA: 0x00003265 File Offset: 0x00001465
		public static void PassInitializationMethodPointersForDotNet(Delegate a, Delegate b)
		{
			Managed.PassManagedInitializeMethodPointerMono = a;
			Managed.PassManagedEngineCallbackMethodPointersMono = b;
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00003274 File Offset: 0x00001474
		public static void Start(IEnumerable<IManagedComponent> components)
		{
			Managed._components.AddRange(components);
			Common.SetInvariantCulture();
			AppDomain.CurrentDomain.AppendPrivatePath(ManagedDllFolder.Name);
			AssemblyLoader.Initialize();
			Managed._initializer = new ManagedInitializeMethod(Managed.Initialize);
			Managed.PassManagedInitializeMethodPointer(Managed._initializer);
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnStart();
			}
		}

		// Token: 0x0600009E RID: 158 RVA: 0x000032E8 File Offset: 0x000014E8
		[MonoPInvokeCallback(typeof(ManagedInitializeMethod))]
		private static void Initialize()
		{
			Common.SetInvariantCulture();
			List<Type> typesSafe = AssemblyLoader.LoadFrom(Managed.ManagedCallbacksDll, true).GetTypesSafe(null);
			Type type = null;
			foreach (Type type2 in typesSafe)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			Managed._callbackManager = (type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager);
			Managed._callbackManager.Initialize();
			Delegate[] delegates = Managed._callbackManager.GetDelegates();
			for (int i = 0; i < delegates.Length; i++)
			{
				try
				{
					Managed.PassManagedEngineCallbackMethodPointers(delegates[i]);
				}
				catch (Exception arg)
				{
					Managed.PassManagedEngineCallbackMethodPointers(null);
					Console.WriteLine(arg + " " + i);
				}
			}
			LibraryApplicationInterface.SetObjects(Managed._callbackManager.GetScriptingInterfaceObjects());
		}

		// Token: 0x0600009F RID: 159 RVA: 0x000033F0 File Offset: 0x000015F0
		[LibraryCallback]
		internal static void CheckSharedStructureSizes()
		{
			Managed._callbackManager.CheckSharedStructureSizes();
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x000033FC File Offset: 0x000015FC
		[LibraryCallback]
		internal static void SetClosing()
		{
			Managed.Closing = true;
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x00003404 File Offset: 0x00001604
		[LibraryCallback]
		internal static void PreFinalize()
		{
			Managed.Closing = true;
			Managed._moduleTypes = null;
			ManagedObjectOwner.PreFinalizeManagedObjects();
			Common.MemoryCleanupGC(false);
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x0000341D File Offset: 0x0000161D
		[LibraryCallback]
		internal static void OnFinalize()
		{
			ManagedObject.FinalizeManagedObjects();
			Common.MemoryCleanupGC(false);
			ManagedObjectOwner.LogFinalize();
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00003430 File Offset: 0x00001630
		[LibraryCallback]
		internal static void ApplicationTick(float dt)
		{
			ManagedObject.HandleManagedObjects();
			DotNetObject.HandleDotNetObjects();
			NativeObject.HandleNativeObjects();
			ManagedObjectOwner.GarbageCollect();
			Managed.NativeTelemetryManager.Update();
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnApplicationTick(dt);
			}
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00003484 File Offset: 0x00001684
		[LibraryCallback]
		internal static void ApplicationTickLight(float dt)
		{
			DotNetObject.HandleDotNetObjects();
			NativeObject.HandleNativeObjects();
			Managed.NativeTelemetryManager.Update();
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnApplicationTick(dt);
			}
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x000034CB File Offset: 0x000016CB
		[LibraryCallback]
		internal static bool CheckClassNameIsValid(string className)
		{
			return Managed._moduleTypes.ContainsKey(className);
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x000034D8 File Offset: 0x000016D8
		[LibraryCallback]
		internal static int GetStringArrayLength(string[] array)
		{
			return array.Length;
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x000034E0 File Offset: 0x000016E0
		[LibraryCallback]
		internal static string[] GetClassFields(string className, bool recursive, bool includeInternal, bool includeProtected, bool includePrivate)
		{
			List<string> list = new List<string>();
			Type type;
			if (Managed._moduleTypes.TryGetValue(className, out type))
			{
				FieldInfo[] fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
				for (int i = 0; i < fields.Length; i++)
				{
					FieldInfo fieldInfo = fields[i];
					if (false || fieldInfo.IsPublic || (includePrivate && fieldInfo.IsPrivate) || (includeProtected && fieldInfo.IsFamily) || (includeInternal && fieldInfo.IsAssembly))
					{
						list.Add(fields[i].Name);
					}
				}
			}
			return list.ToArray();
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x00003578 File Offset: 0x00001778
		[LibraryCallback]
		internal static ManagedObject CreateObjectClassInstanceWithPointer(string className, IntPtr pointer)
		{
			ConstructorInfo constructor = Managed._moduleTypes[className].GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[]
			{
				typeof(IntPtr)
			}, null);
			if (constructor != null)
			{
				object obj = constructor.Invoke(new object[]
				{
					pointer
				});
				if (obj != null)
				{
					return obj as ManagedObject;
				}
			}
			return null;
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x000035DC File Offset: 0x000017DC
		internal static string GetClassNamesAux(Type type)
		{
			string text = "";
			Predicate<Type> <>9__0;
			foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
			{
				if (!assembly.GlobalAssemblyCache)
				{
					try
					{
						Type[] types = assembly.GetTypes();
						Predicate<Type> match;
						if ((match = <>9__0) == null)
						{
							match = (<>9__0 = ((Type t) => (t.Equals(type) || t.IsSubclassOf(type)) && !t.IsAbstract));
						}
						string[] array = Array.ConvertAll<Type, string>(Array.FindAll<Type>(types, match), (Type t) => t.Name);
						if (array.Length != 0)
						{
							if (text != "")
							{
								text += " ";
							}
							text += string.Join(" ", array);
						}
					}
					catch (ReflectionTypeLoadException ex)
					{
						Debug.Print(ex.Message + " " + ex.GetType(), 0, Debug.DebugColor.White, 17592186044416UL);
						foreach (object obj in ex.Data.Values)
						{
							Debug.Print(obj.ToString(), 0, Debug.DebugColor.White, 17592186044416UL);
						}
					}
				}
			}
			return text;
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00003750 File Offset: 0x00001950
		[LibraryCallback]
		internal static ManagedObject CreateObjectClassInstanceWithInteger(string className, int value)
		{
			ConstructorInfo constructor = Managed._moduleTypes[className].GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[]
			{
				typeof(int)
			}, null);
			if (constructor != null)
			{
				object obj = constructor.Invoke(new object[]
				{
					value
				});
				if (obj != null)
				{
					return obj as ManagedObject;
				}
			}
			return null;
		}

		// Token: 0x060000AB RID: 171 RVA: 0x000037B2 File Offset: 0x000019B2
		[LibraryCallback]
		internal static void SetCurrentStringReturnValue(IntPtr pointer)
		{
			Managed.ReturnValueFromEngine = Marshal.PtrToStringAnsi(pointer);
		}

		// Token: 0x060000AC RID: 172 RVA: 0x000037C0 File Offset: 0x000019C0
		[LibraryCallback]
		internal static void SetCurrentStringReturnValueAsUnicode(IntPtr pointer)
		{
			Managed.ReturnValueFromEngine = Marshal.PtrToStringAnsi(pointer);
			byte[] bytes = Encoding.Default.GetBytes(Managed.ReturnValueFromEngine);
			byte[] bytes2 = Encoding.Convert(Encoding.UTF8, Encoding.Unicode, bytes);
			Managed.ReturnValueFromEngine = Encoding.Unicode.GetString(bytes2);
		}

		// Token: 0x060000AD RID: 173 RVA: 0x0000380C File Offset: 0x00001A0C
		[LibraryCallback]
		internal static string GetObjectClassName(string className)
		{
			Type type;
			if (Managed._moduleTypes.TryGetValue(className, out type))
			{
				return type.Name;
			}
			return "unknown";
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00003834 File Offset: 0x00001A34
		[LibraryCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			Managed._engineApiPointers.Add(id, pointer);
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00003844 File Offset: 0x00001A44
		[LibraryCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in Managed._engineApiPointers)
			{
				try
				{
					Managed._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[]
					{
						"error: ",
						keyValuePair.Key,
						" ",
						ex
					}));
				}
			}
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x000038EC File Offset: 0x00001AEC
		[LibraryCallback]
		internal static long GetMemoryUsage()
		{
			return GC.GetTotalMemory(false);
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x000038F4 File Offset: 0x00001AF4
		[LibraryCallback]
		internal static void PassCustomCallbackMethodPointers(string name, IntPtr initalizer)
		{
			Delegate delegateForFunctionPointer = Marshal.GetDelegateForFunctionPointer(initalizer, typeof(Managed.InitializerDelegate));
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnCustomCallbackMethodPassed(name, delegateForFunctionPointer);
			}
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x0000393C File Offset: 0x00001B3C
		[LibraryCallback]
		internal static string CallCommandlineFunction(string functionName, string arguments)
		{
			bool flag;
			return CommandLineFunctionality.CallFunction(functionName, arguments, out flag);
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00003954 File Offset: 0x00001B54
		public static void InitializeTypes(Dictionary<string, Type> types)
		{
			Managed._moduleTypes = types;
			foreach (KeyValuePair<string, Type> keyValuePair in types)
			{
				Dictionary<string, FieldInfo> dictionary = new Dictionary<string, FieldInfo>();
				Dictionary<string, FieldInfo> dictionary2 = new Dictionary<string, FieldInfo>();
				BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
				foreach (FieldInfo fieldInfo in keyValuePair.Value.GetFields(bindingFlags))
				{
					string name = fieldInfo.Name;
					object[] customAttributesSafe = fieldInfo.GetCustomAttributesSafe(typeof(EditableScriptComponentVariable), true);
					bool flag = false;
					if (customAttributesSafe.Length != 0)
					{
						flag = ((EditableScriptComponentVariable)customAttributesSafe[0]).Visible;
					}
					else if (!fieldInfo.IsPrivate && !fieldInfo.IsFamily)
					{
						flag = true;
					}
					if (flag)
					{
						dictionary2.Add(name, fieldInfo);
					}
					dictionary.Add(name, fieldInfo);
				}
				Managed._fieldsOfScriptsCached.Add(keyValuePair.Key, dictionary);
				Managed._editableFieldsOfScriptsCached.Add(keyValuePair.Key, dictionary2);
				bindingFlags |= BindingFlags.CreateInstance;
				ConstructorInfo constructor = keyValuePair.Value.GetConstructor(bindingFlags, null, new Type[0], null);
				Managed._constructorsOfScriptsCached.Add(keyValuePair.Key, constructor);
			}
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00003AAC File Offset: 0x00001CAC
		public static void AddTypes(Dictionary<string, Type> types)
		{
			Managed._moduleTypes = Managed._moduleTypes.Union(types).ToDictionary((KeyValuePair<string, Type> k) => k.Key, (KeyValuePair<string, Type> v) => v.Value);
			foreach (KeyValuePair<string, Type> keyValuePair in types)
			{
				Dictionary<string, FieldInfo> dictionary = new Dictionary<string, FieldInfo>();
				Dictionary<string, FieldInfo> dictionary2 = new Dictionary<string, FieldInfo>();
				BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
				foreach (FieldInfo fieldInfo in keyValuePair.Value.GetFields(bindingFlags))
				{
					string name = fieldInfo.Name;
					object[] customAttributesSafe = fieldInfo.GetCustomAttributesSafe(typeof(EditableScriptComponentVariable), true);
					bool flag = false;
					if (customAttributesSafe.Length != 0)
					{
						flag = ((EditableScriptComponentVariable)customAttributesSafe[0]).Visible;
					}
					else if (!fieldInfo.IsPrivate && !fieldInfo.IsFamily)
					{
						flag = true;
					}
					if (flag)
					{
						dictionary2.Add(name, fieldInfo);
					}
					dictionary.Add(name, fieldInfo);
				}
				Managed._fieldsOfScriptsCached.Add(keyValuePair.Key, dictionary);
				Managed._editableFieldsOfScriptsCached.Add(keyValuePair.Key, dictionary2);
				bindingFlags |= BindingFlags.CreateInstance;
				ConstructorInfo constructor = keyValuePair.Value.GetConstructor(bindingFlags, null, new Type[0], null);
				Managed._constructorsOfScriptsCached.Add(keyValuePair.Key, constructor);
			}
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00003C50 File Offset: 0x00001E50
		public static void AddConstructorDelegateOfClass<T>()
		{
			Type typeFromHandle = typeof(T);
			string name = typeFromHandle.Name;
			if (!Managed._constructorDelegatesOfScriptsCached.ContainsKey(name))
			{
				Managed._constructorDelegatesOfScriptsCached[name] = Expression.Lambda<Func<T>>(Expression.New(typeFromHandle), Array.Empty<ParameterExpression>()).Compile();
			}
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00003C9C File Offset: 0x00001E9C
		public static void AddConstructorDelegateOfWeakReferenceClass<T>()
		{
			Type typeFromHandle = typeof(T);
			if (!Managed._constructorDelegatesOfWeakReferencesCached.ContainsKey(typeFromHandle))
			{
				Managed._constructorDelegatesOfWeakReferencesCached[typeFromHandle] = Expression.Lambda<Func<T>>(Expression.New(typeFromHandle), Array.Empty<ParameterExpression>()).Compile();
			}
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00003CE1 File Offset: 0x00001EE1
		private static void PassManagedInitializeMethodPointer(Delegate initializer)
		{
			Delegate passManagedInitializeMethodPointerMono = Managed.PassManagedInitializeMethodPointerMono;
			if (passManagedInitializeMethodPointerMono == null)
			{
				return;
			}
			passManagedInitializeMethodPointerMono.DynamicInvoke(new object[]
			{
				initializer
			});
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00003CFD File Offset: 0x00001EFD
		private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
		{
			Delegate passManagedEngineCallbackMethodPointersMono = Managed.PassManagedEngineCallbackMethodPointersMono;
			if (passManagedEngineCallbackMethodPointersMono == null)
			{
				return;
			}
			passManagedEngineCallbackMethodPointersMono.DynamicInvoke(new object[]
			{
				methodDelegate
			});
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00003D1C File Offset: 0x00001F1C
		[LibraryCallback]
		internal static void LoadManagedComponent(string assemblyName, string managedInterface)
		{
			IManagedComponent managedComponent = (IManagedComponent)Activator.CreateInstance(AssemblyLoader.LoadFrom(ManagedDllFolder.Name + assemblyName + ".dll", true).GetType(managedInterface));
			Managed._components.Add(managedComponent);
			managedComponent.OnStart();
		}

		// Token: 0x060000BA RID: 186 RVA: 0x00003D64 File Offset: 0x00001F64
		internal static Dictionary<string, FieldInfo> GetEditableFieldsOfClass(string className)
		{
			Dictionary<string, FieldInfo> result;
			Managed._editableFieldsOfScriptsCached.TryGetValue(className, out result);
			return result;
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00003D80 File Offset: 0x00001F80
		internal static FieldInfo GetFieldOfClass(string className, string fieldName)
		{
			Dictionary<string, FieldInfo> dictionary;
			if (Managed._fieldsOfScriptsCached.TryGetValue(className, out dictionary))
			{
				FieldInfo result;
				dictionary.TryGetValue(fieldName, out result);
				return result;
			}
			return null;
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00003DAC File Offset: 0x00001FAC
		internal static ConstructorInfo GetConstructorOfClass(string className)
		{
			ConstructorInfo result;
			Managed._constructorsOfScriptsCached.TryGetValue(className, out result);
			return result;
		}

		// Token: 0x060000BD RID: 189 RVA: 0x00003DC8 File Offset: 0x00001FC8
		internal static Delegate GetConstructorDelegateOfClass(string className)
		{
			Delegate result;
			Managed._constructorDelegatesOfScriptsCached.TryGetValue(className, out result);
			return result;
		}

		// Token: 0x060000BE RID: 190 RVA: 0x00003DE4 File Offset: 0x00001FE4
		internal static Delegate GetConstructorDelegateOfWeakReferenceClass(Type classType)
		{
			return Managed._constructorDelegatesOfWeakReferencesCached[classType];
		}

		// Token: 0x060000BF RID: 191 RVA: 0x00003DF1 File Offset: 0x00001FF1
		[LibraryCallback]
		internal static bool IsClassFieldExists(string className, string fieldName)
		{
			return Managed.GetFieldOfClass(className, fieldName) != null;
		}

		// Token: 0x060000C0 RID: 192 RVA: 0x00003E00 File Offset: 0x00002000
		[LibraryCallback]
		internal static string GetEnumNamesOfField(string className, string fieldName)
		{
			string text = Managed.GetFieldOfClass(className, fieldName).FieldType.FullName;
			string text2 = text.Substring(0, text.IndexOf('.'));
			if (text2 != null && text2 != "" && text2 != Assembly.GetExecutingAssembly().GetName().Name)
			{
				text = text + ", " + text2;
			}
			Type type = Type.GetType(text);
			if (type == null)
			{
				int startIndex = text.IndexOf(',');
				text = text.Remove(startIndex);
				Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
				for (int i = 0; i < assemblies.Length; i++)
				{
					type = assemblies[i].GetType(text);
					if (type != null)
					{
						break;
					}
				}
			}
			type.GetEnumValues();
			string[] enumNames = type.GetEnumNames();
			return string.Join(" ", enumNames);
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x00003ED4 File Offset: 0x000020D4
		[CommandLineFunctionality.CommandLineArgumentFunction("show_version", "dotnet")]
		public static string ShowDotNetVersion(List<string> strings)
		{
			string frameworkDescription = RuntimeInformation.FrameworkDescription;
			Debug.Print("Version:" + frameworkDescription, 0, Debug.DebugColor.White, 17592186044416UL);
			return frameworkDescription;
		}

		// Token: 0x04000039 RID: 57
		private static List<IManagedComponent> _components;

		// Token: 0x0400003B RID: 59
		private static ICallbackManager _callbackManager;

		// Token: 0x0400003C RID: 60
		internal static string ReturnValueFromEngine = "";

		// Token: 0x0400003D RID: 61
		private static ManagedInitializeMethod _initializer;

		// Token: 0x0400003E RID: 62
		private static Dictionary<string, Type> _moduleTypes;

		// Token: 0x0400003F RID: 63
		private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		// Token: 0x04000040 RID: 64
		private static Dictionary<string, Dictionary<string, FieldInfo>> _fieldsOfScriptsCached = new Dictionary<string, Dictionary<string, FieldInfo>>();

		// Token: 0x04000041 RID: 65
		private static Dictionary<string, Dictionary<string, FieldInfo>> _editableFieldsOfScriptsCached = new Dictionary<string, Dictionary<string, FieldInfo>>();

		// Token: 0x04000042 RID: 66
		private static Dictionary<string, ConstructorInfo> _constructorsOfScriptsCached = new Dictionary<string, ConstructorInfo>();

		// Token: 0x04000043 RID: 67
		private static Dictionary<string, Delegate> _constructorDelegatesOfScriptsCached = new Dictionary<string, Delegate>();

		// Token: 0x04000044 RID: 68
		private static Dictionary<Type, Delegate> _constructorDelegatesOfWeakReferencesCached = new Dictionary<Type, Delegate>();

		// Token: 0x04000046 RID: 70
		private static Delegate PassManagedInitializeMethodPointerMono = null;

		// Token: 0x04000047 RID: 71
		private static Delegate PassManagedEngineCallbackMethodPointersMono = null;

		// Token: 0x02000038 RID: 56
		// (Invoke) Token: 0x0600014B RID: 331
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		[MonoNativeFunctionWrapper]
		public delegate void PassManagedInitializeMethodPointerDelegate([MarshalAs(UnmanagedType.FunctionPtr)] Delegate initalizer);

		// Token: 0x02000039 RID: 57
		// (Invoke) Token: 0x0600014F RID: 335
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		[MonoNativeFunctionWrapper]
		public delegate void PassManagedCallbackMethodPointersDelegate([MarshalAs(UnmanagedType.FunctionPtr)] Delegate methodDelegate);

		// Token: 0x0200003A RID: 58
		// (Invoke) Token: 0x06000153 RID: 339
		[MonoNativeFunctionWrapper]
		public delegate void InitializerDelegate(Delegate argument);

		// Token: 0x0200003B RID: 59
		public enum RglScriptFieldType
		{
			// Token: 0x040000A0 RID: 160
			RglSftString,
			// Token: 0x040000A1 RID: 161
			RglSftDouble,
			// Token: 0x040000A2 RID: 162
			RglSftFloat,
			// Token: 0x040000A3 RID: 163
			RglSftBool,
			// Token: 0x040000A4 RID: 164
			RglSftInt,
			// Token: 0x040000A5 RID: 165
			RglSftVec3,
			// Token: 0x040000A6 RID: 166
			RglSftEntity,
			// Token: 0x040000A7 RID: 167
			RglSftTexture,
			// Token: 0x040000A8 RID: 168
			RglSftMesh,
			// Token: 0x040000A9 RID: 169
			RglSftEnum,
			// Token: 0x040000AA RID: 170
			RglSftMaterial,
			// Token: 0x040000AB RID: 171
			RglSftButton,
			// Token: 0x040000AC RID: 172
			RglSftColor,
			// Token: 0x040000AD RID: 173
			RglSftMatrixFrame
		}
	}
}
