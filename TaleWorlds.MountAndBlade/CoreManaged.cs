using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.DotNet;
using TaleWorlds.Library;

namespace TaleWorlds.MountAndBlade
{
	// Token: 0x0200024A RID: 586
	public class CoreManaged : IManagedComponent
	{
		// Token: 0x17000641 RID: 1601
		// (get) Token: 0x06001F6B RID: 8043 RVA: 0x0006F520 File Offset: 0x0006D720
		public string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.MountAndBlade.AutoGenerated.dll";
			}
		}

		// Token: 0x06001F6C RID: 8044 RVA: 0x0006F531 File Offset: 0x0006D731
		public CoreManaged()
		{
			CoreManaged._instance = this;
		}

		// Token: 0x06001F6D RID: 8045 RVA: 0x0006F53F File Offset: 0x0006D73F
		[MBCallback]
		public static void Start()
		{
			Managed.Start(new IManagedComponent[0]);
		}

		// Token: 0x06001F6E RID: 8046 RVA: 0x0006F54C File Offset: 0x0006D74C
		void IManagedComponent.OnStart()
		{
			Debug.DebugManager = new MBDebugManager();
			Dictionary<string, Type> dictionary = new Dictionary<string, Type>();
			foreach (Assembly moduleAssembly in AppDomain.CurrentDomain.GetAssemblies())
			{
				Dictionary<string, Type> second = this.CollectModuleAssemblyTypes(moduleAssembly);
				dictionary = dictionary.Union(second).ToDictionary((KeyValuePair<string, Type> k) => k.Key, (KeyValuePair<string, Type> v) => v.Value);
			}
			Managed.InitializeTypes(dictionary);
		}

		// Token: 0x06001F6F RID: 8047 RVA: 0x0006F5E4 File Offset: 0x0006D7E4
		private Dictionary<string, Type> CollectModuleAssemblyTypes(Assembly moduleAssembly)
		{
			Dictionary<string, Type> dictionary = new Dictionary<string, Type>();
			try
			{
				foreach (Type type in moduleAssembly.GetTypes())
				{
					if (typeof(ManagedObject).IsAssignableFrom(type) || typeof(DotNetObject).IsAssignableFrom(type))
					{
						dictionary.Add(type.Name, type);
					}
				}
			}
			catch (Exception)
			{
				dictionary.Clear();
			}
			return dictionary;
		}

		// Token: 0x06001F70 RID: 8048 RVA: 0x0006F660 File Offset: 0x0006D860
		[MBCallback]
		internal static void OnLoadCommonFinished()
		{
			FaceGen.CreateInstance();
		}

		// Token: 0x06001F71 RID: 8049 RVA: 0x0006F668 File Offset: 0x0006D868
		private void OnInitialize()
		{
			List<Type> typesSafe = AssemblyLoader.LoadFrom(this.ManagedCallbacksDll, true).GetTypesSafe(null);
			Type type = null;
			foreach (Type type2 in typesSafe)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			CoreManaged._callbackManager = (type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager);
			CoreManaged._callbackManager.Initialize();
			Delegate[] delegates = CoreManaged._callbackManager.GetDelegates();
			for (int i = 0; i < delegates.Length; i++)
			{
				try
				{
					CoreManaged.PassManagedCoreCallbackMethodPointers(delegates[i]);
				}
				catch (Exception arg)
				{
					CoreManaged.PassManagedCoreCallbackMethodPointers(null);
					Console.WriteLine(arg + " " + i);
				}
			}
			MBAPI.SetObjects(CoreManaged._callbackManager.GetScriptingInterfaceObjects());
			Module.CreateModule();
		}

		// Token: 0x06001F72 RID: 8050 RVA: 0x0006F770 File Offset: 0x0006D970
		void IManagedComponent.OnCustomCallbackMethodPassed(string name, Delegate method)
		{
			if (name == "MBCore")
			{
				CoreManaged._passManagedCoreCallbackMethodPointersMono = method;
				this.OnInitialize();
			}
		}

		// Token: 0x06001F73 RID: 8051 RVA: 0x0006F78B File Offset: 0x0006D98B
		[MBCallback]
		internal static void Finalize()
		{
			Module.FinalizeCurrentModule();
			Common.MemoryCleanupGC(false);
		}

		// Token: 0x06001F74 RID: 8052 RVA: 0x0006F798 File Offset: 0x0006D998
		void IManagedComponent.OnApplicationTick(float dt)
		{
			Module.CurrentModule.OnApplicationTick(dt);
		}

		// Token: 0x06001F75 RID: 8053 RVA: 0x0006F7A5 File Offset: 0x0006D9A5
		[MBCallback]
		internal static void CheckSharedStructureSizes()
		{
			CoreManaged._callbackManager.CheckSharedStructureSizes();
		}

		// Token: 0x06001F76 RID: 8054 RVA: 0x0006F7B1 File Offset: 0x0006D9B1
		[MBCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			CoreManaged._engineApiPointers.Add(id, pointer);
		}

		// Token: 0x06001F77 RID: 8055 RVA: 0x0006F7C0 File Offset: 0x0006D9C0
		[MBCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in CoreManaged._engineApiPointers)
			{
				try
				{
					CoreManaged._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[]
					{
						"error: ",
						keyValuePair.Key,
						" ",
						ex
					}));
				}
			}
		}

		// Token: 0x06001F78 RID: 8056 RVA: 0x0006F868 File Offset: 0x0006DA68
		private static void PassManagedCoreCallbackMethodPointers(Delegate methodDelegate)
		{
			Delegate passManagedCoreCallbackMethodPointersMono = CoreManaged._passManagedCoreCallbackMethodPointersMono;
			if (passManagedCoreCallbackMethodPointersMono == null)
			{
				return;
			}
			passManagedCoreCallbackMethodPointersMono.DynamicInvoke(new object[]
			{
				methodDelegate
			});
		}

		// Token: 0x04000B9F RID: 2975
		private static CoreManaged _instance;

		// Token: 0x04000BA0 RID: 2976
		private static ICallbackManager _callbackManager;

		// Token: 0x04000BA1 RID: 2977
		private static readonly Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		// Token: 0x04000BA2 RID: 2978
		private static Delegate _passManagedCoreCallbackMethodPointersMono = null;
	}
}
