using System;
using System.Runtime.InteropServices;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.MountAndBlade
{
	// Token: 0x0200037A RID: 890
	[EngineStruct("Weapon_data", "TaleWorlds.MountAndBlade.AutoGenerated.WeaponDataAsNative", false)]
	public struct WeaponData
	{
		// Token: 0x06003121 RID: 12577 RVA: 0x000CB9EE File Offset: 0x000C9BEE
		public bool IsValid()
		{
			return this.WeaponKind >= 0;
		}

		// Token: 0x06003122 RID: 12578 RVA: 0x000CB9FC File Offset: 0x000C9BFC
		public ItemObject GetItemObject()
		{
			return ((this.WeaponKind >= 0) ? MBObjectManager.Instance.GetObject(new MBGUID((uint)this.WeaponKind)) : null) as ItemObject;
		}

		// Token: 0x06003123 RID: 12579 RVA: 0x000CBA24 File Offset: 0x000C9C24
		public void DeinitializeManagedPointers()
		{
			if (this.WeaponMesh != null)
			{
				this.WeaponMesh.ManualInvalidate();
			}
			if (this.HolsterMesh != null)
			{
				this.HolsterMesh.ManualInvalidate();
			}
			if (this.HolsterMeshWithWeapon != null)
			{
				this.HolsterMeshWithWeapon.ManualInvalidate();
			}
			if (this.FlyingMesh != null)
			{
				this.FlyingMesh.ManualInvalidate();
			}
		}

		// Token: 0x040014DF RID: 5343
		public MetaMesh WeaponMesh;

		// Token: 0x040014E0 RID: 5344
		public MetaMesh HolsterMesh;

		// Token: 0x040014E1 RID: 5345
		public MetaMesh HolsterMeshWithWeapon;

		// Token: 0x040014E2 RID: 5346
		public MetaMesh FlyingMesh;

		// Token: 0x040014E3 RID: 5347
		[CustomEngineStructMemberData("prefab_name")]
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		public string Prefab;

		// Token: 0x040014E4 RID: 5348
		[CustomEngineStructMemberData("body")]
		public PhysicsShape Shape;

		// Token: 0x040014E5 RID: 5349
		[CustomEngineStructMemberData("collision_body")]
		public PhysicsShape CollisionShape;

		// Token: 0x040014E6 RID: 5350
		public Material TableauMaterial;

		// Token: 0x040014E7 RID: 5351
		public MatrixFrame WeaponFrame;

		// Token: 0x040014E8 RID: 5352
		public int PhysicsMaterialIndex;

		// Token: 0x040014E9 RID: 5353
		public int WeaponKind;

		// Token: 0x040014EA RID: 5354
		public StackArray.StackArray4Int ItemHolsterIndices;

		// Token: 0x040014EB RID: 5355
		public int Difficulty;

		// Token: 0x040014EC RID: 5356
		public float BaseWeight;

		// Token: 0x040014ED RID: 5357
		public float Inertia;

		// Token: 0x040014EE RID: 5358
		public short ReloadPhase;

		// Token: 0x040014EF RID: 5359
		public bool HasFlagAnimation;

		// Token: 0x040014F0 RID: 5360
		public Vec3 AmmoOffset;

		// Token: 0x040014F1 RID: 5361
		public MatrixFrame StickingFrame;

		// Token: 0x040014F2 RID: 5362
		public float ScaleFactor;

		// Token: 0x040014F3 RID: 5363
		public float CenterOfMass;

		// Token: 0x040014F4 RID: 5364
		[CustomEngineStructMemberData("center_of_mass_3d")]
		public Vec3 CenterOfMass3D;

		// Token: 0x040014F5 RID: 5365
		public Vec3 HolsterPositionShift;

		// Token: 0x040014F6 RID: 5366
		public int FlyingSoundCode;

		// Token: 0x040014F7 RID: 5367
		public int PassbySoundCode;

		// Token: 0x040014F8 RID: 5368
		[CustomEngineStructMemberData("flying_missile_trail_particle_name")]
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		public string TrailParticleName;

		// Token: 0x040014F9 RID: 5369
		public Vec3 CenterOfMassShift;

		// Token: 0x040014FA RID: 5370
		public short DataValue;

		// Token: 0x040014FB RID: 5371
		public int CurrentUsageIndex;

		// Token: 0x040014FC RID: 5372
		public float AirFrictionConstant;

		// Token: 0x040014FD RID: 5373
		public bool HasLowerHolsterPriority;

		// Token: 0x040014FE RID: 5374
		public float GlossMultiplier;

		// Token: 0x040014FF RID: 5375
		public static WeaponData InvalidWeaponData = new WeaponData
		{
			WeaponKind = -1
		};
	}
}
