using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks
{
	// Token: 0x02000019 RID: 25
	internal class ScriptingInterfaceOfIMBMission : IMBMission
	{
		// Token: 0x0600023F RID: 575 RVA: 0x0000B3C4 File Offset: 0x000095C4
		public void AddAiDebugText(UIntPtr missionPointer, string text)
		{
			byte[] array = null;
			if (text != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(text);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(text, 0, text.Length, array, 0);
				array[byteCount] = 0;
			}
			ScriptingInterfaceOfIMBMission.call_AddAiDebugTextDelegate(missionPointer, array);
		}

		// Token: 0x06000240 RID: 576 RVA: 0x0000B420 File Offset: 0x00009620
		public bool AddBoundary(UIntPtr missionPointer, string name, Vec2[] boundaryPoints, int boundaryPointCount, bool isAllowanceInside)
		{
			byte[] array = null;
			if (name != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(name);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, array, 0);
				array[byteCount] = 0;
			}
			PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			bool result = ScriptingInterfaceOfIMBMission.call_AddBoundaryDelegate(missionPointer, array, pointer, boundaryPointCount, isAllowanceInside);
			pinnedArrayData.Dispose();
			return result;
		}

		// Token: 0x06000241 RID: 577 RVA: 0x0000B498 File Offset: 0x00009698
		public int AddMissile(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(weaponData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			int result = ScriptingInterfaceOfIMBMission.call_AddMissileDelegate(missionPointer, isPrediction, shooterAgentIndex, weaponDataAsNative, pointer, weaponStatsDataLength, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
			pinnedArrayData.Dispose();
			return result;
		}

		// Token: 0x06000242 RID: 578 RVA: 0x0000B4F4 File Offset: 0x000096F4
		public int AddMissileSingleUsage(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, in WeaponStatsData weaponStatsData, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(weaponData);
			return ScriptingInterfaceOfIMBMission.call_AddMissileSingleUsageDelegate(missionPointer, isPrediction, shooterAgentIndex, weaponDataAsNative, weaponStatsData, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
		}

		// Token: 0x06000243 RID: 579 RVA: 0x0000B538 File Offset: 0x00009738
		public void AddParticleSystemBurstByName(UIntPtr missionPointer, string particleSystem, ref MatrixFrame frame, bool synchThroughNetwork)
		{
			byte[] array = null;
			if (particleSystem != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(particleSystem);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(particleSystem, 0, particleSystem.Length, array, 0);
				array[byteCount] = 0;
			}
			ScriptingInterfaceOfIMBMission.call_AddParticleSystemBurstByNameDelegate(missionPointer, array, ref frame, synchThroughNetwork);
		}

		// Token: 0x06000244 RID: 580 RVA: 0x0000B596 File Offset: 0x00009796
		public void AddSoundAlarmFactorToAgents(UIntPtr pointer, int ownerId, Vec3 position, float alarmFactor)
		{
			ScriptingInterfaceOfIMBMission.call_AddSoundAlarmFactorToAgentsDelegate(pointer, ownerId, position, alarmFactor);
		}

		// Token: 0x06000245 RID: 581 RVA: 0x0000B5A7 File Offset: 0x000097A7
		public int AddTeam(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_AddTeamDelegate(missionPointer);
		}

		// Token: 0x06000246 RID: 582 RVA: 0x0000B5B4 File Offset: 0x000097B4
		public void BackupRecordToFile(UIntPtr missionPointer, string fileName, string gameType, string sceneLevels)
		{
			byte[] array = null;
			if (fileName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(fileName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(fileName, 0, fileName.Length, array, 0);
				array[byteCount] = 0;
			}
			byte[] array2 = null;
			if (gameType != null)
			{
				int byteCount2 = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(gameType);
				array2 = ((byteCount2 < 1024) ? CallbackStringBufferManager.StringBuffer1 : new byte[byteCount2 + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(gameType, 0, gameType.Length, array2, 0);
				array2[byteCount2] = 0;
			}
			byte[] array3 = null;
			if (sceneLevels != null)
			{
				int byteCount3 = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(sceneLevels);
				array3 = ((byteCount3 < 1024) ? CallbackStringBufferManager.StringBuffer2 : new byte[byteCount3 + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(sceneLevels, 0, sceneLevels.Length, array3, 0);
				array3[byteCount3] = 0;
			}
			ScriptingInterfaceOfIMBMission.call_BackupRecordToFileDelegate(missionPointer, array, array2, array3);
		}

		// Token: 0x06000247 RID: 583 RVA: 0x0000B6A4 File Offset: 0x000098A4
		public void BatchFormationUnitPositions(UIntPtr missionPointer, Vec2i[] orderedPositionIndices, Vec2[] orderedLocalPositions, int[] availabilityTable, WorldPosition[] globalPositionTable, WorldPosition orderPosition, Vec2 direction, int fileCount, int rankCount)
		{
			PinnedArrayData<Vec2i> pinnedArrayData = new PinnedArrayData<Vec2i>(orderedPositionIndices, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			PinnedArrayData<Vec2> pinnedArrayData2 = new PinnedArrayData<Vec2>(orderedLocalPositions, false);
			IntPtr pointer2 = pinnedArrayData2.Pointer;
			PinnedArrayData<int> pinnedArrayData3 = new PinnedArrayData<int>(availabilityTable, false);
			IntPtr pointer3 = pinnedArrayData3.Pointer;
			PinnedArrayData<WorldPosition> pinnedArrayData4 = new PinnedArrayData<WorldPosition>(globalPositionTable, false);
			IntPtr pointer4 = pinnedArrayData4.Pointer;
			ScriptingInterfaceOfIMBMission.call_BatchFormationUnitPositionsDelegate(missionPointer, pointer, pointer2, pointer3, pointer4, orderPosition, direction, fileCount, rankCount);
			pinnedArrayData.Dispose();
			pinnedArrayData2.Dispose();
			pinnedArrayData3.Dispose();
			pinnedArrayData4.Dispose();
		}

		// Token: 0x06000248 RID: 584 RVA: 0x0000B72E File Offset: 0x0000992E
		public void ClearAgentActions(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ClearAgentActionsDelegate(missionPointer);
		}

		// Token: 0x06000249 RID: 585 RVA: 0x0000B73B File Offset: 0x0000993B
		public void ClearCorpses(UIntPtr missionPointer, bool isMissionReset)
		{
			ScriptingInterfaceOfIMBMission.call_ClearCorpsesDelegate(missionPointer, isMissionReset);
		}

		// Token: 0x0600024A RID: 586 RVA: 0x0000B749 File Offset: 0x00009949
		public void ClearMissiles(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ClearMissilesDelegate(missionPointer);
		}

		// Token: 0x0600024B RID: 587 RVA: 0x0000B756 File Offset: 0x00009956
		public void ClearRecordBuffers(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ClearRecordBuffersDelegate(missionPointer);
		}

		// Token: 0x0600024C RID: 588 RVA: 0x0000B763 File Offset: 0x00009963
		public void ClearResources(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ClearResourcesDelegate(missionPointer);
		}

		// Token: 0x0600024D RID: 589 RVA: 0x0000B770 File Offset: 0x00009970
		public void ClearScene(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ClearSceneDelegate(missionPointer);
		}

		// Token: 0x0600024E RID: 590 RVA: 0x0000B77D File Offset: 0x0000997D
		public float ComputeExactMissileRangeAtHeightDifference(float targetHeightDifference, float initialSpeed, float airFrictionConstant, float maxDuration)
		{
			return ScriptingInterfaceOfIMBMission.call_ComputeExactMissileRangeAtHeightDifferenceDelegate(targetHeightDifference, initialSpeed, airFrictionConstant, maxDuration);
		}

		// Token: 0x0600024F RID: 591 RVA: 0x0000B790 File Offset: 0x00009990
		public Mission.AgentCreationResult CreateAgent(UIntPtr missionPointer, ulong monsterFlag, int forcedAgentIndex, bool isFemale, ref AgentSpawnData spawnData, ref CapsuleData bodyCapsule, ref CapsuleData crouchedBodyCapsule, ref AnimationSystemData animationSystemData, int instanceNo)
		{
			return ScriptingInterfaceOfIMBMission.call_CreateAgentDelegate(missionPointer, monsterFlag, forcedAgentIndex, isFemale, ref spawnData, ref bodyCapsule, ref crouchedBodyCapsule, ref animationSystemData, instanceNo);
		}

		// Token: 0x06000250 RID: 592 RVA: 0x0000B7B6 File Offset: 0x000099B6
		public UIntPtr CreateMission(Mission mission)
		{
			return ScriptingInterfaceOfIMBMission.call_CreateMissionDelegate((mission != null) ? mission.GetManagedId() : 0);
		}

		// Token: 0x06000251 RID: 593 RVA: 0x0000B7CE File Offset: 0x000099CE
		public bool EndOfRecord(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_EndOfRecordDelegate(missionPointer);
		}

		// Token: 0x06000252 RID: 594 RVA: 0x0000B7DB File Offset: 0x000099DB
		public void FastForwardMission(UIntPtr missionPointer, float startTime, float endTime)
		{
			ScriptingInterfaceOfIMBMission.call_FastForwardMissionDelegate(missionPointer, startTime, endTime);
		}

		// Token: 0x06000253 RID: 595 RVA: 0x0000B7EA File Offset: 0x000099EA
		public void FinalizeMission(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_FinalizeMissionDelegate(missionPointer);
		}

		// Token: 0x06000254 RID: 596 RVA: 0x0000B7F7 File Offset: 0x000099F7
		public Agent FindAgentWithIndex(UIntPtr missionPointer, int index)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_FindAgentWithIndexDelegate(missionPointer, index)) as Agent;
		}

		// Token: 0x06000255 RID: 597 RVA: 0x0000B810 File Offset: 0x00009A10
		public void FindConvexHull(Vec2[] boundaryPoints, int boundaryPointCount, ref int convexPointCount)
		{
			PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBMission.call_FindConvexHullDelegate(pointer, boundaryPointCount, ref convexPointCount);
			pinnedArrayData.Dispose();
		}

		// Token: 0x06000256 RID: 598 RVA: 0x0000B842 File Offset: 0x00009A42
		public void GetAgentCountAroundPosition(UIntPtr missionPointer, int teamIndex, Vec2 position, float radius, ref int allyCount, ref int enemyCount)
		{
			ScriptingInterfaceOfIMBMission.call_GetAgentCountAroundPositionDelegate(missionPointer, teamIndex, position, radius, ref allyCount, ref enemyCount);
		}

		// Token: 0x06000257 RID: 599 RVA: 0x0000B857 File Offset: 0x00009A57
		public WorldPosition GetAlternatePositionForNavmeshlessOrOutOfBoundsPosition(UIntPtr ptr, ref Vec2 directionTowards, ref WorldPosition originalPosition, ref float positionPenalty)
		{
			return ScriptingInterfaceOfIMBMission.call_GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate(ptr, ref directionTowards, ref originalPosition, ref positionPenalty);
		}

		// Token: 0x06000258 RID: 600 RVA: 0x0000B868 File Offset: 0x00009A68
		public string GetAtmosphereNameForReplay(PlatformFilePath replayName)
		{
			if (ScriptingInterfaceOfIMBMission.call_GetAtmosphereNameForReplayDelegate(replayName) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x06000259 RID: 601 RVA: 0x0000B87F File Offset: 0x00009A7F
		public int GetAtmosphereSeasonForReplay(PlatformFilePath replayName)
		{
			return ScriptingInterfaceOfIMBMission.call_GetAtmosphereSeasonForReplayDelegate(replayName);
		}

		// Token: 0x0600025A RID: 602 RVA: 0x0000B88C File Offset: 0x00009A8C
		public float GetAverageFps(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetAverageFpsDelegate(missionPointer);
		}

		// Token: 0x0600025B RID: 603 RVA: 0x0000B89C File Offset: 0x00009A9C
		public float GetAverageMoraleOfAgents(UIntPtr missionPointer, int agentCount, int[] agentIndices)
		{
			PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIndices, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			float result = ScriptingInterfaceOfIMBMission.call_GetAverageMoraleOfAgentsDelegate(missionPointer, agentCount, pointer);
			pinnedArrayData.Dispose();
			return result;
		}

		// Token: 0x0600025C RID: 604 RVA: 0x0000B8D0 File Offset: 0x00009AD0
		public WorldPosition GetBestSlopeAngleHeightPosForDefending(UIntPtr missionPointer, WorldPosition enemyPosition, WorldPosition defendingPosition, int sampleSize, float distanceRatioAllowedFromDefendedPos, float distanceSqrdAllowedFromBoundary, float cosinusOfBestSlope, float cosinusOfMaxAcceptedSlope, float minSlopeScore, float maxSlopeScore, float excessiveSlopePenalty, float nearConeCenterRatio, float nearConeCenterBonus, float heightDifferenceCeiling, float maxDisplacementPenalty)
		{
			return ScriptingInterfaceOfIMBMission.call_GetBestSlopeAngleHeightPosForDefendingDelegate(missionPointer, enemyPosition, defendingPosition, sampleSize, distanceRatioAllowedFromDefendedPos, distanceSqrdAllowedFromBoundary, cosinusOfBestSlope, cosinusOfMaxAcceptedSlope, minSlopeScore, maxSlopeScore, excessiveSlopePenalty, nearConeCenterRatio, nearConeCenterBonus, heightDifferenceCeiling, maxDisplacementPenalty);
		}

		// Token: 0x0600025D RID: 605 RVA: 0x0000B902 File Offset: 0x00009B02
		public WorldPosition GetBestSlopeTowardsDirection(UIntPtr missionPointer, ref WorldPosition centerPosition, float halfsize, ref WorldPosition referencePosition)
		{
			return ScriptingInterfaceOfIMBMission.call_GetBestSlopeTowardsDirectionDelegate(missionPointer, ref centerPosition, halfsize, ref referencePosition);
		}

		// Token: 0x0600025E RID: 606 RVA: 0x0000B913 File Offset: 0x00009B13
		public float GetBiggestAgentCollisionPadding(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetBiggestAgentCollisionPaddingDelegate(missionPointer);
		}

		// Token: 0x0600025F RID: 607 RVA: 0x0000B920 File Offset: 0x00009B20
		public int GetBoundaryCount(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetBoundaryCountDelegate(missionPointer);
		}

		// Token: 0x06000260 RID: 608 RVA: 0x0000B92D File Offset: 0x00009B2D
		public string GetBoundaryName(UIntPtr missionPointer, int boundaryIndex)
		{
			if (ScriptingInterfaceOfIMBMission.call_GetBoundaryNameDelegate(missionPointer, boundaryIndex) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x06000261 RID: 609 RVA: 0x0000B948 File Offset: 0x00009B48
		public void GetBoundaryPoints(UIntPtr missionPointer, string name, int boundaryPointOffset, Vec2[] boundaryPoints, int boundaryPointsSize, ref int retrievedPointCount)
		{
			byte[] array = null;
			if (name != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(name);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, array, 0);
				array[byteCount] = 0;
			}
			PinnedArrayData<Vec2> pinnedArrayData = new PinnedArrayData<Vec2>(boundaryPoints, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBMission.call_GetBoundaryPointsDelegate(missionPointer, array, boundaryPointOffset, pointer, boundaryPointsSize, ref retrievedPointCount);
			pinnedArrayData.Dispose();
		}

		// Token: 0x06000262 RID: 610 RVA: 0x0000B9C4 File Offset: 0x00009BC4
		public float GetBoundaryRadius(UIntPtr missionPointer, string name)
		{
			byte[] array = null;
			if (name != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(name);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, array, 0);
				array[byteCount] = 0;
			}
			return ScriptingInterfaceOfIMBMission.call_GetBoundaryRadiusDelegate(missionPointer, array);
		}

		// Token: 0x06000263 RID: 611 RVA: 0x0000BA1F File Offset: 0x00009C1F
		public MatrixFrame GetCameraFrame(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetCameraFrameDelegate(missionPointer);
		}

		// Token: 0x06000264 RID: 612 RVA: 0x0000BA2C File Offset: 0x00009C2C
		public float GetClearSceneTimerElapsedTime(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetClearSceneTimerElapsedTimeDelegate(missionPointer);
		}

		// Token: 0x06000265 RID: 613 RVA: 0x0000BA39 File Offset: 0x00009C39
		public Agent GetClosestAlly(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_GetClosestAllyDelegate(missionPointer, teamIndex, position, radius)) as Agent;
		}

		// Token: 0x06000266 RID: 614 RVA: 0x0000BA54 File Offset: 0x00009C54
		public Vec2 GetClosestBoundaryPosition(UIntPtr missionPointer, Vec2 position)
		{
			return ScriptingInterfaceOfIMBMission.call_GetClosestBoundaryPositionDelegate(missionPointer, position);
		}

		// Token: 0x06000267 RID: 615 RVA: 0x0000BA62 File Offset: 0x00009C62
		public Agent GetClosestEnemy(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_GetClosestEnemyDelegate(missionPointer, teamIndex, position, radius)) as Agent;
		}

		// Token: 0x06000268 RID: 616 RVA: 0x0000BA7D File Offset: 0x00009C7D
		public int GetCombatType(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetCombatTypeDelegate(missionPointer);
		}

		// Token: 0x06000269 RID: 617 RVA: 0x0000BA8A File Offset: 0x00009C8A
		public int GetDebugAgent(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetDebugAgentDelegate(missionPointer);
		}

		// Token: 0x0600026A RID: 618 RVA: 0x0000BA97 File Offset: 0x00009C97
		public int GetEnemyAlarmStateIndicator(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetEnemyAlarmStateIndicatorDelegate(missionPointer);
		}

		// Token: 0x0600026B RID: 619 RVA: 0x0000BAA4 File Offset: 0x00009CA4
		public string GetGameTypeForReplay(PlatformFilePath replayName)
		{
			if (ScriptingInterfaceOfIMBMission.call_GetGameTypeForReplayDelegate(replayName) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x0600026C RID: 620 RVA: 0x0000BABB File Offset: 0x00009CBB
		public bool GetIsLoadingFinished(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetIsLoadingFinishedDelegate(missionPointer);
		}

		// Token: 0x0600026D RID: 621 RVA: 0x0000BAC8 File Offset: 0x00009CC8
		public Vec3 GetMissileCollisionPoint(UIntPtr missionPointer, Vec3 missileStartingPosition, Vec3 missileDirection, float missileStartingSpeed, in WeaponData weaponData)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(weaponData);
			return ScriptingInterfaceOfIMBMission.call_GetMissileCollisionPointDelegate(missionPointer, missileStartingPosition, missileDirection, missileStartingSpeed, weaponDataAsNative);
		}

		// Token: 0x0600026E RID: 622 RVA: 0x0000BAF4 File Offset: 0x00009CF4
		public bool GetMissileHasRigidBody(UIntPtr missionPointer, int index)
		{
			return ScriptingInterfaceOfIMBMission.call_GetMissileHasRigidBodyDelegate(missionPointer, index);
		}

		// Token: 0x0600026F RID: 623 RVA: 0x0000BB02 File Offset: 0x00009D02
		public float GetMissileRange(float missileStartingSpeed, float heightDifference)
		{
			return ScriptingInterfaceOfIMBMission.call_GetMissileRangeDelegate(missileStartingSpeed, heightDifference);
		}

		// Token: 0x06000270 RID: 624 RVA: 0x0000BB10 File Offset: 0x00009D10
		public float GetMissileVerticalAimCorrection(Vec3 vecToTarget, float missileStartingSpeed, ref WeaponStatsData weaponStatsData, float airFrictionConstant)
		{
			return ScriptingInterfaceOfIMBMission.call_GetMissileVerticalAimCorrectionDelegate(vecToTarget, missileStartingSpeed, ref weaponStatsData, airFrictionConstant);
		}

		// Token: 0x06000271 RID: 625 RVA: 0x0000BB21 File Offset: 0x00009D21
		public bool GetNavigationPoints(UIntPtr missionPointer, ref NavigationData navigationData)
		{
			return ScriptingInterfaceOfIMBMission.call_GetNavigationPointsDelegate(missionPointer, ref navigationData);
		}

		// Token: 0x06000272 RID: 626 RVA: 0x0000BB30 File Offset: 0x00009D30
		public void GetNearbyAgentsAux(UIntPtr missionPointer, Vec2 center, float radius, int teamIndex, int friendOrEnemyOrAll, int agentsArrayOffset, ref EngineStackArray.StackArray40Int agentIds, ref int retrievedAgentCount)
		{
			ScriptingInterfaceOfIMBMission.call_GetNearbyAgentsAuxDelegate(missionPointer, center, radius, teamIndex, friendOrEnemyOrAll, agentsArrayOffset, ref agentIds, ref retrievedAgentCount);
		}

		// Token: 0x06000273 RID: 627 RVA: 0x0000BB54 File Offset: 0x00009D54
		public int GetNumberOfTeams(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetNumberOfTeamsDelegate(missionPointer);
		}

		// Token: 0x06000274 RID: 628 RVA: 0x0000BB61 File Offset: 0x00009D61
		public bool GetPauseAITick(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetPauseAITickDelegate(missionPointer);
		}

		// Token: 0x06000275 RID: 629 RVA: 0x0000BB6E File Offset: 0x00009D6E
		public float GetPlayerAlarmIndicator(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetPlayerAlarmIndicatorDelegate(missionPointer);
		}

		// Token: 0x06000276 RID: 630 RVA: 0x0000BB7B File Offset: 0x00009D7B
		public Vec3 GetPositionOfMissile(UIntPtr missionPointer, int index)
		{
			return ScriptingInterfaceOfIMBMission.call_GetPositionOfMissileDelegate(missionPointer, index);
		}

		// Token: 0x06000277 RID: 631 RVA: 0x0000BB89 File Offset: 0x00009D89
		public string GetSceneLevelsForReplay(PlatformFilePath replayName)
		{
			if (ScriptingInterfaceOfIMBMission.call_GetSceneLevelsForReplayDelegate(replayName) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x06000278 RID: 632 RVA: 0x0000BBA0 File Offset: 0x00009DA0
		public string GetSceneNameForReplay(PlatformFilePath replayName)
		{
			if (ScriptingInterfaceOfIMBMission.call_GetSceneNameForReplayDelegate(replayName) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x06000279 RID: 633 RVA: 0x0000BBB7 File Offset: 0x00009DB7
		public WorldPosition GetStraightPathToTarget(UIntPtr scenePointer, Vec2 targetPosition, WorldPosition startingPosition, float samplingDistance, bool stopAtObstacle)
		{
			return ScriptingInterfaceOfIMBMission.call_GetStraightPathToTargetDelegate(scenePointer, targetPosition, startingPosition, samplingDistance, stopAtObstacle);
		}

		// Token: 0x0600027A RID: 634 RVA: 0x0000BBCA File Offset: 0x00009DCA
		public float GetTime(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_GetTimeDelegate(missionPointer);
		}

		// Token: 0x0600027B RID: 635 RVA: 0x0000BBD7 File Offset: 0x00009DD7
		public Vec3 GetVelocityOfMissile(UIntPtr missionPointer, int index)
		{
			return ScriptingInterfaceOfIMBMission.call_GetVelocityOfMissileDelegate(missionPointer, index);
		}

		// Token: 0x0600027C RID: 636 RVA: 0x0000BBE5 File Offset: 0x00009DE5
		public float GetWaterLevelAtPosition(UIntPtr missionPointer, Vec2 position)
		{
			return ScriptingInterfaceOfIMBMission.call_GetWaterLevelAtPositionDelegate(missionPointer, position);
		}

		// Token: 0x0600027D RID: 637 RVA: 0x0000BBF3 File Offset: 0x00009DF3
		public Vec2 GetWeightedPointOfEnemies(UIntPtr missionPointer, int agentIndex, Vec2 basePoint)
		{
			return ScriptingInterfaceOfIMBMission.call_GetWeightedPointOfEnemiesDelegate(missionPointer, agentIndex, basePoint);
		}

		// Token: 0x0600027E RID: 638 RVA: 0x0000BC02 File Offset: 0x00009E02
		public bool HasAnyAgentsOfTeamAround(UIntPtr missionPointer, Vec3 origin, float radius, int teamNo)
		{
			return ScriptingInterfaceOfIMBMission.call_HasAnyAgentsOfTeamAroundDelegate(missionPointer, origin, radius, teamNo);
		}

		// Token: 0x0600027F RID: 639 RVA: 0x0000BC13 File Offset: 0x00009E13
		public void IdleTick(UIntPtr missionPointer, float dt)
		{
			ScriptingInterfaceOfIMBMission.call_IdleTickDelegate(missionPointer, dt);
		}

		// Token: 0x06000280 RID: 640 RVA: 0x0000BC21 File Offset: 0x00009E21
		public void InitializeMission(UIntPtr missionPointer, ref MissionInitializerRecord rec)
		{
			ScriptingInterfaceOfIMBMission.call_InitializeMissionDelegate(missionPointer, ref rec);
		}

		// Token: 0x06000281 RID: 641 RVA: 0x0000BC2F File Offset: 0x00009E2F
		public bool IsAgentInProximityMap(UIntPtr missionPointer, int agentIndex)
		{
			return ScriptingInterfaceOfIMBMission.call_IsAgentInProximityMapDelegate(missionPointer, agentIndex);
		}

		// Token: 0x06000282 RID: 642 RVA: 0x0000BC3D File Offset: 0x00009E3D
		public bool IsFormationUnitPositionAvailable(UIntPtr missionPointer, ref WorldPosition orderPosition, ref WorldPosition unitPosition, ref WorldPosition nearestAvailableUnitPosition, float manhattanDistance)
		{
			return ScriptingInterfaceOfIMBMission.call_IsFormationUnitPositionAvailableDelegate(missionPointer, ref orderPosition, ref unitPosition, ref nearestAvailableUnitPosition, manhattanDistance);
		}

		// Token: 0x06000283 RID: 643 RVA: 0x0000BC50 File Offset: 0x00009E50
		public bool IsPositionInsideAnyBlockerNavMeshFace2D(UIntPtr missionPointer, Vec2 position)
		{
			return ScriptingInterfaceOfIMBMission.call_IsPositionInsideAnyBlockerNavMeshFace2DDelegate(missionPointer, position);
		}

		// Token: 0x06000284 RID: 644 RVA: 0x0000BC5E File Offset: 0x00009E5E
		public bool IsPositionInsideBoundaries(UIntPtr missionPointer, Vec2 position)
		{
			return ScriptingInterfaceOfIMBMission.call_IsPositionInsideBoundariesDelegate(missionPointer, position);
		}

		// Token: 0x06000285 RID: 645 RVA: 0x0000BC6C File Offset: 0x00009E6C
		public void MakeSound(UIntPtr pointer, int nativeSoundCode, Vec3 position, bool soundCanBePredicted, bool isReliable, int relatedAgent1, int relatedAgent2)
		{
			ScriptingInterfaceOfIMBMission.call_MakeSoundDelegate(pointer, nativeSoundCode, position, soundCanBePredicted, isReliable, relatedAgent1, relatedAgent2);
		}

		// Token: 0x06000286 RID: 646 RVA: 0x0000BC83 File Offset: 0x00009E83
		public void MakeSoundOnlyOnRelatedPeer(UIntPtr pointer, int nativeSoundCode, Vec3 position, int relatedAgent)
		{
			ScriptingInterfaceOfIMBMission.call_MakeSoundOnlyOnRelatedPeerDelegate(pointer, nativeSoundCode, position, relatedAgent);
		}

		// Token: 0x06000287 RID: 647 RVA: 0x0000BC94 File Offset: 0x00009E94
		public void MakeSoundWithParameter(UIntPtr pointer, int nativeSoundCode, Vec3 position, bool soundCanBePredicted, bool isReliable, int relatedAgent1, int relatedAgent2, SoundEventParameter parameter)
		{
			ScriptingInterfaceOfIMBMission.call_MakeSoundWithParameterDelegate(pointer, nativeSoundCode, position, soundCanBePredicted, isReliable, relatedAgent1, relatedAgent2, parameter);
		}

		// Token: 0x06000288 RID: 648 RVA: 0x0000BCB8 File Offset: 0x00009EB8
		public void PauseMissionSceneSounds(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_PauseMissionSceneSoundsDelegate(missionPointer);
		}

		// Token: 0x06000289 RID: 649 RVA: 0x0000BCC5 File Offset: 0x00009EC5
		public void PrepareMissileWeaponForDrop(UIntPtr missionPointer, int missileIndex)
		{
			ScriptingInterfaceOfIMBMission.call_PrepareMissileWeaponForDropDelegate(missionPointer, missileIndex);
		}

		// Token: 0x0600028A RID: 650 RVA: 0x0000BCD3 File Offset: 0x00009ED3
		public void ProcessRecordUntilTime(UIntPtr missionPointer, float time)
		{
			ScriptingInterfaceOfIMBMission.call_ProcessRecordUntilTimeDelegate(missionPointer, time);
		}

		// Token: 0x0600028B RID: 651 RVA: 0x0000BCE1 File Offset: 0x00009EE1
		public AgentProximityMap.ProximityMapSearchStructInternal ProximityMapBeginSearch(UIntPtr missionPointer, Vec2 searchPos, float searchRadius)
		{
			return ScriptingInterfaceOfIMBMission.call_ProximityMapBeginSearchDelegate(missionPointer, searchPos, searchRadius);
		}

		// Token: 0x0600028C RID: 652 RVA: 0x0000BCF0 File Offset: 0x00009EF0
		public void ProximityMapFindNext(UIntPtr missionPointer, ref AgentProximityMap.ProximityMapSearchStructInternal searchStruct)
		{
			ScriptingInterfaceOfIMBMission.call_ProximityMapFindNextDelegate(missionPointer, ref searchStruct);
		}

		// Token: 0x0600028D RID: 653 RVA: 0x0000BCFE File Offset: 0x00009EFE
		public float ProximityMapMaxSearchRadius(UIntPtr missionPointer)
		{
			return ScriptingInterfaceOfIMBMission.call_ProximityMapMaxSearchRadiusDelegate(missionPointer);
		}

		// Token: 0x0600028E RID: 654 RVA: 0x0000BD0B File Offset: 0x00009F0B
		public Agent RayCastForClosestAgent(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, float RayThickness)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBMission.call_RayCastForClosestAgentDelegate(missionPointer, SourcePoint, RayFinishPoint, ExcludeAgentIndex, ref CollisionDistance, RayThickness)) as Agent;
		}

		// Token: 0x0600028F RID: 655 RVA: 0x0000BD2A File Offset: 0x00009F2A
		public bool RayCastForClosestAgentsLimbs(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, ref int AgentIndex, ref sbyte BoneIndex)
		{
			return ScriptingInterfaceOfIMBMission.call_RayCastForClosestAgentsLimbsDelegate(missionPointer, SourcePoint, RayFinishPoint, ExcludeAgentIndex, ref CollisionDistance, ref AgentIndex, ref BoneIndex);
		}

		// Token: 0x06000290 RID: 656 RVA: 0x0000BD41 File Offset: 0x00009F41
		public bool RayCastForGivenAgentsLimbs(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int GivenAgentIndex, ref float CollisionDistance, ref sbyte BoneIndex)
		{
			return ScriptingInterfaceOfIMBMission.call_RayCastForGivenAgentsLimbsDelegate(missionPointer, SourcePoint, RayFinishPoint, GivenAgentIndex, ref CollisionDistance, ref BoneIndex);
		}

		// Token: 0x06000291 RID: 657 RVA: 0x0000BD56 File Offset: 0x00009F56
		public void RecordCurrentState(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_RecordCurrentStateDelegate(missionPointer);
		}

		// Token: 0x06000292 RID: 658 RVA: 0x0000BD64 File Offset: 0x00009F64
		public bool RemoveBoundary(UIntPtr missionPointer, string name)
		{
			byte[] array = null;
			if (name != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(name);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(name, 0, name.Length, array, 0);
				array[byteCount] = 0;
			}
			return ScriptingInterfaceOfIMBMission.call_RemoveBoundaryDelegate(missionPointer, array);
		}

		// Token: 0x06000293 RID: 659 RVA: 0x0000BDBF File Offset: 0x00009FBF
		public void RemoveMissile(UIntPtr missionPointer, int missileIndex)
		{
			ScriptingInterfaceOfIMBMission.call_RemoveMissileDelegate(missionPointer, missileIndex);
		}

		// Token: 0x06000294 RID: 660 RVA: 0x0000BDCD File Offset: 0x00009FCD
		public void ResetFirstThirdPersonView(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ResetFirstThirdPersonViewDelegate(missionPointer);
		}

		// Token: 0x06000295 RID: 661 RVA: 0x0000BDDA File Offset: 0x00009FDA
		public void ResetTeams(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ResetTeamsDelegate(missionPointer);
		}

		// Token: 0x06000296 RID: 662 RVA: 0x0000BDE7 File Offset: 0x00009FE7
		public void RestartRecord(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_RestartRecordDelegate(missionPointer);
		}

		// Token: 0x06000297 RID: 663 RVA: 0x0000BDF4 File Offset: 0x00009FF4
		public void RestoreRecordFromFile(UIntPtr missionPointer, string fileName)
		{
			byte[] array = null;
			if (fileName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBMission._utf8.GetByteCount(fileName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBMission._utf8.GetBytes(fileName, 0, fileName.Length, array, 0);
				array[byteCount] = 0;
			}
			ScriptingInterfaceOfIMBMission.call_RestoreRecordFromFileDelegate(missionPointer, array);
		}

		// Token: 0x06000298 RID: 664 RVA: 0x0000BE4F File Offset: 0x0000A04F
		public void ResumeMissionSceneSounds(UIntPtr missionPointer)
		{
			ScriptingInterfaceOfIMBMission.call_ResumeMissionSceneSoundsDelegate(missionPointer);
		}

		// Token: 0x06000299 RID: 665 RVA: 0x0000BE5C File Offset: 0x0000A05C
		public void SetBowMissileSpeedModifier(UIntPtr missionPointer, float modifier)
		{
			ScriptingInterfaceOfIMBMission.call_SetBowMissileSpeedModifierDelegate(missionPointer, modifier);
		}

		// Token: 0x0600029A RID: 666 RVA: 0x0000BE6A File Offset: 0x0000A06A
		public void SetCameraFrame(UIntPtr missionPointer, ref MatrixFrame cameraFrame, float zoomFactor, ref Vec3 attenuationPosition)
		{
			ScriptingInterfaceOfIMBMission.call_SetCameraFrameDelegate(missionPointer, ref cameraFrame, zoomFactor, ref attenuationPosition);
		}

		// Token: 0x0600029B RID: 667 RVA: 0x0000BE7B File Offset: 0x0000A07B
		public void SetCameraIsFirstPerson(bool value)
		{
			ScriptingInterfaceOfIMBMission.call_SetCameraIsFirstPersonDelegate(value);
		}

		// Token: 0x0600029C RID: 668 RVA: 0x0000BE88 File Offset: 0x0000A088
		public void SetCombatType(UIntPtr missionPointer, int combatType)
		{
			ScriptingInterfaceOfIMBMission.call_SetCombatTypeDelegate(missionPointer, combatType);
		}

		// Token: 0x0600029D RID: 669 RVA: 0x0000BE96 File Offset: 0x0000A096
		public void SetCrossbowMissileSpeedModifier(UIntPtr missionPointer, float modifier)
		{
			ScriptingInterfaceOfIMBMission.call_SetCrossbowMissileSpeedModifierDelegate(missionPointer, modifier);
		}

		// Token: 0x0600029E RID: 670 RVA: 0x0000BEA4 File Offset: 0x0000A0A4
		public void SetDebugAgent(UIntPtr missionPointer, int index)
		{
			ScriptingInterfaceOfIMBMission.call_SetDebugAgentDelegate(missionPointer, index);
		}

		// Token: 0x0600029F RID: 671 RVA: 0x0000BEB2 File Offset: 0x0000A0B2
		public void SetLastMovementKeyPressed(UIntPtr missionPointer, Agent.MovementControlFlag lastMovementKeyPressed)
		{
			ScriptingInterfaceOfIMBMission.call_SetLastMovementKeyPressedDelegate(missionPointer, lastMovementKeyPressed);
		}

		// Token: 0x060002A0 RID: 672 RVA: 0x0000BEC0 File Offset: 0x0000A0C0
		public void SetMissileRangeModifier(UIntPtr missionPointer, float modifier)
		{
			ScriptingInterfaceOfIMBMission.call_SetMissileRangeModifierDelegate(missionPointer, modifier);
		}

		// Token: 0x060002A1 RID: 673 RVA: 0x0000BECE File Offset: 0x0000A0CE
		public void SetMissionCorpseFadeOutTimeInSeconds(UIntPtr missionPointer, float corpseFadeOutTimeInSeconds)
		{
			ScriptingInterfaceOfIMBMission.call_SetMissionCorpseFadeOutTimeInSecondsDelegate(missionPointer, corpseFadeOutTimeInSeconds);
		}

		// Token: 0x060002A2 RID: 674 RVA: 0x0000BEDC File Offset: 0x0000A0DC
		public void SetNavigationFaceCostWithIdAroundPosition(UIntPtr missionPointer, int navigationFaceId, Vec3 position, float cost)
		{
			ScriptingInterfaceOfIMBMission.call_SetNavigationFaceCostWithIdAroundPositionDelegate(missionPointer, navigationFaceId, position, cost);
		}

		// Token: 0x060002A3 RID: 675 RVA: 0x0000BEED File Offset: 0x0000A0ED
		public void SetPauseAITick(UIntPtr missionPointer, bool I)
		{
			ScriptingInterfaceOfIMBMission.call_SetPauseAITickDelegate(missionPointer, I);
		}

		// Token: 0x060002A4 RID: 676 RVA: 0x0000BEFC File Offset: 0x0000A0FC
		public void SetRandomDecideTimeOfAgents(UIntPtr missionPointer, int agentCount, int[] agentIndices, float minAIReactionTime, float maxAIReactionTime)
		{
			PinnedArrayData<int> pinnedArrayData = new PinnedArrayData<int>(agentIndices, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBMission.call_SetRandomDecideTimeOfAgentsDelegate(missionPointer, agentCount, pointer, minAIReactionTime, maxAIReactionTime);
			pinnedArrayData.Dispose();
		}

		// Token: 0x060002A5 RID: 677 RVA: 0x0000BF32 File Offset: 0x0000A132
		public void SetReportStuckAgentsMode(UIntPtr missionPointer, bool value)
		{
			ScriptingInterfaceOfIMBMission.call_SetReportStuckAgentsModeDelegate(missionPointer, value);
		}

		// Token: 0x060002A6 RID: 678 RVA: 0x0000BF40 File Offset: 0x0000A140
		public void SetThrowingMissileSpeedModifier(UIntPtr missionPointer, float modifier)
		{
			ScriptingInterfaceOfIMBMission.call_SetThrowingMissileSpeedModifierDelegate(missionPointer, modifier);
		}

		// Token: 0x060002A7 RID: 679 RVA: 0x0000BF4E File Offset: 0x0000A14E
		public void StartRecording()
		{
			ScriptingInterfaceOfIMBMission.call_StartRecordingDelegate();
		}

		// Token: 0x060002A8 RID: 680 RVA: 0x0000BF5A File Offset: 0x0000A15A
		public void Tick(UIntPtr missionPointer, float dt)
		{
			ScriptingInterfaceOfIMBMission.call_TickDelegate(missionPointer, dt);
		}

		// Token: 0x060002A9 RID: 681 RVA: 0x0000BF68 File Offset: 0x0000A168
		public void tickAgentsAndTeamsAsync(UIntPtr missionPointer, float dt)
		{
			ScriptingInterfaceOfIMBMission.call_tickAgentsAndTeamsAsyncDelegate(missionPointer, dt);
		}

		// Token: 0x060002AA RID: 682 RVA: 0x0000BF76 File Offset: 0x0000A176
		public bool ToggleDisableFallAvoid()
		{
			return ScriptingInterfaceOfIMBMission.call_ToggleDisableFallAvoidDelegate();
		}

		// Token: 0x060002AD RID: 685 RVA: 0x0000BF98 File Offset: 0x0000A198
		int IMBMission.AddMissile(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
		{
			return this.AddMissile(missionPointer, isPrediction, shooterAgentIndex, weaponData, weaponStatsData, weaponStatsDataLength, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
		}

		// Token: 0x060002AE RID: 686 RVA: 0x0000BFCC File Offset: 0x0000A1CC
		int IMBMission.AddMissileSingleUsage(UIntPtr missionPointer, bool isPrediction, int shooterAgentIndex, in WeaponData weaponData, in WeaponStatsData weaponStatsData, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, bool isPrimaryWeaponShot, out UIntPtr missileEntity)
		{
			return this.AddMissileSingleUsage(missionPointer, isPrediction, shooterAgentIndex, weaponData, weaponStatsData, damageBonus, ref position, ref direction, ref orientation, baseSpeed, speed, addRigidBody, entityPointer, forcedMissileIndex, isPrimaryWeaponShot, out missileEntity);
		}

		// Token: 0x060002AF RID: 687 RVA: 0x0000BFFC File Offset: 0x0000A1FC
		Vec3 IMBMission.GetMissileCollisionPoint(UIntPtr missionPointer, Vec3 missileStartingPosition, Vec3 missileDirection, float missileStartingSpeed, in WeaponData weaponData)
		{
			return this.GetMissileCollisionPoint(missionPointer, missileStartingPosition, missileDirection, missileStartingSpeed, weaponData);
		}

		// Token: 0x040001CB RID: 459
		private static readonly Encoding _utf8 = Encoding.UTF8;

		// Token: 0x040001CC RID: 460
		public static ScriptingInterfaceOfIMBMission.AddAiDebugTextDelegate call_AddAiDebugTextDelegate;

		// Token: 0x040001CD RID: 461
		public static ScriptingInterfaceOfIMBMission.AddBoundaryDelegate call_AddBoundaryDelegate;

		// Token: 0x040001CE RID: 462
		public static ScriptingInterfaceOfIMBMission.AddMissileDelegate call_AddMissileDelegate;

		// Token: 0x040001CF RID: 463
		public static ScriptingInterfaceOfIMBMission.AddMissileSingleUsageDelegate call_AddMissileSingleUsageDelegate;

		// Token: 0x040001D0 RID: 464
		public static ScriptingInterfaceOfIMBMission.AddParticleSystemBurstByNameDelegate call_AddParticleSystemBurstByNameDelegate;

		// Token: 0x040001D1 RID: 465
		public static ScriptingInterfaceOfIMBMission.AddSoundAlarmFactorToAgentsDelegate call_AddSoundAlarmFactorToAgentsDelegate;

		// Token: 0x040001D2 RID: 466
		public static ScriptingInterfaceOfIMBMission.AddTeamDelegate call_AddTeamDelegate;

		// Token: 0x040001D3 RID: 467
		public static ScriptingInterfaceOfIMBMission.BackupRecordToFileDelegate call_BackupRecordToFileDelegate;

		// Token: 0x040001D4 RID: 468
		public static ScriptingInterfaceOfIMBMission.BatchFormationUnitPositionsDelegate call_BatchFormationUnitPositionsDelegate;

		// Token: 0x040001D5 RID: 469
		public static ScriptingInterfaceOfIMBMission.ClearAgentActionsDelegate call_ClearAgentActionsDelegate;

		// Token: 0x040001D6 RID: 470
		public static ScriptingInterfaceOfIMBMission.ClearCorpsesDelegate call_ClearCorpsesDelegate;

		// Token: 0x040001D7 RID: 471
		public static ScriptingInterfaceOfIMBMission.ClearMissilesDelegate call_ClearMissilesDelegate;

		// Token: 0x040001D8 RID: 472
		public static ScriptingInterfaceOfIMBMission.ClearRecordBuffersDelegate call_ClearRecordBuffersDelegate;

		// Token: 0x040001D9 RID: 473
		public static ScriptingInterfaceOfIMBMission.ClearResourcesDelegate call_ClearResourcesDelegate;

		// Token: 0x040001DA RID: 474
		public static ScriptingInterfaceOfIMBMission.ClearSceneDelegate call_ClearSceneDelegate;

		// Token: 0x040001DB RID: 475
		public static ScriptingInterfaceOfIMBMission.ComputeExactMissileRangeAtHeightDifferenceDelegate call_ComputeExactMissileRangeAtHeightDifferenceDelegate;

		// Token: 0x040001DC RID: 476
		public static ScriptingInterfaceOfIMBMission.CreateAgentDelegate call_CreateAgentDelegate;

		// Token: 0x040001DD RID: 477
		public static ScriptingInterfaceOfIMBMission.CreateMissionDelegate call_CreateMissionDelegate;

		// Token: 0x040001DE RID: 478
		public static ScriptingInterfaceOfIMBMission.EndOfRecordDelegate call_EndOfRecordDelegate;

		// Token: 0x040001DF RID: 479
		public static ScriptingInterfaceOfIMBMission.FastForwardMissionDelegate call_FastForwardMissionDelegate;

		// Token: 0x040001E0 RID: 480
		public static ScriptingInterfaceOfIMBMission.FinalizeMissionDelegate call_FinalizeMissionDelegate;

		// Token: 0x040001E1 RID: 481
		public static ScriptingInterfaceOfIMBMission.FindAgentWithIndexDelegate call_FindAgentWithIndexDelegate;

		// Token: 0x040001E2 RID: 482
		public static ScriptingInterfaceOfIMBMission.FindConvexHullDelegate call_FindConvexHullDelegate;

		// Token: 0x040001E3 RID: 483
		public static ScriptingInterfaceOfIMBMission.GetAgentCountAroundPositionDelegate call_GetAgentCountAroundPositionDelegate;

		// Token: 0x040001E4 RID: 484
		public static ScriptingInterfaceOfIMBMission.GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate call_GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate;

		// Token: 0x040001E5 RID: 485
		public static ScriptingInterfaceOfIMBMission.GetAtmosphereNameForReplayDelegate call_GetAtmosphereNameForReplayDelegate;

		// Token: 0x040001E6 RID: 486
		public static ScriptingInterfaceOfIMBMission.GetAtmosphereSeasonForReplayDelegate call_GetAtmosphereSeasonForReplayDelegate;

		// Token: 0x040001E7 RID: 487
		public static ScriptingInterfaceOfIMBMission.GetAverageFpsDelegate call_GetAverageFpsDelegate;

		// Token: 0x040001E8 RID: 488
		public static ScriptingInterfaceOfIMBMission.GetAverageMoraleOfAgentsDelegate call_GetAverageMoraleOfAgentsDelegate;

		// Token: 0x040001E9 RID: 489
		public static ScriptingInterfaceOfIMBMission.GetBestSlopeAngleHeightPosForDefendingDelegate call_GetBestSlopeAngleHeightPosForDefendingDelegate;

		// Token: 0x040001EA RID: 490
		public static ScriptingInterfaceOfIMBMission.GetBestSlopeTowardsDirectionDelegate call_GetBestSlopeTowardsDirectionDelegate;

		// Token: 0x040001EB RID: 491
		public static ScriptingInterfaceOfIMBMission.GetBiggestAgentCollisionPaddingDelegate call_GetBiggestAgentCollisionPaddingDelegate;

		// Token: 0x040001EC RID: 492
		public static ScriptingInterfaceOfIMBMission.GetBoundaryCountDelegate call_GetBoundaryCountDelegate;

		// Token: 0x040001ED RID: 493
		public static ScriptingInterfaceOfIMBMission.GetBoundaryNameDelegate call_GetBoundaryNameDelegate;

		// Token: 0x040001EE RID: 494
		public static ScriptingInterfaceOfIMBMission.GetBoundaryPointsDelegate call_GetBoundaryPointsDelegate;

		// Token: 0x040001EF RID: 495
		public static ScriptingInterfaceOfIMBMission.GetBoundaryRadiusDelegate call_GetBoundaryRadiusDelegate;

		// Token: 0x040001F0 RID: 496
		public static ScriptingInterfaceOfIMBMission.GetCameraFrameDelegate call_GetCameraFrameDelegate;

		// Token: 0x040001F1 RID: 497
		public static ScriptingInterfaceOfIMBMission.GetClearSceneTimerElapsedTimeDelegate call_GetClearSceneTimerElapsedTimeDelegate;

		// Token: 0x040001F2 RID: 498
		public static ScriptingInterfaceOfIMBMission.GetClosestAllyDelegate call_GetClosestAllyDelegate;

		// Token: 0x040001F3 RID: 499
		public static ScriptingInterfaceOfIMBMission.GetClosestBoundaryPositionDelegate call_GetClosestBoundaryPositionDelegate;

		// Token: 0x040001F4 RID: 500
		public static ScriptingInterfaceOfIMBMission.GetClosestEnemyDelegate call_GetClosestEnemyDelegate;

		// Token: 0x040001F5 RID: 501
		public static ScriptingInterfaceOfIMBMission.GetCombatTypeDelegate call_GetCombatTypeDelegate;

		// Token: 0x040001F6 RID: 502
		public static ScriptingInterfaceOfIMBMission.GetDebugAgentDelegate call_GetDebugAgentDelegate;

		// Token: 0x040001F7 RID: 503
		public static ScriptingInterfaceOfIMBMission.GetEnemyAlarmStateIndicatorDelegate call_GetEnemyAlarmStateIndicatorDelegate;

		// Token: 0x040001F8 RID: 504
		public static ScriptingInterfaceOfIMBMission.GetGameTypeForReplayDelegate call_GetGameTypeForReplayDelegate;

		// Token: 0x040001F9 RID: 505
		public static ScriptingInterfaceOfIMBMission.GetIsLoadingFinishedDelegate call_GetIsLoadingFinishedDelegate;

		// Token: 0x040001FA RID: 506
		public static ScriptingInterfaceOfIMBMission.GetMissileCollisionPointDelegate call_GetMissileCollisionPointDelegate;

		// Token: 0x040001FB RID: 507
		public static ScriptingInterfaceOfIMBMission.GetMissileHasRigidBodyDelegate call_GetMissileHasRigidBodyDelegate;

		// Token: 0x040001FC RID: 508
		public static ScriptingInterfaceOfIMBMission.GetMissileRangeDelegate call_GetMissileRangeDelegate;

		// Token: 0x040001FD RID: 509
		public static ScriptingInterfaceOfIMBMission.GetMissileVerticalAimCorrectionDelegate call_GetMissileVerticalAimCorrectionDelegate;

		// Token: 0x040001FE RID: 510
		public static ScriptingInterfaceOfIMBMission.GetNavigationPointsDelegate call_GetNavigationPointsDelegate;

		// Token: 0x040001FF RID: 511
		public static ScriptingInterfaceOfIMBMission.GetNearbyAgentsAuxDelegate call_GetNearbyAgentsAuxDelegate;

		// Token: 0x04000200 RID: 512
		public static ScriptingInterfaceOfIMBMission.GetNumberOfTeamsDelegate call_GetNumberOfTeamsDelegate;

		// Token: 0x04000201 RID: 513
		public static ScriptingInterfaceOfIMBMission.GetPauseAITickDelegate call_GetPauseAITickDelegate;

		// Token: 0x04000202 RID: 514
		public static ScriptingInterfaceOfIMBMission.GetPlayerAlarmIndicatorDelegate call_GetPlayerAlarmIndicatorDelegate;

		// Token: 0x04000203 RID: 515
		public static ScriptingInterfaceOfIMBMission.GetPositionOfMissileDelegate call_GetPositionOfMissileDelegate;

		// Token: 0x04000204 RID: 516
		public static ScriptingInterfaceOfIMBMission.GetSceneLevelsForReplayDelegate call_GetSceneLevelsForReplayDelegate;

		// Token: 0x04000205 RID: 517
		public static ScriptingInterfaceOfIMBMission.GetSceneNameForReplayDelegate call_GetSceneNameForReplayDelegate;

		// Token: 0x04000206 RID: 518
		public static ScriptingInterfaceOfIMBMission.GetStraightPathToTargetDelegate call_GetStraightPathToTargetDelegate;

		// Token: 0x04000207 RID: 519
		public static ScriptingInterfaceOfIMBMission.GetTimeDelegate call_GetTimeDelegate;

		// Token: 0x04000208 RID: 520
		public static ScriptingInterfaceOfIMBMission.GetVelocityOfMissileDelegate call_GetVelocityOfMissileDelegate;

		// Token: 0x04000209 RID: 521
		public static ScriptingInterfaceOfIMBMission.GetWaterLevelAtPositionDelegate call_GetWaterLevelAtPositionDelegate;

		// Token: 0x0400020A RID: 522
		public static ScriptingInterfaceOfIMBMission.GetWeightedPointOfEnemiesDelegate call_GetWeightedPointOfEnemiesDelegate;

		// Token: 0x0400020B RID: 523
		public static ScriptingInterfaceOfIMBMission.HasAnyAgentsOfTeamAroundDelegate call_HasAnyAgentsOfTeamAroundDelegate;

		// Token: 0x0400020C RID: 524
		public static ScriptingInterfaceOfIMBMission.IdleTickDelegate call_IdleTickDelegate;

		// Token: 0x0400020D RID: 525
		public static ScriptingInterfaceOfIMBMission.InitializeMissionDelegate call_InitializeMissionDelegate;

		// Token: 0x0400020E RID: 526
		public static ScriptingInterfaceOfIMBMission.IsAgentInProximityMapDelegate call_IsAgentInProximityMapDelegate;

		// Token: 0x0400020F RID: 527
		public static ScriptingInterfaceOfIMBMission.IsFormationUnitPositionAvailableDelegate call_IsFormationUnitPositionAvailableDelegate;

		// Token: 0x04000210 RID: 528
		public static ScriptingInterfaceOfIMBMission.IsPositionInsideAnyBlockerNavMeshFace2DDelegate call_IsPositionInsideAnyBlockerNavMeshFace2DDelegate;

		// Token: 0x04000211 RID: 529
		public static ScriptingInterfaceOfIMBMission.IsPositionInsideBoundariesDelegate call_IsPositionInsideBoundariesDelegate;

		// Token: 0x04000212 RID: 530
		public static ScriptingInterfaceOfIMBMission.MakeSoundDelegate call_MakeSoundDelegate;

		// Token: 0x04000213 RID: 531
		public static ScriptingInterfaceOfIMBMission.MakeSoundOnlyOnRelatedPeerDelegate call_MakeSoundOnlyOnRelatedPeerDelegate;

		// Token: 0x04000214 RID: 532
		public static ScriptingInterfaceOfIMBMission.MakeSoundWithParameterDelegate call_MakeSoundWithParameterDelegate;

		// Token: 0x04000215 RID: 533
		public static ScriptingInterfaceOfIMBMission.PauseMissionSceneSoundsDelegate call_PauseMissionSceneSoundsDelegate;

		// Token: 0x04000216 RID: 534
		public static ScriptingInterfaceOfIMBMission.PrepareMissileWeaponForDropDelegate call_PrepareMissileWeaponForDropDelegate;

		// Token: 0x04000217 RID: 535
		public static ScriptingInterfaceOfIMBMission.ProcessRecordUntilTimeDelegate call_ProcessRecordUntilTimeDelegate;

		// Token: 0x04000218 RID: 536
		public static ScriptingInterfaceOfIMBMission.ProximityMapBeginSearchDelegate call_ProximityMapBeginSearchDelegate;

		// Token: 0x04000219 RID: 537
		public static ScriptingInterfaceOfIMBMission.ProximityMapFindNextDelegate call_ProximityMapFindNextDelegate;

		// Token: 0x0400021A RID: 538
		public static ScriptingInterfaceOfIMBMission.ProximityMapMaxSearchRadiusDelegate call_ProximityMapMaxSearchRadiusDelegate;

		// Token: 0x0400021B RID: 539
		public static ScriptingInterfaceOfIMBMission.RayCastForClosestAgentDelegate call_RayCastForClosestAgentDelegate;

		// Token: 0x0400021C RID: 540
		public static ScriptingInterfaceOfIMBMission.RayCastForClosestAgentsLimbsDelegate call_RayCastForClosestAgentsLimbsDelegate;

		// Token: 0x0400021D RID: 541
		public static ScriptingInterfaceOfIMBMission.RayCastForGivenAgentsLimbsDelegate call_RayCastForGivenAgentsLimbsDelegate;

		// Token: 0x0400021E RID: 542
		public static ScriptingInterfaceOfIMBMission.RecordCurrentStateDelegate call_RecordCurrentStateDelegate;

		// Token: 0x0400021F RID: 543
		public static ScriptingInterfaceOfIMBMission.RemoveBoundaryDelegate call_RemoveBoundaryDelegate;

		// Token: 0x04000220 RID: 544
		public static ScriptingInterfaceOfIMBMission.RemoveMissileDelegate call_RemoveMissileDelegate;

		// Token: 0x04000221 RID: 545
		public static ScriptingInterfaceOfIMBMission.ResetFirstThirdPersonViewDelegate call_ResetFirstThirdPersonViewDelegate;

		// Token: 0x04000222 RID: 546
		public static ScriptingInterfaceOfIMBMission.ResetTeamsDelegate call_ResetTeamsDelegate;

		// Token: 0x04000223 RID: 547
		public static ScriptingInterfaceOfIMBMission.RestartRecordDelegate call_RestartRecordDelegate;

		// Token: 0x04000224 RID: 548
		public static ScriptingInterfaceOfIMBMission.RestoreRecordFromFileDelegate call_RestoreRecordFromFileDelegate;

		// Token: 0x04000225 RID: 549
		public static ScriptingInterfaceOfIMBMission.ResumeMissionSceneSoundsDelegate call_ResumeMissionSceneSoundsDelegate;

		// Token: 0x04000226 RID: 550
		public static ScriptingInterfaceOfIMBMission.SetBowMissileSpeedModifierDelegate call_SetBowMissileSpeedModifierDelegate;

		// Token: 0x04000227 RID: 551
		public static ScriptingInterfaceOfIMBMission.SetCameraFrameDelegate call_SetCameraFrameDelegate;

		// Token: 0x04000228 RID: 552
		public static ScriptingInterfaceOfIMBMission.SetCameraIsFirstPersonDelegate call_SetCameraIsFirstPersonDelegate;

		// Token: 0x04000229 RID: 553
		public static ScriptingInterfaceOfIMBMission.SetCombatTypeDelegate call_SetCombatTypeDelegate;

		// Token: 0x0400022A RID: 554
		public static ScriptingInterfaceOfIMBMission.SetCrossbowMissileSpeedModifierDelegate call_SetCrossbowMissileSpeedModifierDelegate;

		// Token: 0x0400022B RID: 555
		public static ScriptingInterfaceOfIMBMission.SetDebugAgentDelegate call_SetDebugAgentDelegate;

		// Token: 0x0400022C RID: 556
		public static ScriptingInterfaceOfIMBMission.SetLastMovementKeyPressedDelegate call_SetLastMovementKeyPressedDelegate;

		// Token: 0x0400022D RID: 557
		public static ScriptingInterfaceOfIMBMission.SetMissileRangeModifierDelegate call_SetMissileRangeModifierDelegate;

		// Token: 0x0400022E RID: 558
		public static ScriptingInterfaceOfIMBMission.SetMissionCorpseFadeOutTimeInSecondsDelegate call_SetMissionCorpseFadeOutTimeInSecondsDelegate;

		// Token: 0x0400022F RID: 559
		public static ScriptingInterfaceOfIMBMission.SetNavigationFaceCostWithIdAroundPositionDelegate call_SetNavigationFaceCostWithIdAroundPositionDelegate;

		// Token: 0x04000230 RID: 560
		public static ScriptingInterfaceOfIMBMission.SetPauseAITickDelegate call_SetPauseAITickDelegate;

		// Token: 0x04000231 RID: 561
		public static ScriptingInterfaceOfIMBMission.SetRandomDecideTimeOfAgentsDelegate call_SetRandomDecideTimeOfAgentsDelegate;

		// Token: 0x04000232 RID: 562
		public static ScriptingInterfaceOfIMBMission.SetReportStuckAgentsModeDelegate call_SetReportStuckAgentsModeDelegate;

		// Token: 0x04000233 RID: 563
		public static ScriptingInterfaceOfIMBMission.SetThrowingMissileSpeedModifierDelegate call_SetThrowingMissileSpeedModifierDelegate;

		// Token: 0x04000234 RID: 564
		public static ScriptingInterfaceOfIMBMission.StartRecordingDelegate call_StartRecordingDelegate;

		// Token: 0x04000235 RID: 565
		public static ScriptingInterfaceOfIMBMission.TickDelegate call_TickDelegate;

		// Token: 0x04000236 RID: 566
		public static ScriptingInterfaceOfIMBMission.tickAgentsAndTeamsAsyncDelegate call_tickAgentsAndTeamsAsyncDelegate;

		// Token: 0x04000237 RID: 567
		public static ScriptingInterfaceOfIMBMission.ToggleDisableFallAvoidDelegate call_ToggleDisableFallAvoidDelegate;

		// Token: 0x02000226 RID: 550
		// (Invoke) Token: 0x06000B3D RID: 2877
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddAiDebugTextDelegate(UIntPtr missionPointer, byte[] text);

		// Token: 0x02000227 RID: 551
		// (Invoke) Token: 0x06000B41 RID: 2881
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool AddBoundaryDelegate(UIntPtr missionPointer, byte[] name, IntPtr boundaryPoints, int boundaryPointCount, [MarshalAs(UnmanagedType.U1)] bool isAllowanceInside);

		// Token: 0x02000228 RID: 552
		// (Invoke) Token: 0x06000B45 RID: 2885
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int AddMissileDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isPrediction, int shooterAgentIndex, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, [MarshalAs(UnmanagedType.U1)] bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, [MarshalAs(UnmanagedType.U1)] bool isPrimaryWeaponShot, out UIntPtr missileEntity);

		// Token: 0x02000229 RID: 553
		// (Invoke) Token: 0x06000B49 RID: 2889
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int AddMissileSingleUsageDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isPrediction, int shooterAgentIndex, in WeaponDataAsNative weaponData, in WeaponStatsData weaponStatsData, float damageBonus, ref Vec3 position, ref Vec3 direction, ref Mat3 orientation, float baseSpeed, float speed, [MarshalAs(UnmanagedType.U1)] bool addRigidBody, UIntPtr entityPointer, int forcedMissileIndex, [MarshalAs(UnmanagedType.U1)] bool isPrimaryWeaponShot, out UIntPtr missileEntity);

		// Token: 0x0200022A RID: 554
		// (Invoke) Token: 0x06000B4D RID: 2893
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddParticleSystemBurstByNameDelegate(UIntPtr missionPointer, byte[] particleSystem, ref MatrixFrame frame, [MarshalAs(UnmanagedType.U1)] bool synchThroughNetwork);

		// Token: 0x0200022B RID: 555
		// (Invoke) Token: 0x06000B51 RID: 2897
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddSoundAlarmFactorToAgentsDelegate(UIntPtr pointer, int ownerId, Vec3 position, float alarmFactor);

		// Token: 0x0200022C RID: 556
		// (Invoke) Token: 0x06000B55 RID: 2901
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int AddTeamDelegate(UIntPtr missionPointer);

		// Token: 0x0200022D RID: 557
		// (Invoke) Token: 0x06000B59 RID: 2905
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void BackupRecordToFileDelegate(UIntPtr missionPointer, byte[] fileName, byte[] gameType, byte[] sceneLevels);

		// Token: 0x0200022E RID: 558
		// (Invoke) Token: 0x06000B5D RID: 2909
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void BatchFormationUnitPositionsDelegate(UIntPtr missionPointer, IntPtr orderedPositionIndices, IntPtr orderedLocalPositions, IntPtr availabilityTable, IntPtr globalPositionTable, WorldPosition orderPosition, Vec2 direction, int fileCount, int rankCount);

		// Token: 0x0200022F RID: 559
		// (Invoke) Token: 0x06000B61 RID: 2913
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearAgentActionsDelegate(UIntPtr missionPointer);

		// Token: 0x02000230 RID: 560
		// (Invoke) Token: 0x06000B65 RID: 2917
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearCorpsesDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool isMissionReset);

		// Token: 0x02000231 RID: 561
		// (Invoke) Token: 0x06000B69 RID: 2921
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearMissilesDelegate(UIntPtr missionPointer);

		// Token: 0x02000232 RID: 562
		// (Invoke) Token: 0x06000B6D RID: 2925
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearRecordBuffersDelegate(UIntPtr missionPointer);

		// Token: 0x02000233 RID: 563
		// (Invoke) Token: 0x06000B71 RID: 2929
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearResourcesDelegate(UIntPtr missionPointer);

		// Token: 0x02000234 RID: 564
		// (Invoke) Token: 0x06000B75 RID: 2933
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearSceneDelegate(UIntPtr missionPointer);

		// Token: 0x02000235 RID: 565
		// (Invoke) Token: 0x06000B79 RID: 2937
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float ComputeExactMissileRangeAtHeightDifferenceDelegate(float targetHeightDifference, float initialSpeed, float airFrictionConstant, float maxDuration);

		// Token: 0x02000236 RID: 566
		// (Invoke) Token: 0x06000B7D RID: 2941
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Mission.AgentCreationResult CreateAgentDelegate(UIntPtr missionPointer, ulong monsterFlag, int forcedAgentIndex, [MarshalAs(UnmanagedType.U1)] bool isFemale, ref AgentSpawnData spawnData, ref CapsuleData bodyCapsule, ref CapsuleData crouchedBodyCapsule, ref AnimationSystemData animationSystemData, int instanceNo);

		// Token: 0x02000237 RID: 567
		// (Invoke) Token: 0x06000B81 RID: 2945
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate UIntPtr CreateMissionDelegate(int mission);

		// Token: 0x02000238 RID: 568
		// (Invoke) Token: 0x06000B85 RID: 2949
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool EndOfRecordDelegate(UIntPtr missionPointer);

		// Token: 0x02000239 RID: 569
		// (Invoke) Token: 0x06000B89 RID: 2953
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void FastForwardMissionDelegate(UIntPtr missionPointer, float startTime, float endTime);

		// Token: 0x0200023A RID: 570
		// (Invoke) Token: 0x06000B8D RID: 2957
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void FinalizeMissionDelegate(UIntPtr missionPointer);

		// Token: 0x0200023B RID: 571
		// (Invoke) Token: 0x06000B91 RID: 2961
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int FindAgentWithIndexDelegate(UIntPtr missionPointer, int index);

		// Token: 0x0200023C RID: 572
		// (Invoke) Token: 0x06000B95 RID: 2965
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void FindConvexHullDelegate(IntPtr boundaryPoints, int boundaryPointCount, ref int convexPointCount);

		// Token: 0x0200023D RID: 573
		// (Invoke) Token: 0x06000B99 RID: 2969
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetAgentCountAroundPositionDelegate(UIntPtr missionPointer, int teamIndex, Vec2 position, float radius, ref int allyCount, ref int enemyCount);

		// Token: 0x0200023E RID: 574
		// (Invoke) Token: 0x06000B9D RID: 2973
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate WorldPosition GetAlternatePositionForNavmeshlessOrOutOfBoundsPositionDelegate(UIntPtr ptr, ref Vec2 directionTowards, ref WorldPosition originalPosition, ref float positionPenalty);

		// Token: 0x0200023F RID: 575
		// (Invoke) Token: 0x06000BA1 RID: 2977
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetAtmosphereNameForReplayDelegate(PlatformFilePath replayName);

		// Token: 0x02000240 RID: 576
		// (Invoke) Token: 0x06000BA5 RID: 2981
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetAtmosphereSeasonForReplayDelegate(PlatformFilePath replayName);

		// Token: 0x02000241 RID: 577
		// (Invoke) Token: 0x06000BA9 RID: 2985
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetAverageFpsDelegate(UIntPtr missionPointer);

		// Token: 0x02000242 RID: 578
		// (Invoke) Token: 0x06000BAD RID: 2989
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetAverageMoraleOfAgentsDelegate(UIntPtr missionPointer, int agentCount, IntPtr agentIndices);

		// Token: 0x02000243 RID: 579
		// (Invoke) Token: 0x06000BB1 RID: 2993
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate WorldPosition GetBestSlopeAngleHeightPosForDefendingDelegate(UIntPtr missionPointer, WorldPosition enemyPosition, WorldPosition defendingPosition, int sampleSize, float distanceRatioAllowedFromDefendedPos, float distanceSqrdAllowedFromBoundary, float cosinusOfBestSlope, float cosinusOfMaxAcceptedSlope, float minSlopeScore, float maxSlopeScore, float excessiveSlopePenalty, float nearConeCenterRatio, float nearConeCenterBonus, float heightDifferenceCeiling, float maxDisplacementPenalty);

		// Token: 0x02000244 RID: 580
		// (Invoke) Token: 0x06000BB5 RID: 2997
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate WorldPosition GetBestSlopeTowardsDirectionDelegate(UIntPtr missionPointer, ref WorldPosition centerPosition, float halfsize, ref WorldPosition referencePosition);

		// Token: 0x02000245 RID: 581
		// (Invoke) Token: 0x06000BB9 RID: 3001
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetBiggestAgentCollisionPaddingDelegate(UIntPtr missionPointer);

		// Token: 0x02000246 RID: 582
		// (Invoke) Token: 0x06000BBD RID: 3005
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetBoundaryCountDelegate(UIntPtr missionPointer);

		// Token: 0x02000247 RID: 583
		// (Invoke) Token: 0x06000BC1 RID: 3009
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetBoundaryNameDelegate(UIntPtr missionPointer, int boundaryIndex);

		// Token: 0x02000248 RID: 584
		// (Invoke) Token: 0x06000BC5 RID: 3013
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetBoundaryPointsDelegate(UIntPtr missionPointer, byte[] name, int boundaryPointOffset, IntPtr boundaryPoints, int boundaryPointsSize, ref int retrievedPointCount);

		// Token: 0x02000249 RID: 585
		// (Invoke) Token: 0x06000BC9 RID: 3017
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetBoundaryRadiusDelegate(UIntPtr missionPointer, byte[] name);

		// Token: 0x0200024A RID: 586
		// (Invoke) Token: 0x06000BCD RID: 3021
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate MatrixFrame GetCameraFrameDelegate(UIntPtr missionPointer);

		// Token: 0x0200024B RID: 587
		// (Invoke) Token: 0x06000BD1 RID: 3025
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetClearSceneTimerElapsedTimeDelegate(UIntPtr missionPointer);

		// Token: 0x0200024C RID: 588
		// (Invoke) Token: 0x06000BD5 RID: 3029
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetClosestAllyDelegate(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius);

		// Token: 0x0200024D RID: 589
		// (Invoke) Token: 0x06000BD9 RID: 3033
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetClosestBoundaryPositionDelegate(UIntPtr missionPointer, Vec2 position);

		// Token: 0x0200024E RID: 590
		// (Invoke) Token: 0x06000BDD RID: 3037
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetClosestEnemyDelegate(UIntPtr missionPointer, int teamIndex, Vec3 position, float radius);

		// Token: 0x0200024F RID: 591
		// (Invoke) Token: 0x06000BE1 RID: 3041
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCombatTypeDelegate(UIntPtr missionPointer);

		// Token: 0x02000250 RID: 592
		// (Invoke) Token: 0x06000BE5 RID: 3045
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetDebugAgentDelegate(UIntPtr missionPointer);

		// Token: 0x02000251 RID: 593
		// (Invoke) Token: 0x06000BE9 RID: 3049
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetEnemyAlarmStateIndicatorDelegate(UIntPtr missionPointer);

		// Token: 0x02000252 RID: 594
		// (Invoke) Token: 0x06000BED RID: 3053
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetGameTypeForReplayDelegate(PlatformFilePath replayName);

		// Token: 0x02000253 RID: 595
		// (Invoke) Token: 0x06000BF1 RID: 3057
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetIsLoadingFinishedDelegate(UIntPtr missionPointer);

		// Token: 0x02000254 RID: 596
		// (Invoke) Token: 0x06000BF5 RID: 3061
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetMissileCollisionPointDelegate(UIntPtr missionPointer, Vec3 missileStartingPosition, Vec3 missileDirection, float missileStartingSpeed, in WeaponDataAsNative weaponData);

		// Token: 0x02000255 RID: 597
		// (Invoke) Token: 0x06000BF9 RID: 3065
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetMissileHasRigidBodyDelegate(UIntPtr missionPointer, int index);

		// Token: 0x02000256 RID: 598
		// (Invoke) Token: 0x06000BFD RID: 3069
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMissileRangeDelegate(float missileStartingSpeed, float heightDifference);

		// Token: 0x02000257 RID: 599
		// (Invoke) Token: 0x06000C01 RID: 3073
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMissileVerticalAimCorrectionDelegate(Vec3 vecToTarget, float missileStartingSpeed, ref WeaponStatsData weaponStatsData, float airFrictionConstant);

		// Token: 0x02000258 RID: 600
		// (Invoke) Token: 0x06000C05 RID: 3077
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetNavigationPointsDelegate(UIntPtr missionPointer, ref NavigationData navigationData);

		// Token: 0x02000259 RID: 601
		// (Invoke) Token: 0x06000C09 RID: 3081
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetNearbyAgentsAuxDelegate(UIntPtr missionPointer, Vec2 center, float radius, int teamIndex, int friendOrEnemyOrAll, int agentsArrayOffset, ref EngineStackArray.StackArray40Int agentIds, ref int retrievedAgentCount);

		// Token: 0x0200025A RID: 602
		// (Invoke) Token: 0x06000C0D RID: 3085
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetNumberOfTeamsDelegate(UIntPtr missionPointer);

		// Token: 0x0200025B RID: 603
		// (Invoke) Token: 0x06000C11 RID: 3089
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetPauseAITickDelegate(UIntPtr missionPointer);

		// Token: 0x0200025C RID: 604
		// (Invoke) Token: 0x06000C15 RID: 3093
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetPlayerAlarmIndicatorDelegate(UIntPtr missionPointer);

		// Token: 0x0200025D RID: 605
		// (Invoke) Token: 0x06000C19 RID: 3097
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetPositionOfMissileDelegate(UIntPtr missionPointer, int index);

		// Token: 0x0200025E RID: 606
		// (Invoke) Token: 0x06000C1D RID: 3101
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetSceneLevelsForReplayDelegate(PlatformFilePath replayName);

		// Token: 0x0200025F RID: 607
		// (Invoke) Token: 0x06000C21 RID: 3105
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetSceneNameForReplayDelegate(PlatformFilePath replayName);

		// Token: 0x02000260 RID: 608
		// (Invoke) Token: 0x06000C25 RID: 3109
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate WorldPosition GetStraightPathToTargetDelegate(UIntPtr scenePointer, Vec2 targetPosition, WorldPosition startingPosition, float samplingDistance, [MarshalAs(UnmanagedType.U1)] bool stopAtObstacle);

		// Token: 0x02000261 RID: 609
		// (Invoke) Token: 0x06000C29 RID: 3113
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetTimeDelegate(UIntPtr missionPointer);

		// Token: 0x02000262 RID: 610
		// (Invoke) Token: 0x06000C2D RID: 3117
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetVelocityOfMissileDelegate(UIntPtr missionPointer, int index);

		// Token: 0x02000263 RID: 611
		// (Invoke) Token: 0x06000C31 RID: 3121
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetWaterLevelAtPositionDelegate(UIntPtr missionPointer, Vec2 position);

		// Token: 0x02000264 RID: 612
		// (Invoke) Token: 0x06000C35 RID: 3125
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetWeightedPointOfEnemiesDelegate(UIntPtr missionPointer, int agentIndex, Vec2 basePoint);

		// Token: 0x02000265 RID: 613
		// (Invoke) Token: 0x06000C39 RID: 3129
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool HasAnyAgentsOfTeamAroundDelegate(UIntPtr missionPointer, Vec3 origin, float radius, int teamNo);

		// Token: 0x02000266 RID: 614
		// (Invoke) Token: 0x06000C3D RID: 3133
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void IdleTickDelegate(UIntPtr missionPointer, float dt);

		// Token: 0x02000267 RID: 615
		// (Invoke) Token: 0x06000C41 RID: 3137
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void InitializeMissionDelegate(UIntPtr missionPointer, ref MissionInitializerRecord rec);

		// Token: 0x02000268 RID: 616
		// (Invoke) Token: 0x06000C45 RID: 3141
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsAgentInProximityMapDelegate(UIntPtr missionPointer, int agentIndex);

		// Token: 0x02000269 RID: 617
		// (Invoke) Token: 0x06000C49 RID: 3145
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsFormationUnitPositionAvailableDelegate(UIntPtr missionPointer, ref WorldPosition orderPosition, ref WorldPosition unitPosition, ref WorldPosition nearestAvailableUnitPosition, float manhattanDistance);

		// Token: 0x0200026A RID: 618
		// (Invoke) Token: 0x06000C4D RID: 3149
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsPositionInsideAnyBlockerNavMeshFace2DDelegate(UIntPtr missionPointer, Vec2 position);

		// Token: 0x0200026B RID: 619
		// (Invoke) Token: 0x06000C51 RID: 3153
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsPositionInsideBoundariesDelegate(UIntPtr missionPointer, Vec2 position);

		// Token: 0x0200026C RID: 620
		// (Invoke) Token: 0x06000C55 RID: 3157
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void MakeSoundDelegate(UIntPtr pointer, int nativeSoundCode, Vec3 position, [MarshalAs(UnmanagedType.U1)] bool soundCanBePredicted, [MarshalAs(UnmanagedType.U1)] bool isReliable, int relatedAgent1, int relatedAgent2);

		// Token: 0x0200026D RID: 621
		// (Invoke) Token: 0x06000C59 RID: 3161
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void MakeSoundOnlyOnRelatedPeerDelegate(UIntPtr pointer, int nativeSoundCode, Vec3 position, int relatedAgent);

		// Token: 0x0200026E RID: 622
		// (Invoke) Token: 0x06000C5D RID: 3165
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void MakeSoundWithParameterDelegate(UIntPtr pointer, int nativeSoundCode, Vec3 position, [MarshalAs(UnmanagedType.U1)] bool soundCanBePredicted, [MarshalAs(UnmanagedType.U1)] bool isReliable, int relatedAgent1, int relatedAgent2, SoundEventParameter parameter);

		// Token: 0x0200026F RID: 623
		// (Invoke) Token: 0x06000C61 RID: 3169
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void PauseMissionSceneSoundsDelegate(UIntPtr missionPointer);

		// Token: 0x02000270 RID: 624
		// (Invoke) Token: 0x06000C65 RID: 3173
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void PrepareMissileWeaponForDropDelegate(UIntPtr missionPointer, int missileIndex);

		// Token: 0x02000271 RID: 625
		// (Invoke) Token: 0x06000C69 RID: 3177
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ProcessRecordUntilTimeDelegate(UIntPtr missionPointer, float time);

		// Token: 0x02000272 RID: 626
		// (Invoke) Token: 0x06000C6D RID: 3181
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate AgentProximityMap.ProximityMapSearchStructInternal ProximityMapBeginSearchDelegate(UIntPtr missionPointer, Vec2 searchPos, float searchRadius);

		// Token: 0x02000273 RID: 627
		// (Invoke) Token: 0x06000C71 RID: 3185
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ProximityMapFindNextDelegate(UIntPtr missionPointer, ref AgentProximityMap.ProximityMapSearchStructInternal searchStruct);

		// Token: 0x02000274 RID: 628
		// (Invoke) Token: 0x06000C75 RID: 3189
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float ProximityMapMaxSearchRadiusDelegate(UIntPtr missionPointer);

		// Token: 0x02000275 RID: 629
		// (Invoke) Token: 0x06000C79 RID: 3193
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int RayCastForClosestAgentDelegate(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, float RayThickness);

		// Token: 0x02000276 RID: 630
		// (Invoke) Token: 0x06000C7D RID: 3197
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool RayCastForClosestAgentsLimbsDelegate(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int ExcludeAgentIndex, ref float CollisionDistance, ref int AgentIndex, ref sbyte BoneIndex);

		// Token: 0x02000277 RID: 631
		// (Invoke) Token: 0x06000C81 RID: 3201
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool RayCastForGivenAgentsLimbsDelegate(UIntPtr missionPointer, Vec3 SourcePoint, Vec3 RayFinishPoint, int GivenAgentIndex, ref float CollisionDistance, ref sbyte BoneIndex);

		// Token: 0x02000278 RID: 632
		// (Invoke) Token: 0x06000C85 RID: 3205
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RecordCurrentStateDelegate(UIntPtr missionPointer);

		// Token: 0x02000279 RID: 633
		// (Invoke) Token: 0x06000C89 RID: 3209
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool RemoveBoundaryDelegate(UIntPtr missionPointer, byte[] name);

		// Token: 0x0200027A RID: 634
		// (Invoke) Token: 0x06000C8D RID: 3213
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RemoveMissileDelegate(UIntPtr missionPointer, int missileIndex);

		// Token: 0x0200027B RID: 635
		// (Invoke) Token: 0x06000C91 RID: 3217
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResetFirstThirdPersonViewDelegate(UIntPtr missionPointer);

		// Token: 0x0200027C RID: 636
		// (Invoke) Token: 0x06000C95 RID: 3221
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResetTeamsDelegate(UIntPtr missionPointer);

		// Token: 0x0200027D RID: 637
		// (Invoke) Token: 0x06000C99 RID: 3225
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RestartRecordDelegate(UIntPtr missionPointer);

		// Token: 0x0200027E RID: 638
		// (Invoke) Token: 0x06000C9D RID: 3229
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RestoreRecordFromFileDelegate(UIntPtr missionPointer, byte[] fileName);

		// Token: 0x0200027F RID: 639
		// (Invoke) Token: 0x06000CA1 RID: 3233
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResumeMissionSceneSoundsDelegate(UIntPtr missionPointer);

		// Token: 0x02000280 RID: 640
		// (Invoke) Token: 0x06000CA5 RID: 3237
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetBowMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

		// Token: 0x02000281 RID: 641
		// (Invoke) Token: 0x06000CA9 RID: 3241
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCameraFrameDelegate(UIntPtr missionPointer, ref MatrixFrame cameraFrame, float zoomFactor, ref Vec3 attenuationPosition);

		// Token: 0x02000282 RID: 642
		// (Invoke) Token: 0x06000CAD RID: 3245
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCameraIsFirstPersonDelegate([MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x02000283 RID: 643
		// (Invoke) Token: 0x06000CB1 RID: 3249
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCombatTypeDelegate(UIntPtr missionPointer, int combatType);

		// Token: 0x02000284 RID: 644
		// (Invoke) Token: 0x06000CB5 RID: 3253
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCrossbowMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

		// Token: 0x02000285 RID: 645
		// (Invoke) Token: 0x06000CB9 RID: 3257
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetDebugAgentDelegate(UIntPtr missionPointer, int index);

		// Token: 0x02000286 RID: 646
		// (Invoke) Token: 0x06000CBD RID: 3261
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLastMovementKeyPressedDelegate(UIntPtr missionPointer, Agent.MovementControlFlag lastMovementKeyPressed);

		// Token: 0x02000287 RID: 647
		// (Invoke) Token: 0x06000CC1 RID: 3265
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMissileRangeModifierDelegate(UIntPtr missionPointer, float modifier);

		// Token: 0x02000288 RID: 648
		// (Invoke) Token: 0x06000CC5 RID: 3269
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMissionCorpseFadeOutTimeInSecondsDelegate(UIntPtr missionPointer, float corpseFadeOutTimeInSeconds);

		// Token: 0x02000289 RID: 649
		// (Invoke) Token: 0x06000CC9 RID: 3273
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetNavigationFaceCostWithIdAroundPositionDelegate(UIntPtr missionPointer, int navigationFaceId, Vec3 position, float cost);

		// Token: 0x0200028A RID: 650
		// (Invoke) Token: 0x06000CCD RID: 3277
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetPauseAITickDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool I);

		// Token: 0x0200028B RID: 651
		// (Invoke) Token: 0x06000CD1 RID: 3281
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetRandomDecideTimeOfAgentsDelegate(UIntPtr missionPointer, int agentCount, IntPtr agentIndices, float minAIReactionTime, float maxAIReactionTime);

		// Token: 0x0200028C RID: 652
		// (Invoke) Token: 0x06000CD5 RID: 3285
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetReportStuckAgentsModeDelegate(UIntPtr missionPointer, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x0200028D RID: 653
		// (Invoke) Token: 0x06000CD9 RID: 3289
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetThrowingMissileSpeedModifierDelegate(UIntPtr missionPointer, float modifier);

		// Token: 0x0200028E RID: 654
		// (Invoke) Token: 0x06000CDD RID: 3293
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void StartRecordingDelegate();

		// Token: 0x0200028F RID: 655
		// (Invoke) Token: 0x06000CE1 RID: 3297
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void TickDelegate(UIntPtr missionPointer, float dt);

		// Token: 0x02000290 RID: 656
		// (Invoke) Token: 0x06000CE5 RID: 3301
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void tickAgentsAndTeamsAsyncDelegate(UIntPtr missionPointer, float dt);

		// Token: 0x02000291 RID: 657
		// (Invoke) Token: 0x06000CE9 RID: 3305
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool ToggleDisableFallAvoidDelegate();
	}
}
