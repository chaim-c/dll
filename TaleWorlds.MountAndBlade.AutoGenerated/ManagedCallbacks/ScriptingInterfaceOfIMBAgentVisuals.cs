using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks
{
	// Token: 0x0200000B RID: 11
	internal class ScriptingInterfaceOfIMBAgentVisuals : IMBAgentVisuals
	{
		// Token: 0x06000169 RID: 361 RVA: 0x00009A65 File Offset: 0x00007C65
		public bool AddChildEntity(UIntPtr agentVisualsPtr, UIntPtr EntityId)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_AddChildEntityDelegate(agentVisualsPtr, EntityId);
		}

		// Token: 0x0600016A RID: 362 RVA: 0x00009A73 File Offset: 0x00007C73
		public void AddHorseReinsClothMesh(UIntPtr agentVisualsPtr, UIntPtr reinMeshPointer, UIntPtr ropeMeshPointer)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_AddHorseReinsClothMeshDelegate(agentVisualsPtr, reinMeshPointer, ropeMeshPointer);
		}

		// Token: 0x0600016B RID: 363 RVA: 0x00009A82 File Offset: 0x00007C82
		public void AddMesh(UIntPtr agentVisualsId, UIntPtr meshPointer)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_AddMeshDelegate(agentVisualsId, meshPointer);
		}

		// Token: 0x0600016C RID: 364 RVA: 0x00009A90 File Offset: 0x00007C90
		public void AddMultiMesh(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_AddMultiMeshDelegate(agentVisualsPtr, multiMeshPointer, bodyMeshIndex);
		}

		// Token: 0x0600016D RID: 365 RVA: 0x00009AA0 File Offset: 0x00007CA0
		public CompositeComponent AddPrefabToAgentVisualBoneByBoneType(UIntPtr agentVisualsPtr, string prefabName, HumanBone boneType)
		{
			byte[] array = null;
			if (prefabName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgentVisuals._utf8.GetByteCount(prefabName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgentVisuals._utf8.GetBytes(prefabName, 0, prefabName.Length, array, 0);
				array[byteCount] = 0;
			}
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgentVisuals.call_AddPrefabToAgentVisualBoneByBoneTypeDelegate(agentVisualsPtr, array, boneType);
			CompositeComponent result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new CompositeComponent(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x0600016E RID: 366 RVA: 0x00009B30 File Offset: 0x00007D30
		public CompositeComponent AddPrefabToAgentVisualBoneByRealBoneIndex(UIntPtr agentVisualsPtr, string prefabName, sbyte realBoneIndex)
		{
			byte[] array = null;
			if (prefabName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgentVisuals._utf8.GetByteCount(prefabName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgentVisuals._utf8.GetBytes(prefabName, 0, prefabName.Length, array, 0);
				array[byteCount] = 0;
			}
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgentVisuals.call_AddPrefabToAgentVisualBoneByRealBoneIndexDelegate(agentVisualsPtr, array, realBoneIndex);
			CompositeComponent result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new CompositeComponent(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x0600016F RID: 367 RVA: 0x00009BBE File Offset: 0x00007DBE
		public void AddSkinMeshesToAgentEntity(UIntPtr agentVisualsId, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, bool useGPUMorph, bool useFaceCache)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_AddSkinMeshesToAgentEntityDelegate(agentVisualsId, ref skinParams, ref bodyProperties, useGPUMorph, useFaceCache);
		}

		// Token: 0x06000170 RID: 368 RVA: 0x00009BD4 File Offset: 0x00007DD4
		public void AddWeaponToAgentEntity(UIntPtr agentVisualsPtr, int slotIndex, in WeaponData agentEntityData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData agentEntityAmmoData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, GameEntity cachedEntity)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(agentEntityData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			WeaponDataAsNative weaponDataAsNative2 = new WeaponDataAsNative(agentEntityAmmoData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData2 = new PinnedArrayData<WeaponStatsData>(ammoWeaponStatsData, false);
			IntPtr pointer2 = pinnedArrayData2.Pointer;
			UIntPtr cachedEntity2 = (cachedEntity != null) ? cachedEntity.Pointer : UIntPtr.Zero;
			ScriptingInterfaceOfIMBAgentVisuals.call_AddWeaponToAgentEntityDelegate(agentVisualsPtr, slotIndex, weaponDataAsNative, pointer, weaponStatsDataLength, weaponDataAsNative2, pointer2, ammoWeaponStatsDataLength, cachedEntity2);
			pinnedArrayData.Dispose();
			pinnedArrayData2.Dispose();
		}

		// Token: 0x06000171 RID: 369 RVA: 0x00009C64 File Offset: 0x00007E64
		public void ApplySkeletonScale(UIntPtr agentVisualsId, Vec3 mountSitBoneScale, float mountRadiusAdder, byte boneCount, sbyte[] boneIndices, Vec3[] boneScales)
		{
			PinnedArrayData<sbyte> pinnedArrayData = new PinnedArrayData<sbyte>(boneIndices, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			PinnedArrayData<Vec3> pinnedArrayData2 = new PinnedArrayData<Vec3>(boneScales, false);
			IntPtr pointer2 = pinnedArrayData2.Pointer;
			ScriptingInterfaceOfIMBAgentVisuals.call_ApplySkeletonScaleDelegate(agentVisualsId, mountSitBoneScale, mountRadiusAdder, boneCount, pointer, pointer2);
			pinnedArrayData.Dispose();
			pinnedArrayData2.Dispose();
		}

		// Token: 0x06000172 RID: 370 RVA: 0x00009CB4 File Offset: 0x00007EB4
		public void BatchLastLodMeshes(UIntPtr agentVisualsPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_BatchLastLodMeshesDelegate(agentVisualsPtr);
		}

		// Token: 0x06000173 RID: 371 RVA: 0x00009CC1 File Offset: 0x00007EC1
		public bool CheckResources(UIntPtr agentVisualsPtr, bool addToQueue)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_CheckResourcesDelegate(agentVisualsPtr, addToQueue);
		}

		// Token: 0x06000174 RID: 372 RVA: 0x00009CCF File Offset: 0x00007ECF
		public void ClearAllWeaponMeshes(UIntPtr agentVisualsPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_ClearAllWeaponMeshesDelegate(agentVisualsPtr);
		}

		// Token: 0x06000175 RID: 373 RVA: 0x00009CDC File Offset: 0x00007EDC
		public void ClearVisualComponents(UIntPtr agentVisualsId, bool removeSkeleton)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_ClearVisualComponentsDelegate(agentVisualsId, removeSkeleton);
		}

		// Token: 0x06000176 RID: 374 RVA: 0x00009CEA File Offset: 0x00007EEA
		public void ClearWeaponMeshes(UIntPtr agentVisualsPtr, int weaponVisualIndex)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_ClearWeaponMeshesDelegate(agentVisualsPtr, weaponVisualIndex);
		}

		// Token: 0x06000177 RID: 375 RVA: 0x00009CF8 File Offset: 0x00007EF8
		public UIntPtr CreateAgentRendererSceneController(UIntPtr scenePointer, int maxRenderCount)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_CreateAgentRendererSceneControllerDelegate(scenePointer, maxRenderCount);
		}

		// Token: 0x06000178 RID: 376 RVA: 0x00009D08 File Offset: 0x00007F08
		public MBAgentVisuals CreateAgentVisuals(UIntPtr scenePtr, string ownerName, Vec3 eyeOffset)
		{
			byte[] array = null;
			if (ownerName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgentVisuals._utf8.GetByteCount(ownerName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgentVisuals._utf8.GetBytes(ownerName, 0, ownerName.Length, array, 0);
				array[byteCount] = 0;
			}
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgentVisuals.call_CreateAgentVisualsDelegate(scenePtr, array, eyeOffset);
			MBAgentVisuals result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new MBAgentVisuals(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x06000179 RID: 377 RVA: 0x00009D96 File Offset: 0x00007F96
		public void CreateParticleSystemAttachedToBone(UIntPtr agentVisualsPtr, int runtimeParticleindex, sbyte boneIndex, ref MatrixFrame boneLocalParticleFrame)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_CreateParticleSystemAttachedToBoneDelegate(agentVisualsPtr, runtimeParticleindex, boneIndex, ref boneLocalParticleFrame);
		}

		// Token: 0x0600017A RID: 378 RVA: 0x00009DA7 File Offset: 0x00007FA7
		public void DestructAgentRendererSceneController(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer, bool deleteThisFrame)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_DestructAgentRendererSceneControllerDelegate(scenePointer, agentRendererSceneControllerPointer, deleteThisFrame);
		}

		// Token: 0x0600017B RID: 379 RVA: 0x00009DB6 File Offset: 0x00007FB6
		public void DisableContour(UIntPtr agentVisualsPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_DisableContourDelegate(agentVisualsPtr);
		}

		// Token: 0x0600017C RID: 380 RVA: 0x00009DC4 File Offset: 0x00007FC4
		public void FillEntityWithBodyMeshesWithoutAgentVisuals(UIntPtr entityPoinbter, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, MetaMesh glovesMesh)
		{
			UIntPtr glovesMesh2 = (glovesMesh != null) ? glovesMesh.Pointer : UIntPtr.Zero;
			ScriptingInterfaceOfIMBAgentVisuals.call_FillEntityWithBodyMeshesWithoutAgentVisualsDelegate(entityPoinbter, ref skinParams, ref bodyProperties, glovesMesh2);
		}

		// Token: 0x0600017D RID: 381 RVA: 0x00009DF8 File Offset: 0x00007FF8
		public GameEntity GetAttachedWeaponEntity(UIntPtr agentVisualsPtr, int attachedWeaponIndex)
		{
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgentVisuals.call_GetAttachedWeaponEntityDelegate(agentVisualsPtr, attachedWeaponIndex);
			GameEntity result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new GameEntity(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x0600017E RID: 382 RVA: 0x00009E43 File Offset: 0x00008043
		public void GetBoneEntitialFrame(UIntPtr agentVisualsPtr, sbyte bone, bool useBoneMapping, ref MatrixFrame outFrame)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_GetBoneEntitialFrameDelegate(agentVisualsPtr, bone, useBoneMapping, ref outFrame);
		}

		// Token: 0x0600017F RID: 383 RVA: 0x00009E54 File Offset: 0x00008054
		public void GetBoneTypeData(UIntPtr pointer, sbyte boneIndex, ref BoneBodyTypeData boneBodyTypeData)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_GetBoneTypeDataDelegate(pointer, boneIndex, ref boneBodyTypeData);
		}

		// Token: 0x06000180 RID: 384 RVA: 0x00009E63 File Offset: 0x00008063
		public Vec3 GetCurrentHelmetScalingFactor(UIntPtr agentVisualsPtr)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_GetCurrentHelmetScalingFactorDelegate(agentVisualsPtr);
		}

		// Token: 0x06000181 RID: 385 RVA: 0x00009E70 File Offset: 0x00008070
		public RagdollState GetCurrentRagdollState(UIntPtr agentVisualsPtr)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_GetCurrentRagdollStateDelegate(agentVisualsPtr);
		}

		// Token: 0x06000182 RID: 386 RVA: 0x00009E80 File Offset: 0x00008080
		public GameEntity GetEntity(UIntPtr agentVisualsPtr)
		{
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgentVisuals.call_GetEntityDelegate(agentVisualsPtr);
			GameEntity result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new GameEntity(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x06000183 RID: 387 RVA: 0x00009ECA File Offset: 0x000080CA
		public void GetFrame(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_GetFrameDelegate(agentVisualsPtr, ref outFrame);
		}

		// Token: 0x06000184 RID: 388 RVA: 0x00009ED8 File Offset: 0x000080D8
		public void GetGlobalFrame(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_GetGlobalFrameDelegate(agentVisualsPtr, ref outFrame);
		}

		// Token: 0x06000185 RID: 389 RVA: 0x00009EE6 File Offset: 0x000080E6
		public Vec3 GetGlobalStableEyePoint(UIntPtr agentVisualsPtr, bool isHumanoid)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_GetGlobalStableEyePointDelegate(agentVisualsPtr, isHumanoid);
		}

		// Token: 0x06000186 RID: 390 RVA: 0x00009EF4 File Offset: 0x000080F4
		public Vec3 GetGlobalStableNeckPoint(UIntPtr agentVisualsPtr, bool isHumanoid)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_GetGlobalStableNeckPointDelegate(agentVisualsPtr, isHumanoid);
		}

		// Token: 0x06000187 RID: 391 RVA: 0x00009F02 File Offset: 0x00008102
		public sbyte GetRealBoneIndex(UIntPtr agentVisualsPtr, HumanBone boneType)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_GetRealBoneIndexDelegate(agentVisualsPtr, boneType);
		}

		// Token: 0x06000188 RID: 392 RVA: 0x00009F10 File Offset: 0x00008110
		public Skeleton GetSkeleton(UIntPtr agentVisualsPtr)
		{
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgentVisuals.call_GetSkeletonDelegate(agentVisualsPtr);
			Skeleton result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new Skeleton(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x06000189 RID: 393 RVA: 0x00009F5A File Offset: 0x0000815A
		public bool GetVisible(UIntPtr agentVisualsPtr)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_GetVisibleDelegate(agentVisualsPtr);
		}

		// Token: 0x0600018A RID: 394 RVA: 0x00009F67 File Offset: 0x00008167
		public bool IsValid(UIntPtr agentVisualsPtr)
		{
			return ScriptingInterfaceOfIMBAgentVisuals.call_IsValidDelegate(agentVisualsPtr);
		}

		// Token: 0x0600018B RID: 395 RVA: 0x00009F74 File Offset: 0x00008174
		public void LazyUpdateAgentRendererData(UIntPtr agentVisualsId)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_LazyUpdateAgentRendererDataDelegate(agentVisualsId);
		}

		// Token: 0x0600018C RID: 396 RVA: 0x00009F81 File Offset: 0x00008181
		public void MakeVoice(UIntPtr agentVisualsPtr, int voiceId, ref Vec3 position)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_MakeVoiceDelegate(agentVisualsPtr, voiceId, ref position);
		}

		// Token: 0x0600018D RID: 397 RVA: 0x00009F90 File Offset: 0x00008190
		public void RemoveChildEntity(UIntPtr agentVisualsPtr, UIntPtr EntityId, int removeReason)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_RemoveChildEntityDelegate(agentVisualsPtr, EntityId, removeReason);
		}

		// Token: 0x0600018E RID: 398 RVA: 0x00009F9F File Offset: 0x0000819F
		public void RemoveMesh(UIntPtr agentVisualsPtr, UIntPtr meshPointer)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_RemoveMeshDelegate(agentVisualsPtr, meshPointer);
		}

		// Token: 0x0600018F RID: 399 RVA: 0x00009FAD File Offset: 0x000081AD
		public void RemoveMultiMesh(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_RemoveMultiMeshDelegate(agentVisualsPtr, multiMeshPointer, bodyMeshIndex);
		}

		// Token: 0x06000190 RID: 400 RVA: 0x00009FBC File Offset: 0x000081BC
		public void Reset(UIntPtr agentVisualsPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_ResetDelegate(agentVisualsPtr);
		}

		// Token: 0x06000191 RID: 401 RVA: 0x00009FC9 File Offset: 0x000081C9
		public void ResetNextFrame(UIntPtr agentVisualsPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_ResetNextFrameDelegate(agentVisualsPtr);
		}

		// Token: 0x06000192 RID: 402 RVA: 0x00009FD6 File Offset: 0x000081D6
		public void SetAgentLocalSpeed(UIntPtr agentVisualsPtr, Vec2 speed)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetAgentLocalSpeedDelegate(agentVisualsPtr, speed);
		}

		// Token: 0x06000193 RID: 403 RVA: 0x00009FE4 File Offset: 0x000081E4
		public void SetAgentLodMakeZeroOrMax(UIntPtr agentVisualsPtr, bool makeZero)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetAgentLodMakeZeroOrMaxDelegate(agentVisualsPtr, makeZero);
		}

		// Token: 0x06000194 RID: 404 RVA: 0x00009FF2 File Offset: 0x000081F2
		public void SetAsContourEntity(UIntPtr agentVisualsPtr, uint color)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetAsContourEntityDelegate(agentVisualsPtr, color);
		}

		// Token: 0x06000195 RID: 405 RVA: 0x0000A000 File Offset: 0x00008200
		public void SetClothComponentKeepStateOfAllMeshes(UIntPtr agentVisualsPtr, bool keepState)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetClothComponentKeepStateOfAllMeshesDelegate(agentVisualsPtr, keepState);
		}

		// Token: 0x06000196 RID: 406 RVA: 0x0000A00E File Offset: 0x0000820E
		public void SetClothWindToWeaponAtIndex(UIntPtr agentVisualsPtr, Vec3 windDirection, bool isLocal, int index)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetClothWindToWeaponAtIndexDelegate(agentVisualsPtr, windDirection, isLocal, index);
		}

		// Token: 0x06000197 RID: 407 RVA: 0x0000A01F File Offset: 0x0000821F
		public void SetContourState(UIntPtr agentVisualsPtr, bool alwaysVisible)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetContourStateDelegate(agentVisualsPtr, alwaysVisible);
		}

		// Token: 0x06000198 RID: 408 RVA: 0x0000A02D File Offset: 0x0000822D
		public void SetDoTimerBasedForcedSkeletonUpdates(UIntPtr agentRendererSceneControllerPointer, bool value)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetDoTimerBasedForcedSkeletonUpdatesDelegate(agentRendererSceneControllerPointer, value);
		}

		// Token: 0x06000199 RID: 409 RVA: 0x0000A03B File Offset: 0x0000823B
		public void SetEnableOcclusionCulling(UIntPtr agentVisualsPtr, bool enable)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetEnableOcclusionCullingDelegate(agentVisualsPtr, enable);
		}

		// Token: 0x0600019A RID: 410 RVA: 0x0000A049 File Offset: 0x00008249
		public void SetEnforcedVisibilityForAllAgents(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetEnforcedVisibilityForAllAgentsDelegate(scenePointer, agentRendererSceneControllerPointer);
		}

		// Token: 0x0600019B RID: 411 RVA: 0x0000A057 File Offset: 0x00008257
		public void SetEntity(UIntPtr agentVisualsId, UIntPtr entityPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetEntityDelegate(agentVisualsId, entityPtr);
		}

		// Token: 0x0600019C RID: 412 RVA: 0x0000A065 File Offset: 0x00008265
		public void SetFaceGenerationParams(UIntPtr agentVisualsId, FaceGenerationParams faceGenerationParams)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetFaceGenerationParamsDelegate(agentVisualsId, faceGenerationParams);
		}

		// Token: 0x0600019D RID: 413 RVA: 0x0000A073 File Offset: 0x00008273
		public void SetFrame(UIntPtr agentVisualsPtr, ref MatrixFrame frame)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetFrameDelegate(agentVisualsPtr, ref frame);
		}

		// Token: 0x0600019E RID: 414 RVA: 0x0000A081 File Offset: 0x00008281
		public void SetLodAtlasShadingIndex(UIntPtr agentVisualsId, int index, bool useTeamColor, uint teamColor1, uint teamColor2)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetLodAtlasShadingIndexDelegate(agentVisualsId, index, useTeamColor, teamColor1, teamColor2);
		}

		// Token: 0x0600019F RID: 415 RVA: 0x0000A094 File Offset: 0x00008294
		public void SetLookDirection(UIntPtr agentVisualsPtr, Vec3 direction)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetLookDirectionDelegate(agentVisualsPtr, direction);
		}

		// Token: 0x060001A0 RID: 416 RVA: 0x0000A0A2 File Offset: 0x000082A2
		public void SetSetupMorphNode(UIntPtr agentVisualsPtr, bool value)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetSetupMorphNodeDelegate(agentVisualsPtr, value);
		}

		// Token: 0x060001A1 RID: 417 RVA: 0x0000A0B0 File Offset: 0x000082B0
		public void SetSkeleton(UIntPtr agentVisualsId, UIntPtr skeletonPtr)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetSkeletonDelegate(agentVisualsId, skeletonPtr);
		}

		// Token: 0x060001A2 RID: 418 RVA: 0x0000A0BE File Offset: 0x000082BE
		public void SetVisible(UIntPtr agentVisualsPtr, bool value)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetVisibleDelegate(agentVisualsPtr, value);
		}

		// Token: 0x060001A3 RID: 419 RVA: 0x0000A0CC File Offset: 0x000082CC
		public void SetVoiceDefinitionIndex(UIntPtr agentVisualsPtr, int voiceDefinitionIndex, float voicePitch)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetVoiceDefinitionIndexDelegate(agentVisualsPtr, voiceDefinitionIndex, voicePitch);
		}

		// Token: 0x060001A4 RID: 420 RVA: 0x0000A0DB File Offset: 0x000082DB
		public void SetWieldedWeaponIndices(UIntPtr agentVisualsId, int slotIndexRightHand, int slotIndexLeftHand)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_SetWieldedWeaponIndicesDelegate(agentVisualsId, slotIndexRightHand, slotIndexLeftHand);
		}

		// Token: 0x060001A5 RID: 421 RVA: 0x0000A0EC File Offset: 0x000082EC
		public void StartRhubarbRecord(UIntPtr agentVisualsId, string path, int soundId)
		{
			byte[] array = null;
			if (path != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgentVisuals._utf8.GetByteCount(path);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgentVisuals._utf8.GetBytes(path, 0, path.Length, array, 0);
				array[byteCount] = 0;
			}
			ScriptingInterfaceOfIMBAgentVisuals.call_StartRhubarbRecordDelegate(agentVisualsId, array, soundId);
		}

		// Token: 0x060001A6 RID: 422 RVA: 0x0000A148 File Offset: 0x00008348
		public void Tick(UIntPtr agentVisualsId, UIntPtr parentAgentVisualsId, float dt, bool entityMoving, float speed)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_TickDelegate(agentVisualsId, parentAgentVisualsId, dt, entityMoving, speed);
		}

		// Token: 0x060001A7 RID: 423 RVA: 0x0000A15B File Offset: 0x0000835B
		public void UpdateQuiverMeshesWithoutAgent(UIntPtr agentVisualsId, int weaponIndex, int ammoCountToShow)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_UpdateQuiverMeshesWithoutAgentDelegate(agentVisualsId, weaponIndex, ammoCountToShow);
		}

		// Token: 0x060001A8 RID: 424 RVA: 0x0000A16A File Offset: 0x0000836A
		public void UpdateSkeletonScale(UIntPtr agentVisualsId, int bodyDeformType)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_UpdateSkeletonScaleDelegate(agentVisualsId, bodyDeformType);
		}

		// Token: 0x060001A9 RID: 425 RVA: 0x0000A178 File Offset: 0x00008378
		public void UseScaledWeapons(UIntPtr agentVisualsPtr, bool value)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_UseScaledWeaponsDelegate(agentVisualsPtr, value);
		}

		// Token: 0x060001AA RID: 426 RVA: 0x0000A186 File Offset: 0x00008386
		public void ValidateAgentVisualsReseted(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer)
		{
			ScriptingInterfaceOfIMBAgentVisuals.call_ValidateAgentVisualsResetedDelegate(scenePointer, agentRendererSceneControllerPointer);
		}

		// Token: 0x060001AD RID: 429 RVA: 0x0000A1A8 File Offset: 0x000083A8
		void IMBAgentVisuals.AddWeaponToAgentEntity(UIntPtr agentVisualsPtr, int slotIndex, in WeaponData agentEntityData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData agentEntityAmmoData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, GameEntity cachedEntity)
		{
			this.AddWeaponToAgentEntity(agentVisualsPtr, slotIndex, agentEntityData, weaponStatsData, weaponStatsDataLength, agentEntityAmmoData, ammoWeaponStatsData, ammoWeaponStatsDataLength, cachedEntity);
		}

		// Token: 0x04000105 RID: 261
		private static readonly Encoding _utf8 = Encoding.UTF8;

		// Token: 0x04000106 RID: 262
		public static ScriptingInterfaceOfIMBAgentVisuals.AddChildEntityDelegate call_AddChildEntityDelegate;

		// Token: 0x04000107 RID: 263
		public static ScriptingInterfaceOfIMBAgentVisuals.AddHorseReinsClothMeshDelegate call_AddHorseReinsClothMeshDelegate;

		// Token: 0x04000108 RID: 264
		public static ScriptingInterfaceOfIMBAgentVisuals.AddMeshDelegate call_AddMeshDelegate;

		// Token: 0x04000109 RID: 265
		public static ScriptingInterfaceOfIMBAgentVisuals.AddMultiMeshDelegate call_AddMultiMeshDelegate;

		// Token: 0x0400010A RID: 266
		public static ScriptingInterfaceOfIMBAgentVisuals.AddPrefabToAgentVisualBoneByBoneTypeDelegate call_AddPrefabToAgentVisualBoneByBoneTypeDelegate;

		// Token: 0x0400010B RID: 267
		public static ScriptingInterfaceOfIMBAgentVisuals.AddPrefabToAgentVisualBoneByRealBoneIndexDelegate call_AddPrefabToAgentVisualBoneByRealBoneIndexDelegate;

		// Token: 0x0400010C RID: 268
		public static ScriptingInterfaceOfIMBAgentVisuals.AddSkinMeshesToAgentEntityDelegate call_AddSkinMeshesToAgentEntityDelegate;

		// Token: 0x0400010D RID: 269
		public static ScriptingInterfaceOfIMBAgentVisuals.AddWeaponToAgentEntityDelegate call_AddWeaponToAgentEntityDelegate;

		// Token: 0x0400010E RID: 270
		public static ScriptingInterfaceOfIMBAgentVisuals.ApplySkeletonScaleDelegate call_ApplySkeletonScaleDelegate;

		// Token: 0x0400010F RID: 271
		public static ScriptingInterfaceOfIMBAgentVisuals.BatchLastLodMeshesDelegate call_BatchLastLodMeshesDelegate;

		// Token: 0x04000110 RID: 272
		public static ScriptingInterfaceOfIMBAgentVisuals.CheckResourcesDelegate call_CheckResourcesDelegate;

		// Token: 0x04000111 RID: 273
		public static ScriptingInterfaceOfIMBAgentVisuals.ClearAllWeaponMeshesDelegate call_ClearAllWeaponMeshesDelegate;

		// Token: 0x04000112 RID: 274
		public static ScriptingInterfaceOfIMBAgentVisuals.ClearVisualComponentsDelegate call_ClearVisualComponentsDelegate;

		// Token: 0x04000113 RID: 275
		public static ScriptingInterfaceOfIMBAgentVisuals.ClearWeaponMeshesDelegate call_ClearWeaponMeshesDelegate;

		// Token: 0x04000114 RID: 276
		public static ScriptingInterfaceOfIMBAgentVisuals.CreateAgentRendererSceneControllerDelegate call_CreateAgentRendererSceneControllerDelegate;

		// Token: 0x04000115 RID: 277
		public static ScriptingInterfaceOfIMBAgentVisuals.CreateAgentVisualsDelegate call_CreateAgentVisualsDelegate;

		// Token: 0x04000116 RID: 278
		public static ScriptingInterfaceOfIMBAgentVisuals.CreateParticleSystemAttachedToBoneDelegate call_CreateParticleSystemAttachedToBoneDelegate;

		// Token: 0x04000117 RID: 279
		public static ScriptingInterfaceOfIMBAgentVisuals.DestructAgentRendererSceneControllerDelegate call_DestructAgentRendererSceneControllerDelegate;

		// Token: 0x04000118 RID: 280
		public static ScriptingInterfaceOfIMBAgentVisuals.DisableContourDelegate call_DisableContourDelegate;

		// Token: 0x04000119 RID: 281
		public static ScriptingInterfaceOfIMBAgentVisuals.FillEntityWithBodyMeshesWithoutAgentVisualsDelegate call_FillEntityWithBodyMeshesWithoutAgentVisualsDelegate;

		// Token: 0x0400011A RID: 282
		public static ScriptingInterfaceOfIMBAgentVisuals.GetAttachedWeaponEntityDelegate call_GetAttachedWeaponEntityDelegate;

		// Token: 0x0400011B RID: 283
		public static ScriptingInterfaceOfIMBAgentVisuals.GetBoneEntitialFrameDelegate call_GetBoneEntitialFrameDelegate;

		// Token: 0x0400011C RID: 284
		public static ScriptingInterfaceOfIMBAgentVisuals.GetBoneTypeDataDelegate call_GetBoneTypeDataDelegate;

		// Token: 0x0400011D RID: 285
		public static ScriptingInterfaceOfIMBAgentVisuals.GetCurrentHelmetScalingFactorDelegate call_GetCurrentHelmetScalingFactorDelegate;

		// Token: 0x0400011E RID: 286
		public static ScriptingInterfaceOfIMBAgentVisuals.GetCurrentRagdollStateDelegate call_GetCurrentRagdollStateDelegate;

		// Token: 0x0400011F RID: 287
		public static ScriptingInterfaceOfIMBAgentVisuals.GetEntityDelegate call_GetEntityDelegate;

		// Token: 0x04000120 RID: 288
		public static ScriptingInterfaceOfIMBAgentVisuals.GetFrameDelegate call_GetFrameDelegate;

		// Token: 0x04000121 RID: 289
		public static ScriptingInterfaceOfIMBAgentVisuals.GetGlobalFrameDelegate call_GetGlobalFrameDelegate;

		// Token: 0x04000122 RID: 290
		public static ScriptingInterfaceOfIMBAgentVisuals.GetGlobalStableEyePointDelegate call_GetGlobalStableEyePointDelegate;

		// Token: 0x04000123 RID: 291
		public static ScriptingInterfaceOfIMBAgentVisuals.GetGlobalStableNeckPointDelegate call_GetGlobalStableNeckPointDelegate;

		// Token: 0x04000124 RID: 292
		public static ScriptingInterfaceOfIMBAgentVisuals.GetRealBoneIndexDelegate call_GetRealBoneIndexDelegate;

		// Token: 0x04000125 RID: 293
		public static ScriptingInterfaceOfIMBAgentVisuals.GetSkeletonDelegate call_GetSkeletonDelegate;

		// Token: 0x04000126 RID: 294
		public static ScriptingInterfaceOfIMBAgentVisuals.GetVisibleDelegate call_GetVisibleDelegate;

		// Token: 0x04000127 RID: 295
		public static ScriptingInterfaceOfIMBAgentVisuals.IsValidDelegate call_IsValidDelegate;

		// Token: 0x04000128 RID: 296
		public static ScriptingInterfaceOfIMBAgentVisuals.LazyUpdateAgentRendererDataDelegate call_LazyUpdateAgentRendererDataDelegate;

		// Token: 0x04000129 RID: 297
		public static ScriptingInterfaceOfIMBAgentVisuals.MakeVoiceDelegate call_MakeVoiceDelegate;

		// Token: 0x0400012A RID: 298
		public static ScriptingInterfaceOfIMBAgentVisuals.RemoveChildEntityDelegate call_RemoveChildEntityDelegate;

		// Token: 0x0400012B RID: 299
		public static ScriptingInterfaceOfIMBAgentVisuals.RemoveMeshDelegate call_RemoveMeshDelegate;

		// Token: 0x0400012C RID: 300
		public static ScriptingInterfaceOfIMBAgentVisuals.RemoveMultiMeshDelegate call_RemoveMultiMeshDelegate;

		// Token: 0x0400012D RID: 301
		public static ScriptingInterfaceOfIMBAgentVisuals.ResetDelegate call_ResetDelegate;

		// Token: 0x0400012E RID: 302
		public static ScriptingInterfaceOfIMBAgentVisuals.ResetNextFrameDelegate call_ResetNextFrameDelegate;

		// Token: 0x0400012F RID: 303
		public static ScriptingInterfaceOfIMBAgentVisuals.SetAgentLocalSpeedDelegate call_SetAgentLocalSpeedDelegate;

		// Token: 0x04000130 RID: 304
		public static ScriptingInterfaceOfIMBAgentVisuals.SetAgentLodMakeZeroOrMaxDelegate call_SetAgentLodMakeZeroOrMaxDelegate;

		// Token: 0x04000131 RID: 305
		public static ScriptingInterfaceOfIMBAgentVisuals.SetAsContourEntityDelegate call_SetAsContourEntityDelegate;

		// Token: 0x04000132 RID: 306
		public static ScriptingInterfaceOfIMBAgentVisuals.SetClothComponentKeepStateOfAllMeshesDelegate call_SetClothComponentKeepStateOfAllMeshesDelegate;

		// Token: 0x04000133 RID: 307
		public static ScriptingInterfaceOfIMBAgentVisuals.SetClothWindToWeaponAtIndexDelegate call_SetClothWindToWeaponAtIndexDelegate;

		// Token: 0x04000134 RID: 308
		public static ScriptingInterfaceOfIMBAgentVisuals.SetContourStateDelegate call_SetContourStateDelegate;

		// Token: 0x04000135 RID: 309
		public static ScriptingInterfaceOfIMBAgentVisuals.SetDoTimerBasedForcedSkeletonUpdatesDelegate call_SetDoTimerBasedForcedSkeletonUpdatesDelegate;

		// Token: 0x04000136 RID: 310
		public static ScriptingInterfaceOfIMBAgentVisuals.SetEnableOcclusionCullingDelegate call_SetEnableOcclusionCullingDelegate;

		// Token: 0x04000137 RID: 311
		public static ScriptingInterfaceOfIMBAgentVisuals.SetEnforcedVisibilityForAllAgentsDelegate call_SetEnforcedVisibilityForAllAgentsDelegate;

		// Token: 0x04000138 RID: 312
		public static ScriptingInterfaceOfIMBAgentVisuals.SetEntityDelegate call_SetEntityDelegate;

		// Token: 0x04000139 RID: 313
		public static ScriptingInterfaceOfIMBAgentVisuals.SetFaceGenerationParamsDelegate call_SetFaceGenerationParamsDelegate;

		// Token: 0x0400013A RID: 314
		public static ScriptingInterfaceOfIMBAgentVisuals.SetFrameDelegate call_SetFrameDelegate;

		// Token: 0x0400013B RID: 315
		public static ScriptingInterfaceOfIMBAgentVisuals.SetLodAtlasShadingIndexDelegate call_SetLodAtlasShadingIndexDelegate;

		// Token: 0x0400013C RID: 316
		public static ScriptingInterfaceOfIMBAgentVisuals.SetLookDirectionDelegate call_SetLookDirectionDelegate;

		// Token: 0x0400013D RID: 317
		public static ScriptingInterfaceOfIMBAgentVisuals.SetSetupMorphNodeDelegate call_SetSetupMorphNodeDelegate;

		// Token: 0x0400013E RID: 318
		public static ScriptingInterfaceOfIMBAgentVisuals.SetSkeletonDelegate call_SetSkeletonDelegate;

		// Token: 0x0400013F RID: 319
		public static ScriptingInterfaceOfIMBAgentVisuals.SetVisibleDelegate call_SetVisibleDelegate;

		// Token: 0x04000140 RID: 320
		public static ScriptingInterfaceOfIMBAgentVisuals.SetVoiceDefinitionIndexDelegate call_SetVoiceDefinitionIndexDelegate;

		// Token: 0x04000141 RID: 321
		public static ScriptingInterfaceOfIMBAgentVisuals.SetWieldedWeaponIndicesDelegate call_SetWieldedWeaponIndicesDelegate;

		// Token: 0x04000142 RID: 322
		public static ScriptingInterfaceOfIMBAgentVisuals.StartRhubarbRecordDelegate call_StartRhubarbRecordDelegate;

		// Token: 0x04000143 RID: 323
		public static ScriptingInterfaceOfIMBAgentVisuals.TickDelegate call_TickDelegate;

		// Token: 0x04000144 RID: 324
		public static ScriptingInterfaceOfIMBAgentVisuals.UpdateQuiverMeshesWithoutAgentDelegate call_UpdateQuiverMeshesWithoutAgentDelegate;

		// Token: 0x04000145 RID: 325
		public static ScriptingInterfaceOfIMBAgentVisuals.UpdateSkeletonScaleDelegate call_UpdateSkeletonScaleDelegate;

		// Token: 0x04000146 RID: 326
		public static ScriptingInterfaceOfIMBAgentVisuals.UseScaledWeaponsDelegate call_UseScaledWeaponsDelegate;

		// Token: 0x04000147 RID: 327
		public static ScriptingInterfaceOfIMBAgentVisuals.ValidateAgentVisualsResetedDelegate call_ValidateAgentVisualsResetedDelegate;

		// Token: 0x0200016E RID: 366
		// (Invoke) Token: 0x0600085D RID: 2141
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool AddChildEntityDelegate(UIntPtr agentVisualsPtr, UIntPtr EntityId);

		// Token: 0x0200016F RID: 367
		// (Invoke) Token: 0x06000861 RID: 2145
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddHorseReinsClothMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr reinMeshPointer, UIntPtr ropeMeshPointer);

		// Token: 0x02000170 RID: 368
		// (Invoke) Token: 0x06000865 RID: 2149
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddMeshDelegate(UIntPtr agentVisualsId, UIntPtr meshPointer);

		// Token: 0x02000171 RID: 369
		// (Invoke) Token: 0x06000869 RID: 2153
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddMultiMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex);

		// Token: 0x02000172 RID: 370
		// (Invoke) Token: 0x0600086D RID: 2157
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer AddPrefabToAgentVisualBoneByBoneTypeDelegate(UIntPtr agentVisualsPtr, byte[] prefabName, HumanBone boneType);

		// Token: 0x02000173 RID: 371
		// (Invoke) Token: 0x06000871 RID: 2161
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer AddPrefabToAgentVisualBoneByRealBoneIndexDelegate(UIntPtr agentVisualsPtr, byte[] prefabName, sbyte realBoneIndex);

		// Token: 0x02000174 RID: 372
		// (Invoke) Token: 0x06000875 RID: 2165
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddSkinMeshesToAgentEntityDelegate(UIntPtr agentVisualsId, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, [MarshalAs(UnmanagedType.U1)] bool useGPUMorph, [MarshalAs(UnmanagedType.U1)] bool useFaceCache);

		// Token: 0x02000175 RID: 373
		// (Invoke) Token: 0x06000879 RID: 2169
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddWeaponToAgentEntityDelegate(UIntPtr agentVisualsPtr, int slotIndex, in WeaponDataAsNative agentEntityData, IntPtr weaponStatsData, int weaponStatsDataLength, in WeaponDataAsNative agentEntityAmmoData, IntPtr ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr cachedEntity);

		// Token: 0x02000176 RID: 374
		// (Invoke) Token: 0x0600087D RID: 2173
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ApplySkeletonScaleDelegate(UIntPtr agentVisualsId, Vec3 mountSitBoneScale, float mountRadiusAdder, byte boneCount, IntPtr boneIndices, IntPtr boneScales);

		// Token: 0x02000177 RID: 375
		// (Invoke) Token: 0x06000881 RID: 2177
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void BatchLastLodMeshesDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000178 RID: 376
		// (Invoke) Token: 0x06000885 RID: 2181
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool CheckResourcesDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool addToQueue);

		// Token: 0x02000179 RID: 377
		// (Invoke) Token: 0x06000889 RID: 2185
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearAllWeaponMeshesDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x0200017A RID: 378
		// (Invoke) Token: 0x0600088D RID: 2189
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearVisualComponentsDelegate(UIntPtr agentVisualsId, [MarshalAs(UnmanagedType.U1)] bool removeSkeleton);

		// Token: 0x0200017B RID: 379
		// (Invoke) Token: 0x06000891 RID: 2193
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearWeaponMeshesDelegate(UIntPtr agentVisualsPtr, int weaponVisualIndex);

		// Token: 0x0200017C RID: 380
		// (Invoke) Token: 0x06000895 RID: 2197
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate UIntPtr CreateAgentRendererSceneControllerDelegate(UIntPtr scenePointer, int maxRenderCount);

		// Token: 0x0200017D RID: 381
		// (Invoke) Token: 0x06000899 RID: 2201
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer CreateAgentVisualsDelegate(UIntPtr scenePtr, byte[] ownerName, Vec3 eyeOffset);

		// Token: 0x0200017E RID: 382
		// (Invoke) Token: 0x0600089D RID: 2205
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void CreateParticleSystemAttachedToBoneDelegate(UIntPtr agentVisualsPtr, int runtimeParticleindex, sbyte boneIndex, ref MatrixFrame boneLocalParticleFrame);

		// Token: 0x0200017F RID: 383
		// (Invoke) Token: 0x060008A1 RID: 2209
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DestructAgentRendererSceneControllerDelegate(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer, [MarshalAs(UnmanagedType.U1)] bool deleteThisFrame);

		// Token: 0x02000180 RID: 384
		// (Invoke) Token: 0x060008A5 RID: 2213
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DisableContourDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000181 RID: 385
		// (Invoke) Token: 0x060008A9 RID: 2217
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void FillEntityWithBodyMeshesWithoutAgentVisualsDelegate(UIntPtr entityPoinbter, ref SkinGenerationParams skinParams, ref BodyProperties bodyProperties, UIntPtr glovesMesh);

		// Token: 0x02000182 RID: 386
		// (Invoke) Token: 0x060008AD RID: 2221
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer GetAttachedWeaponEntityDelegate(UIntPtr agentVisualsPtr, int attachedWeaponIndex);

		// Token: 0x02000183 RID: 387
		// (Invoke) Token: 0x060008B1 RID: 2225
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetBoneEntitialFrameDelegate(UIntPtr agentVisualsPtr, sbyte bone, [MarshalAs(UnmanagedType.U1)] bool useBoneMapping, ref MatrixFrame outFrame);

		// Token: 0x02000184 RID: 388
		// (Invoke) Token: 0x060008B5 RID: 2229
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetBoneTypeDataDelegate(UIntPtr pointer, sbyte boneIndex, ref BoneBodyTypeData boneBodyTypeData);

		// Token: 0x02000185 RID: 389
		// (Invoke) Token: 0x060008B9 RID: 2233
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetCurrentHelmetScalingFactorDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000186 RID: 390
		// (Invoke) Token: 0x060008BD RID: 2237
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate RagdollState GetCurrentRagdollStateDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000187 RID: 391
		// (Invoke) Token: 0x060008C1 RID: 2241
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer GetEntityDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000188 RID: 392
		// (Invoke) Token: 0x060008C5 RID: 2245
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetFrameDelegate(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame);

		// Token: 0x02000189 RID: 393
		// (Invoke) Token: 0x060008C9 RID: 2249
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetGlobalFrameDelegate(UIntPtr agentVisualsPtr, ref MatrixFrame outFrame);

		// Token: 0x0200018A RID: 394
		// (Invoke) Token: 0x060008CD RID: 2253
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetGlobalStableEyePointDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool isHumanoid);

		// Token: 0x0200018B RID: 395
		// (Invoke) Token: 0x060008D1 RID: 2257
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetGlobalStableNeckPointDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool isHumanoid);

		// Token: 0x0200018C RID: 396
		// (Invoke) Token: 0x060008D5 RID: 2261
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate sbyte GetRealBoneIndexDelegate(UIntPtr agentVisualsPtr, HumanBone boneType);

		// Token: 0x0200018D RID: 397
		// (Invoke) Token: 0x060008D9 RID: 2265
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer GetSkeletonDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x0200018E RID: 398
		// (Invoke) Token: 0x060008DD RID: 2269
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetVisibleDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x0200018F RID: 399
		// (Invoke) Token: 0x060008E1 RID: 2273
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsValidDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000190 RID: 400
		// (Invoke) Token: 0x060008E5 RID: 2277
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void LazyUpdateAgentRendererDataDelegate(UIntPtr agentVisualsId);

		// Token: 0x02000191 RID: 401
		// (Invoke) Token: 0x060008E9 RID: 2281
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void MakeVoiceDelegate(UIntPtr agentVisualsPtr, int voiceId, ref Vec3 position);

		// Token: 0x02000192 RID: 402
		// (Invoke) Token: 0x060008ED RID: 2285
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RemoveChildEntityDelegate(UIntPtr agentVisualsPtr, UIntPtr EntityId, int removeReason);

		// Token: 0x02000193 RID: 403
		// (Invoke) Token: 0x060008F1 RID: 2289
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RemoveMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr meshPointer);

		// Token: 0x02000194 RID: 404
		// (Invoke) Token: 0x060008F5 RID: 2293
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RemoveMultiMeshDelegate(UIntPtr agentVisualsPtr, UIntPtr multiMeshPointer, int bodyMeshIndex);

		// Token: 0x02000195 RID: 405
		// (Invoke) Token: 0x060008F9 RID: 2297
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResetDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000196 RID: 406
		// (Invoke) Token: 0x060008FD RID: 2301
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResetNextFrameDelegate(UIntPtr agentVisualsPtr);

		// Token: 0x02000197 RID: 407
		// (Invoke) Token: 0x06000901 RID: 2305
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAgentLocalSpeedDelegate(UIntPtr agentVisualsPtr, Vec2 speed);

		// Token: 0x02000198 RID: 408
		// (Invoke) Token: 0x06000905 RID: 2309
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAgentLodMakeZeroOrMaxDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool makeZero);

		// Token: 0x02000199 RID: 409
		// (Invoke) Token: 0x06000909 RID: 2313
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAsContourEntityDelegate(UIntPtr agentVisualsPtr, uint color);

		// Token: 0x0200019A RID: 410
		// (Invoke) Token: 0x0600090D RID: 2317
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetClothComponentKeepStateOfAllMeshesDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool keepState);

		// Token: 0x0200019B RID: 411
		// (Invoke) Token: 0x06000911 RID: 2321
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetClothWindToWeaponAtIndexDelegate(UIntPtr agentVisualsPtr, Vec3 windDirection, [MarshalAs(UnmanagedType.U1)] bool isLocal, int index);

		// Token: 0x0200019C RID: 412
		// (Invoke) Token: 0x06000915 RID: 2325
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetContourStateDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool alwaysVisible);

		// Token: 0x0200019D RID: 413
		// (Invoke) Token: 0x06000919 RID: 2329
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetDoTimerBasedForcedSkeletonUpdatesDelegate(UIntPtr agentRendererSceneControllerPointer, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x0200019E RID: 414
		// (Invoke) Token: 0x0600091D RID: 2333
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetEnableOcclusionCullingDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool enable);

		// Token: 0x0200019F RID: 415
		// (Invoke) Token: 0x06000921 RID: 2337
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetEnforcedVisibilityForAllAgentsDelegate(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer);

		// Token: 0x020001A0 RID: 416
		// (Invoke) Token: 0x06000925 RID: 2341
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetEntityDelegate(UIntPtr agentVisualsId, UIntPtr entityPtr);

		// Token: 0x020001A1 RID: 417
		// (Invoke) Token: 0x06000929 RID: 2345
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFaceGenerationParamsDelegate(UIntPtr agentVisualsId, FaceGenerationParams faceGenerationParams);

		// Token: 0x020001A2 RID: 418
		// (Invoke) Token: 0x0600092D RID: 2349
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFrameDelegate(UIntPtr agentVisualsPtr, ref MatrixFrame frame);

		// Token: 0x020001A3 RID: 419
		// (Invoke) Token: 0x06000931 RID: 2353
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLodAtlasShadingIndexDelegate(UIntPtr agentVisualsId, int index, [MarshalAs(UnmanagedType.U1)] bool useTeamColor, uint teamColor1, uint teamColor2);

		// Token: 0x020001A4 RID: 420
		// (Invoke) Token: 0x06000935 RID: 2357
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLookDirectionDelegate(UIntPtr agentVisualsPtr, Vec3 direction);

		// Token: 0x020001A5 RID: 421
		// (Invoke) Token: 0x06000939 RID: 2361
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetSetupMorphNodeDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x020001A6 RID: 422
		// (Invoke) Token: 0x0600093D RID: 2365
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetSkeletonDelegate(UIntPtr agentVisualsId, UIntPtr skeletonPtr);

		// Token: 0x020001A7 RID: 423
		// (Invoke) Token: 0x06000941 RID: 2369
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetVisibleDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x020001A8 RID: 424
		// (Invoke) Token: 0x06000945 RID: 2373
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetVoiceDefinitionIndexDelegate(UIntPtr agentVisualsPtr, int voiceDefinitionIndex, float voicePitch);

		// Token: 0x020001A9 RID: 425
		// (Invoke) Token: 0x06000949 RID: 2377
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetWieldedWeaponIndicesDelegate(UIntPtr agentVisualsId, int slotIndexRightHand, int slotIndexLeftHand);

		// Token: 0x020001AA RID: 426
		// (Invoke) Token: 0x0600094D RID: 2381
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void StartRhubarbRecordDelegate(UIntPtr agentVisualsId, byte[] path, int soundId);

		// Token: 0x020001AB RID: 427
		// (Invoke) Token: 0x06000951 RID: 2385
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void TickDelegate(UIntPtr agentVisualsId, UIntPtr parentAgentVisualsId, float dt, [MarshalAs(UnmanagedType.U1)] bool entityMoving, float speed);

		// Token: 0x020001AC RID: 428
		// (Invoke) Token: 0x06000955 RID: 2389
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void UpdateQuiverMeshesWithoutAgentDelegate(UIntPtr agentVisualsId, int weaponIndex, int ammoCountToShow);

		// Token: 0x020001AD RID: 429
		// (Invoke) Token: 0x06000959 RID: 2393
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void UpdateSkeletonScaleDelegate(UIntPtr agentVisualsId, int bodyDeformType);

		// Token: 0x020001AE RID: 430
		// (Invoke) Token: 0x0600095D RID: 2397
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void UseScaledWeaponsDelegate(UIntPtr agentVisualsPtr, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x020001AF RID: 431
		// (Invoke) Token: 0x06000961 RID: 2401
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ValidateAgentVisualsResetedDelegate(UIntPtr scenePointer, UIntPtr agentRendererSceneControllerPointer);
	}
}
