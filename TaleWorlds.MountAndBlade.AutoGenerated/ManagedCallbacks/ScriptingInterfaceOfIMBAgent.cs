using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.AutoGenerated;

namespace ManagedCallbacks
{
	// Token: 0x0200000A RID: 10
	internal class ScriptingInterfaceOfIMBAgent : IMBAgent
	{
		// Token: 0x06000088 RID: 136 RVA: 0x00008A8C File Offset: 0x00006C8C
		public void AddMeshToBone(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_AddMeshToBoneDelegate(agentPointer, meshPointer, boneIndex);
		}

		// Token: 0x06000089 RID: 137 RVA: 0x00008A9C File Offset: 0x00006C9C
		public CompositeComponent AddPrefabToAgentBone(UIntPtr agentPointer, string prefabName, sbyte boneIndex)
		{
			byte[] array = null;
			if (prefabName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgent._utf8.GetByteCount(prefabName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgent._utf8.GetBytes(prefabName, 0, prefabName.Length, array, 0);
				array[byteCount] = 0;
			}
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgent.call_AddPrefabToAgentBoneDelegate(agentPointer, array, boneIndex);
			CompositeComponent result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new CompositeComponent(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x0600008A RID: 138 RVA: 0x00008B2C File Offset: 0x00006D2C
		public void AttachWeaponToBone(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, sbyte boneIndex, ref MatrixFrame attachLocalFrame)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(weaponData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBAgent.call_AttachWeaponToBoneDelegate(agentPointer, weaponDataAsNative, pointer, weaponStatsDataLength, weaponEntity, boneIndex, ref attachLocalFrame);
			pinnedArrayData.Dispose();
		}

		// Token: 0x0600008B RID: 139 RVA: 0x00008B74 File Offset: 0x00006D74
		public void AttachWeaponToWeaponInSlot(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, int slotIndex, ref MatrixFrame attachLocalFrame)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(weaponData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBAgent.call_AttachWeaponToWeaponInSlotDelegate(agentPointer, weaponDataAsNative, pointer, weaponStatsDataLength, weaponEntity, slotIndex, ref attachLocalFrame);
			pinnedArrayData.Dispose();
		}

		// Token: 0x0600008C RID: 140 RVA: 0x00008BBC File Offset: 0x00006DBC
		public Agent.MovementControlFlag AttackDirectionToMovementFlag(UIntPtr agentPointer, Agent.UsageDirection direction)
		{
			return ScriptingInterfaceOfIMBAgent.call_AttackDirectionToMovementFlagDelegate(agentPointer, direction);
		}

		// Token: 0x0600008D RID: 141 RVA: 0x00008BCA File Offset: 0x00006DCA
		public void Build(UIntPtr agentPointer, Vec3 eyeOffsetWrtHead)
		{
			ScriptingInterfaceOfIMBAgent.call_BuildDelegate(agentPointer, eyeOffsetWrtHead);
		}

		// Token: 0x0600008E RID: 142 RVA: 0x00008BD8 File Offset: 0x00006DD8
		public bool CanMoveDirectlyToPosition(UIntPtr agentPointer, in Vec2 position)
		{
			return ScriptingInterfaceOfIMBAgent.call_CanMoveDirectlyToPositionDelegate(agentPointer, position);
		}

		// Token: 0x0600008F RID: 143 RVA: 0x00008BE6 File Offset: 0x00006DE6
		public bool CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirection(UIntPtr agentPointer, int navigationFaceId, ref Vec3 direction, float overridenCostForFaceId)
		{
			return ScriptingInterfaceOfIMBAgent.call_CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate(agentPointer, navigationFaceId, ref direction, overridenCostForFaceId);
		}

		// Token: 0x06000090 RID: 144 RVA: 0x00008BF7 File Offset: 0x00006DF7
		public void ClearEquipment(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_ClearEquipmentDelegate(agentPointer);
		}

		// Token: 0x06000091 RID: 145 RVA: 0x00008C04 File Offset: 0x00006E04
		public void ClearHandInverseKinematics(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_ClearHandInverseKinematicsDelegate(agentPointer);
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00008C11 File Offset: 0x00006E11
		public void ClearTargetFrame(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_ClearTargetFrameDelegate(agentPointer);
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00008C1E File Offset: 0x00006E1E
		public Vec3 ComputeAnimationDisplacement(UIntPtr agentPointer, float dt)
		{
			return ScriptingInterfaceOfIMBAgent.call_ComputeAnimationDisplacementDelegate(agentPointer, dt);
		}

		// Token: 0x06000094 RID: 148 RVA: 0x00008C2C File Offset: 0x00006E2C
		public void CreateBloodBurstAtLimb(UIntPtr agentPointer, sbyte realBoneIndex, float scale)
		{
			ScriptingInterfaceOfIMBAgent.call_CreateBloodBurstAtLimbDelegate(agentPointer, realBoneIndex, scale);
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00008C3B File Offset: 0x00006E3B
		public void DebugMore(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_DebugMoreDelegate(agentPointer);
		}

		// Token: 0x06000096 RID: 150 RVA: 0x00008C48 File Offset: 0x00006E48
		public Agent.MovementControlFlag DefendDirectionToMovementFlag(UIntPtr agentPointer, Agent.UsageDirection direction)
		{
			return ScriptingInterfaceOfIMBAgent.call_DefendDirectionToMovementFlagDelegate(agentPointer, direction);
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00008C56 File Offset: 0x00006E56
		public void DeleteAttachedWeaponFromBone(UIntPtr agentPointer, int attachedWeaponIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_DeleteAttachedWeaponFromBoneDelegate(agentPointer, attachedWeaponIndex);
		}

		// Token: 0x06000098 RID: 152 RVA: 0x00008C64 File Offset: 0x00006E64
		public void Die(UIntPtr agentPointer, ref Blow b, sbyte overrideKillInfo)
		{
			ScriptingInterfaceOfIMBAgent.call_DieDelegate(agentPointer, ref b, overrideKillInfo);
		}

		// Token: 0x06000099 RID: 153 RVA: 0x00008C73 File Offset: 0x00006E73
		public void DisableLookToPointOfInterest(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_DisableLookToPointOfInterestDelegate(agentPointer);
		}

		// Token: 0x0600009A RID: 154 RVA: 0x00008C80 File Offset: 0x00006E80
		public void DisableScriptedCombatMovement(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_DisableScriptedCombatMovementDelegate(agentPointer);
		}

		// Token: 0x0600009B RID: 155 RVA: 0x00008C8D File Offset: 0x00006E8D
		public void DisableScriptedMovement(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_DisableScriptedMovementDelegate(agentPointer);
		}

		// Token: 0x0600009C RID: 156 RVA: 0x00008C9A File Offset: 0x00006E9A
		public void DropItem(UIntPtr agentPointer, int itemIndex, int pickedUpItemType)
		{
			ScriptingInterfaceOfIMBAgent.call_DropItemDelegate(agentPointer, itemIndex, pickedUpItemType);
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00008CA9 File Offset: 0x00006EA9
		public void EnforceShieldUsage(UIntPtr agentPointer, Agent.UsageDirection direction)
		{
			ScriptingInterfaceOfIMBAgent.call_EnforceShieldUsageDelegate(agentPointer, direction);
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00008CB7 File Offset: 0x00006EB7
		public void FadeIn(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_FadeInDelegate(agentPointer);
		}

		// Token: 0x0600009F RID: 159 RVA: 0x00008CC4 File Offset: 0x00006EC4
		public void FadeOut(UIntPtr agentPointer, bool hideInstantly)
		{
			ScriptingInterfaceOfIMBAgent.call_FadeOutDelegate(agentPointer, hideInstantly);
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x00008CD2 File Offset: 0x00006ED2
		public void ForceAiBehaviorSelection(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_ForceAiBehaviorSelectionDelegate(agentPointer);
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x00008CDF File Offset: 0x00006EDF
		public float GetActionChannelCurrentActionWeight(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetActionChannelCurrentActionWeightDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00008CED File Offset: 0x00006EED
		public float GetActionChannelWeight(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetActionChannelWeightDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00008CFB File Offset: 0x00006EFB
		public Agent.UsageDirection GetActionDirection(int actionIndex)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetActionDirectionDelegate(actionIndex);
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00008D08 File Offset: 0x00006F08
		public int GetActionSetNo(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetActionSetNoDelegate(agentPointer);
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x00008D15 File Offset: 0x00006F15
		public string GetAgentFacialAnimation(UIntPtr agentPointer)
		{
			if (ScriptingInterfaceOfIMBAgent.call_GetAgentFacialAnimationDelegate(agentPointer) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x00008D2C File Offset: 0x00006F2C
		public uint GetAgentFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAgentFlagsDelegate(agentPointer);
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00008D39 File Offset: 0x00006F39
		public float GetAgentScale(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAgentScaleDelegate(agentPointer);
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x00008D48 File Offset: 0x00006F48
		public MBAgentVisuals GetAgentVisuals(UIntPtr agentPointer)
		{
			NativeObjectPointer nativeObjectPointer = ScriptingInterfaceOfIMBAgent.call_GetAgentVisualsDelegate(agentPointer);
			MBAgentVisuals result = null;
			if (nativeObjectPointer.Pointer != UIntPtr.Zero)
			{
				result = new MBAgentVisuals(nativeObjectPointer.Pointer);
				LibraryApplicationInterface.IManaged.DecreaseReferenceCount(nativeObjectPointer.Pointer);
			}
			return result;
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x00008D92 File Offset: 0x00006F92
		public string GetAgentVoiceDefinition(UIntPtr agentPointer)
		{
			if (ScriptingInterfaceOfIMBAgent.call_GetAgentVoiceDefinitionDelegate(agentPointer) != 1)
			{
				return null;
			}
			return Managed.ReturnValueFromEngine;
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00008DA9 File Offset: 0x00006FA9
		public float GetAimingTimer(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAimingTimerDelegate(agentPointer);
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00008DB6 File Offset: 0x00006FB6
		public Agent.AIStateFlag GetAIStateFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAIStateFlagsDelegate(agentPointer);
		}

		// Token: 0x060000AC RID: 172 RVA: 0x00008DC3 File Offset: 0x00006FC3
		public Agent.UsageDirection GetAttackDirection(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAttackDirectionDelegate(agentPointer);
		}

		// Token: 0x060000AD RID: 173 RVA: 0x00008DD0 File Offset: 0x00006FD0
		public Agent.UsageDirection GetAttackDirectionUsage(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAttackDirectionUsageDelegate(agentPointer);
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00008DDD File Offset: 0x00006FDD
		public Vec3 GetAverageVelocity(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetAverageVelocityDelegate(agentPointer);
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00008DEA File Offset: 0x00006FEA
		public Vec3 GetBodyRotationConstraint(UIntPtr agentPointer, int channelIndex)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetBodyRotationConstraintDelegate(agentPointer, channelIndex);
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00008DF8 File Offset: 0x00006FF8
		public Vec3 GetChestGlobalPosition(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetChestGlobalPositionDelegate(agentPointer);
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00008E05 File Offset: 0x00007005
		public void GetCollisionCapsule(UIntPtr agentPointer, ref CapsuleData value)
		{
			ScriptingInterfaceOfIMBAgent.call_GetCollisionCapsuleDelegate(agentPointer, ref value);
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x00008E13 File Offset: 0x00007013
		public Agent.ControllerType GetController(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetControllerDelegate(agentPointer);
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00008E20 File Offset: 0x00007020
		public bool GetCrouchMode(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCrouchModeDelegate(agentPointer);
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00008E2D File Offset: 0x0000702D
		public int GetCurrentAction(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentActionDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00008E3B File Offset: 0x0000703B
		public int GetCurrentActionDirection(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentActionDirectionDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00008E49 File Offset: 0x00007049
		public int GetCurrentActionPriority(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentActionPriorityDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00008E57 File Offset: 0x00007057
		public float GetCurrentActionProgress(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentActionProgressDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00008E65 File Offset: 0x00007065
		public int GetCurrentActionStage(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentActionStageDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00008E73 File Offset: 0x00007073
		public int GetCurrentActionType(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentActionTypeDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000BA RID: 186 RVA: 0x00008E81 File Offset: 0x00007081
		public float GetCurrentAimingError(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentAimingErrorDelegate(agentPointer);
		}

		// Token: 0x060000BB RID: 187 RVA: 0x00008E8E File Offset: 0x0000708E
		public float GetCurrentAimingTurbulance(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentAimingTurbulanceDelegate(agentPointer);
		}

		// Token: 0x060000BC RID: 188 RVA: 0x00008E9B File Offset: 0x0000709B
		public ulong GetCurrentAnimationFlags(UIntPtr agentPointer, int channelNo)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentAnimationFlagsDelegate(agentPointer, channelNo);
		}

		// Token: 0x060000BD RID: 189 RVA: 0x00008EA9 File Offset: 0x000070A9
		public Agent.GuardMode GetCurrentGuardMode(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentGuardModeDelegate(agentPointer);
		}

		// Token: 0x060000BE RID: 190 RVA: 0x00008EB6 File Offset: 0x000070B6
		public int GetCurrentNavigationFaceId(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentNavigationFaceIdDelegate(agentPointer);
		}

		// Token: 0x060000BF RID: 191 RVA: 0x00008EC3 File Offset: 0x000070C3
		public float GetCurrentSpeedLimit(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentSpeedLimitDelegate(agentPointer);
		}

		// Token: 0x060000C0 RID: 192 RVA: 0x00008ED0 File Offset: 0x000070D0
		public Vec2 GetCurrentVelocity(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurrentVelocityDelegate(agentPointer);
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x00008EDD File Offset: 0x000070DD
		public Vec3 GetCurWeaponOffset(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetCurWeaponOffsetDelegate(agentPointer);
		}

		// Token: 0x060000C2 RID: 194 RVA: 0x00008EEA File Offset: 0x000070EA
		public Agent.MovementControlFlag GetDefendMovementFlag(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetDefendMovementFlagDelegate(agentPointer);
		}

		// Token: 0x060000C3 RID: 195 RVA: 0x00008EF7 File Offset: 0x000070F7
		public uint GetEventControlFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetEventControlFlagsDelegate(agentPointer);
		}

		// Token: 0x060000C4 RID: 196 RVA: 0x00008F04 File Offset: 0x00007104
		public float GetEyeGlobalHeight(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetEyeGlobalHeightDelegate(agentPointer);
		}

		// Token: 0x060000C5 RID: 197 RVA: 0x00008F11 File Offset: 0x00007111
		public Vec3 GetEyeGlobalPosition(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetEyeGlobalPositionDelegate(agentPointer);
		}

		// Token: 0x060000C6 RID: 198 RVA: 0x00008F1E File Offset: 0x0000711E
		public int GetFiringOrder(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetFiringOrderDelegate(agentPointer);
		}

		// Token: 0x060000C7 RID: 199 RVA: 0x00008F2B File Offset: 0x0000712B
		public bool GetHeadCameraMode(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetHeadCameraModeDelegate(agentPointer);
		}

		// Token: 0x060000C8 RID: 200 RVA: 0x00008F38 File Offset: 0x00007138
		public Agent GetImmediateEnemy(UIntPtr agentPointer)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetImmediateEnemyDelegate(agentPointer)) as Agent;
		}

		// Token: 0x060000C9 RID: 201 RVA: 0x00008F4F File Offset: 0x0000714F
		public bool GetIsDoingPassiveAttack(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetIsDoingPassiveAttackDelegate(agentPointer);
		}

		// Token: 0x060000CA RID: 202 RVA: 0x00008F5C File Offset: 0x0000715C
		public bool GetIsLeftStance(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetIsLeftStanceDelegate(agentPointer);
		}

		// Token: 0x060000CB RID: 203 RVA: 0x00008F69 File Offset: 0x00007169
		public bool GetIsLookDirectionLocked(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetIsLookDirectionLockedDelegate(agentPointer);
		}

		// Token: 0x060000CC RID: 204 RVA: 0x00008F76 File Offset: 0x00007176
		public bool GetIsPassiveUsageConditionsAreMet(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetIsPassiveUsageConditionsAreMetDelegate(agentPointer);
		}

		// Token: 0x060000CD RID: 205 RVA: 0x00008F83 File Offset: 0x00007183
		public int GetLastTargetVisibilityState(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetLastTargetVisibilityStateDelegate(agentPointer);
		}

		// Token: 0x060000CE RID: 206 RVA: 0x00008F90 File Offset: 0x00007190
		public Agent GetLookAgent(UIntPtr agentPointer)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetLookAgentDelegate(agentPointer)) as Agent;
		}

		// Token: 0x060000CF RID: 207 RVA: 0x00008FA7 File Offset: 0x000071A7
		public Vec3 GetLookDirection(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetLookDirectionDelegate(agentPointer);
		}

		// Token: 0x060000D0 RID: 208 RVA: 0x00008FB4 File Offset: 0x000071B4
		public float GetLookDirectionAsAngle(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetLookDirectionAsAngleDelegate(agentPointer);
		}

		// Token: 0x060000D1 RID: 209 RVA: 0x00008FC1 File Offset: 0x000071C1
		public float GetLookDownLimit(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetLookDownLimitDelegate(agentPointer);
		}

		// Token: 0x060000D2 RID: 210 RVA: 0x00008FCE File Offset: 0x000071CE
		public float GetMaximumForwardUnlimitedSpeed(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMaximumForwardUnlimitedSpeedDelegate(agentPointer);
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x00008FDB File Offset: 0x000071DB
		public int GetMaximumNumberOfAgents()
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMaximumNumberOfAgentsDelegate();
		}

		// Token: 0x060000D4 RID: 212 RVA: 0x00008FE7 File Offset: 0x000071E7
		public float GetMaximumSpeedLimit(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMaximumSpeedLimitDelegate(agentPointer);
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x00008FF4 File Offset: 0x000071F4
		public float GetMissileRange(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMissileRangeDelegate(agentPointer);
		}

		// Token: 0x060000D6 RID: 214 RVA: 0x00009001 File Offset: 0x00007201
		public float GetMissileRangeWithHeightDifference(UIntPtr agentPointer, float targetZ)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMissileRangeWithHeightDifferenceDelegate(agentPointer, targetZ);
		}

		// Token: 0x060000D7 RID: 215 RVA: 0x00009010 File Offset: 0x00007210
		public int GetMonsterUsageIndex(string monsterUsage)
		{
			byte[] array = null;
			if (monsterUsage != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgent._utf8.GetByteCount(monsterUsage);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgent._utf8.GetBytes(monsterUsage, 0, monsterUsage.Length, array, 0);
				array[byteCount] = 0;
			}
			return ScriptingInterfaceOfIMBAgent.call_GetMonsterUsageIndexDelegate(array);
		}

		// Token: 0x060000D8 RID: 216 RVA: 0x0000906A File Offset: 0x0000726A
		public Agent GetMountAgent(UIntPtr agentPointer)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetMountAgentDelegate(agentPointer)) as Agent;
		}

		// Token: 0x060000D9 RID: 217 RVA: 0x00009081 File Offset: 0x00007281
		public Vec2 GetMovementDirection(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMovementDirectionDelegate(agentPointer);
		}

		// Token: 0x060000DA RID: 218 RVA: 0x0000908E File Offset: 0x0000728E
		public float GetMovementDirectionAsAngle(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMovementDirectionAsAngleDelegate(agentPointer);
		}

		// Token: 0x060000DB RID: 219 RVA: 0x0000909B File Offset: 0x0000729B
		public uint GetMovementFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMovementFlagsDelegate(agentPointer);
		}

		// Token: 0x060000DC RID: 220 RVA: 0x000090A8 File Offset: 0x000072A8
		public Vec2 GetMovementInputVector(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMovementInputVectorDelegate(agentPointer);
		}

		// Token: 0x060000DD RID: 221 RVA: 0x000090B5 File Offset: 0x000072B5
		public AgentMovementLockedState GetMovementLockedState(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMovementLockedStateDelegate(agentPointer);
		}

		// Token: 0x060000DE RID: 222 RVA: 0x000090C2 File Offset: 0x000072C2
		public Vec2 GetMovementVelocity(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetMovementVelocityDelegate(agentPointer);
		}

		// Token: 0x060000DF RID: 223 RVA: 0x000090D0 File Offset: 0x000072D0
		public int GetNativeActionIndex(string actionName)
		{
			byte[] array = null;
			if (actionName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgent._utf8.GetByteCount(actionName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgent._utf8.GetBytes(actionName, 0, actionName.Length, array, 0);
				array[byteCount] = 0;
			}
			return ScriptingInterfaceOfIMBAgent.call_GetNativeActionIndexDelegate(array);
		}

		// Token: 0x060000E0 RID: 224 RVA: 0x0000912A File Offset: 0x0000732A
		public float GetPathDistanceToPoint(UIntPtr agentPointer, ref Vec3 direction)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetPathDistanceToPointDelegate(agentPointer, ref direction);
		}

		// Token: 0x060000E1 RID: 225 RVA: 0x00009138 File Offset: 0x00007338
		public Vec3 GetPosition(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetPositionDelegate(agentPointer);
		}

		// Token: 0x060000E2 RID: 226 RVA: 0x00009145 File Offset: 0x00007345
		public bool GetRenderCheckEnabled(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetRenderCheckEnabledDelegate(agentPointer);
		}

		// Token: 0x060000E3 RID: 227 RVA: 0x00009152 File Offset: 0x00007352
		public WorldPosition GetRetreatPos(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetRetreatPosDelegate(agentPointer);
		}

		// Token: 0x060000E4 RID: 228 RVA: 0x0000915F File Offset: 0x0000735F
		public Agent GetRiderAgent(UIntPtr agentPointer)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetRiderAgentDelegate(agentPointer)) as Agent;
		}

		// Token: 0x060000E5 RID: 229 RVA: 0x00009176 File Offset: 0x00007376
		public int GetRidingOrder(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetRidingOrderDelegate(agentPointer);
		}

		// Token: 0x060000E6 RID: 230 RVA: 0x00009183 File Offset: 0x00007383
		public void GetRotationFrame(UIntPtr agentPointer, ref MatrixFrame outFrame)
		{
			ScriptingInterfaceOfIMBAgent.call_GetRotationFrameDelegate(agentPointer, ref outFrame);
		}

		// Token: 0x060000E7 RID: 231 RVA: 0x00009194 File Offset: 0x00007394
		public void GetRunningSimulationDataUntilMaximumSpeedReached(UIntPtr agentPointer, ref float combatAccelerationTime, ref float maxSpeed, float[] speedValues)
		{
			PinnedArrayData<float> pinnedArrayData = new PinnedArrayData<float>(speedValues, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBAgent.call_GetRunningSimulationDataUntilMaximumSpeedReachedDelegate(agentPointer, ref combatAccelerationTime, ref maxSpeed, pointer);
			pinnedArrayData.Dispose();
		}

		// Token: 0x060000E8 RID: 232 RVA: 0x000091C8 File Offset: 0x000073C8
		public int GetScriptedCombatFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetScriptedCombatFlagsDelegate(agentPointer);
		}

		// Token: 0x060000E9 RID: 233 RVA: 0x000091D5 File Offset: 0x000073D5
		public int GetScriptedFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetScriptedFlagsDelegate(agentPointer);
		}

		// Token: 0x060000EA RID: 234 RVA: 0x000091E2 File Offset: 0x000073E2
		public int GetSelectedMountIndex(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetSelectedMountIndexDelegate(agentPointer);
		}

		// Token: 0x060000EB RID: 235 RVA: 0x000091EF File Offset: 0x000073EF
		public AgentState GetStateFlags(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetStateFlagsDelegate(agentPointer);
		}

		// Token: 0x060000EC RID: 236 RVA: 0x000091FC File Offset: 0x000073FC
		public UIntPtr GetSteppedEntityId(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetSteppedEntityIdDelegate(agentPointer);
		}

		// Token: 0x060000ED RID: 237 RVA: 0x00009209 File Offset: 0x00007409
		public Agent GetTargetAgent(UIntPtr agentPointer)
		{
			return DotNetObject.GetManagedObjectWithId(ScriptingInterfaceOfIMBAgent.call_GetTargetAgentDelegate(agentPointer)) as Agent;
		}

		// Token: 0x060000EE RID: 238 RVA: 0x00009220 File Offset: 0x00007420
		public Vec3 GetTargetDirection(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetTargetDirectionDelegate(agentPointer);
		}

		// Token: 0x060000EF RID: 239 RVA: 0x0000922D File Offset: 0x0000742D
		public int GetTargetFormationIndex(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetTargetFormationIndexDelegate(agentPointer);
		}

		// Token: 0x060000F0 RID: 240 RVA: 0x0000923A File Offset: 0x0000743A
		public Vec2 GetTargetPosition(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetTargetPositionDelegate(agentPointer);
		}

		// Token: 0x060000F1 RID: 241 RVA: 0x00009247 File Offset: 0x00007447
		public int GetTeam(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetTeamDelegate(agentPointer);
		}

		// Token: 0x060000F2 RID: 242 RVA: 0x00009254 File Offset: 0x00007454
		public float GetTurnSpeed(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetTurnSpeedDelegate(agentPointer);
		}

		// Token: 0x060000F3 RID: 243 RVA: 0x00009261 File Offset: 0x00007461
		public Vec3 GetVisualPosition(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetVisualPositionDelegate(agentPointer);
		}

		// Token: 0x060000F4 RID: 244 RVA: 0x0000926E File Offset: 0x0000746E
		public bool GetWalkMode(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetWalkModeDelegate(agentPointer);
		}

		// Token: 0x060000F5 RID: 245 RVA: 0x0000927B File Offset: 0x0000747B
		public float GetWalkSpeedLimitOfMountable(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetWalkSpeedLimitOfMountableDelegate(agentPointer);
		}

		// Token: 0x060000F6 RID: 246 RVA: 0x00009288 File Offset: 0x00007488
		public UIntPtr GetWeaponEntityFromEquipmentSlot(UIntPtr agentPointer, int equipmentSlot)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetWeaponEntityFromEquipmentSlotDelegate(agentPointer, equipmentSlot);
		}

		// Token: 0x060000F7 RID: 247 RVA: 0x00009296 File Offset: 0x00007496
		public EquipmentIndex GetWieldedItemIndex(UIntPtr agentPointer, int handIndex)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetWieldedItemIndexDelegate(agentPointer, handIndex);
		}

		// Token: 0x060000F8 RID: 248 RVA: 0x000092A4 File Offset: 0x000074A4
		public bool GetWieldedWeaponInfo(UIntPtr agentPointer, int handIndex, ref bool isMeleeWeapon, ref bool isRangedWeapon)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetWieldedWeaponInfoDelegate(agentPointer, handIndex, ref isMeleeWeapon, ref isRangedWeapon);
		}

		// Token: 0x060000F9 RID: 249 RVA: 0x000092B5 File Offset: 0x000074B5
		public WorldPosition GetWorldPosition(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_GetWorldPositionDelegate(agentPointer);
		}

		// Token: 0x060000FA RID: 250 RVA: 0x000092C2 File Offset: 0x000074C2
		public void HandleBlowAux(UIntPtr agentPointer, ref Blow blow)
		{
			ScriptingInterfaceOfIMBAgent.call_HandleBlowAuxDelegate(agentPointer, ref blow);
		}

		// Token: 0x060000FB RID: 251 RVA: 0x000092D0 File Offset: 0x000074D0
		public bool HasPathThroughNavigationFaceIdFromDirection(UIntPtr agentPointer, int navigationFaceId, ref Vec2 direction)
		{
			return ScriptingInterfaceOfIMBAgent.call_HasPathThroughNavigationFaceIdFromDirectionDelegate(agentPointer, navigationFaceId, ref direction);
		}

		// Token: 0x060000FC RID: 252 RVA: 0x000092DF File Offset: 0x000074DF
		public bool HasPathThroughNavigationFacesIDFromDirection(UIntPtr agentPointer, int navigationFaceID_1, int navigationFaceID_2, int navigationFaceID_3, ref Vec2 direction)
		{
			return ScriptingInterfaceOfIMBAgent.call_HasPathThroughNavigationFacesIDFromDirectionDelegate(agentPointer, navigationFaceID_1, navigationFaceID_2, navigationFaceID_3, ref direction);
		}

		// Token: 0x060000FD RID: 253 RVA: 0x000092F2 File Offset: 0x000074F2
		public void InitializeAgentRecord(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_InitializeAgentRecordDelegate(agentPointer);
		}

		// Token: 0x060000FE RID: 254 RVA: 0x000092FF File Offset: 0x000074FF
		public void InvalidateAIWeaponSelections(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_InvalidateAIWeaponSelectionsDelegate(agentPointer);
		}

		// Token: 0x060000FF RID: 255 RVA: 0x0000930C File Offset: 0x0000750C
		public void InvalidateTargetAgent(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_InvalidateTargetAgentDelegate(agentPointer);
		}

		// Token: 0x06000100 RID: 256 RVA: 0x00009319 File Offset: 0x00007519
		public bool IsEnemy(UIntPtr agentPointer1, UIntPtr agentPointer2)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsEnemyDelegate(agentPointer1, agentPointer2);
		}

		// Token: 0x06000101 RID: 257 RVA: 0x00009327 File Offset: 0x00007527
		public bool IsFadingOut(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsFadingOutDelegate(agentPointer);
		}

		// Token: 0x06000102 RID: 258 RVA: 0x00009334 File Offset: 0x00007534
		public bool IsFriend(UIntPtr agentPointer1, UIntPtr agentPointer2)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsFriendDelegate(agentPointer1, agentPointer2);
		}

		// Token: 0x06000103 RID: 259 RVA: 0x00009342 File Offset: 0x00007542
		public bool IsLookRotationInSlowMotion(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsLookRotationInSlowMotionDelegate(agentPointer);
		}

		// Token: 0x06000104 RID: 260 RVA: 0x0000934F File Offset: 0x0000754F
		public bool IsOnLand(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsOnLandDelegate(agentPointer);
		}

		// Token: 0x06000105 RID: 261 RVA: 0x0000935C File Offset: 0x0000755C
		public bool IsRetreating(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsRetreatingDelegate(agentPointer);
		}

		// Token: 0x06000106 RID: 262 RVA: 0x00009369 File Offset: 0x00007569
		public bool IsRunningAway(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsRunningAwayDelegate(agentPointer);
		}

		// Token: 0x06000107 RID: 263 RVA: 0x00009376 File Offset: 0x00007576
		public bool IsSliding(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_IsSlidingDelegate(agentPointer);
		}

		// Token: 0x06000108 RID: 264 RVA: 0x00009383 File Offset: 0x00007583
		public bool KickClear(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_KickClearDelegate(agentPointer);
		}

		// Token: 0x06000109 RID: 265 RVA: 0x00009390 File Offset: 0x00007590
		public void LockAgentReplicationTableDataWithCurrentReliableSequenceNo(UIntPtr agentPointer, int peerIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate(agentPointer, peerIndex);
		}

		// Token: 0x0600010A RID: 266 RVA: 0x0000939E File Offset: 0x0000759E
		public void MakeDead(UIntPtr agentPointer, bool isKilled, int actionIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_MakeDeadDelegate(agentPointer, isKilled, actionIndex);
		}

		// Token: 0x0600010B RID: 267 RVA: 0x000093AD File Offset: 0x000075AD
		public void MakeVoice(UIntPtr agentPointer, int voiceType, int predictionType)
		{
			ScriptingInterfaceOfIMBAgent.call_MakeVoiceDelegate(agentPointer, voiceType, predictionType);
		}

		// Token: 0x0600010C RID: 268 RVA: 0x000093BC File Offset: 0x000075BC
		public Agent.UsageDirection PlayerAttackDirection(UIntPtr agentPointer)
		{
			return ScriptingInterfaceOfIMBAgent.call_PlayerAttackDirectionDelegate(agentPointer);
		}

		// Token: 0x0600010D RID: 269 RVA: 0x000093C9 File Offset: 0x000075C9
		public void PreloadForRendering(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_PreloadForRenderingDelegate(agentPointer);
		}

		// Token: 0x0600010E RID: 270 RVA: 0x000093D6 File Offset: 0x000075D6
		public void PrepareWeaponForDropInEquipmentSlot(UIntPtr agentPointer, int equipmentSlot, bool dropWithHolster)
		{
			ScriptingInterfaceOfIMBAgent.call_PrepareWeaponForDropInEquipmentSlotDelegate(agentPointer, equipmentSlot, dropWithHolster);
		}

		// Token: 0x0600010F RID: 271 RVA: 0x000093E5 File Offset: 0x000075E5
		public void RemoveMeshFromBone(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_RemoveMeshFromBoneDelegate(agentPointer, meshPointer, boneIndex);
		}

		// Token: 0x06000110 RID: 272 RVA: 0x000093F4 File Offset: 0x000075F4
		public void ResetEnemyCaches(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_ResetEnemyCachesDelegate(agentPointer);
		}

		// Token: 0x06000111 RID: 273 RVA: 0x00009401 File Offset: 0x00007601
		public void ResetGuard(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_ResetGuardDelegate(agentPointer);
		}

		// Token: 0x06000112 RID: 274 RVA: 0x00009410 File Offset: 0x00007610
		public bool SetActionChannel(UIntPtr agentPointer, int channelNo, int actionNo, ulong additionalFlags, bool ignorePriority, float blendWithNextActionFactor, float actionSpeed, float blendInPeriod, float blendOutPeriodToNoAnim, float startProgress, bool useLinearSmoothing, float blendOutPeriod, bool forceFaceMorphRestart)
		{
			return ScriptingInterfaceOfIMBAgent.call_SetActionChannelDelegate(agentPointer, channelNo, actionNo, additionalFlags, ignorePriority, blendWithNextActionFactor, actionSpeed, blendInPeriod, blendOutPeriodToNoAnim, startProgress, useLinearSmoothing, blendOutPeriod, forceFaceMorphRestart);
		}

		// Token: 0x06000113 RID: 275 RVA: 0x0000943E File Offset: 0x0000763E
		public void SetActionSet(UIntPtr agentPointer, ref AnimationSystemData animationSystemData)
		{
			ScriptingInterfaceOfIMBAgent.call_SetActionSetDelegate(agentPointer, ref animationSystemData);
		}

		// Token: 0x06000114 RID: 276 RVA: 0x0000944C File Offset: 0x0000764C
		public void SetAgentExcludeStateForFaceGroupId(UIntPtr agentPointer, int faceGroupId, bool isExcluded)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAgentExcludeStateForFaceGroupIdDelegate(agentPointer, faceGroupId, isExcluded);
		}

		// Token: 0x06000115 RID: 277 RVA: 0x0000945C File Offset: 0x0000765C
		public void SetAgentFacialAnimation(UIntPtr agentPointer, int channel, string animationName, bool loop)
		{
			byte[] array = null;
			if (animationName != null)
			{
				int byteCount = ScriptingInterfaceOfIMBAgent._utf8.GetByteCount(animationName);
				array = ((byteCount < 1024) ? CallbackStringBufferManager.StringBuffer0 : new byte[byteCount + 1]);
				ScriptingInterfaceOfIMBAgent._utf8.GetBytes(animationName, 0, animationName.Length, array, 0);
				array[byteCount] = 0;
			}
			ScriptingInterfaceOfIMBAgent.call_SetAgentFacialAnimationDelegate(agentPointer, channel, array, loop);
		}

		// Token: 0x06000116 RID: 278 RVA: 0x000094BA File Offset: 0x000076BA
		public void SetAgentFlags(UIntPtr agentPointer, uint agentFlags)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAgentFlagsDelegate(agentPointer, agentFlags);
		}

		// Token: 0x06000117 RID: 279 RVA: 0x000094C8 File Offset: 0x000076C8
		public void SetAgentScale(UIntPtr agentPointer, float scale)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAgentScaleDelegate(agentPointer, scale);
		}

		// Token: 0x06000118 RID: 280 RVA: 0x000094D6 File Offset: 0x000076D6
		public void SetAIBehaviorParams(UIntPtr agentPointer, int behavior, float y1, float x2, float y2, float x3, float y3)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAIBehaviorParamsDelegate(agentPointer, behavior, y1, x2, y2, x3, y3);
		}

		// Token: 0x06000119 RID: 281 RVA: 0x000094ED File Offset: 0x000076ED
		public void SetAIStateFlags(UIntPtr agentPointer, Agent.AIStateFlag aiStateFlags)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAIStateFlagsDelegate(agentPointer, aiStateFlags);
		}

		// Token: 0x0600011A RID: 282 RVA: 0x000094FC File Offset: 0x000076FC
		public void SetAllAIBehaviorParams(UIntPtr agentPointer, HumanAIComponent.BehaviorValues[] behaviorParams)
		{
			PinnedArrayData<HumanAIComponent.BehaviorValues> pinnedArrayData = new PinnedArrayData<HumanAIComponent.BehaviorValues>(behaviorParams, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBAgent.call_SetAllAIBehaviorParamsDelegate(agentPointer, pointer);
			pinnedArrayData.Dispose();
		}

		// Token: 0x0600011B RID: 283 RVA: 0x0000952D File Offset: 0x0000772D
		public void SetAttackState(UIntPtr agentPointer, int attackState)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAttackStateDelegate(agentPointer, attackState);
		}

		// Token: 0x0600011C RID: 284 RVA: 0x0000953B File Offset: 0x0000773B
		public void SetAutomaticTargetSelection(UIntPtr agentPointer, bool enable)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAutomaticTargetSelectionDelegate(agentPointer, enable);
		}

		// Token: 0x0600011D RID: 285 RVA: 0x00009549 File Offset: 0x00007749
		public void SetAveragePingInMilliseconds(UIntPtr agentPointer, double averagePingInMilliseconds)
		{
			ScriptingInterfaceOfIMBAgent.call_SetAveragePingInMillisecondsDelegate(agentPointer, averagePingInMilliseconds);
		}

		// Token: 0x0600011E RID: 286 RVA: 0x00009557 File Offset: 0x00007757
		public void SetBodyArmorMaterialType(UIntPtr agentPointer, ArmorComponent.ArmorMaterialTypes bodyArmorMaterialType)
		{
			ScriptingInterfaceOfIMBAgent.call_SetBodyArmorMaterialTypeDelegate(agentPointer, bodyArmorMaterialType);
		}

		// Token: 0x0600011F RID: 287 RVA: 0x00009565 File Offset: 0x00007765
		public void SetColumnwiseFollowAgent(UIntPtr agentPointer, int followAgentIndex, ref Vec2 followPosition)
		{
			ScriptingInterfaceOfIMBAgent.call_SetColumnwiseFollowAgentDelegate(agentPointer, followAgentIndex, ref followPosition);
		}

		// Token: 0x06000120 RID: 288 RVA: 0x00009574 File Offset: 0x00007774
		public void SetController(UIntPtr agentPointer, Agent.ControllerType controller)
		{
			ScriptingInterfaceOfIMBAgent.call_SetControllerDelegate(agentPointer, controller);
		}

		// Token: 0x06000121 RID: 289 RVA: 0x00009582 File Offset: 0x00007782
		public void SetCourage(UIntPtr agentPointer, float courage)
		{
			ScriptingInterfaceOfIMBAgent.call_SetCourageDelegate(agentPointer, courage);
		}

		// Token: 0x06000122 RID: 290 RVA: 0x00009590 File Offset: 0x00007790
		public void SetCurrentActionProgress(UIntPtr agentPointer, int channelNo, float progress)
		{
			ScriptingInterfaceOfIMBAgent.call_SetCurrentActionProgressDelegate(agentPointer, channelNo, progress);
		}

		// Token: 0x06000123 RID: 291 RVA: 0x0000959F File Offset: 0x0000779F
		public void SetCurrentActionSpeed(UIntPtr agentPointer, int channelNo, float actionSpeed)
		{
			ScriptingInterfaceOfIMBAgent.call_SetCurrentActionSpeedDelegate(agentPointer, channelNo, actionSpeed);
		}

		// Token: 0x06000124 RID: 292 RVA: 0x000095AE File Offset: 0x000077AE
		public void SetDirectionChangeTendency(UIntPtr agentPointer, float tendency)
		{
			ScriptingInterfaceOfIMBAgent.call_SetDirectionChangeTendencyDelegate(agentPointer, tendency);
		}

		// Token: 0x06000125 RID: 293 RVA: 0x000095BC File Offset: 0x000077BC
		public void SetEventControlFlags(UIntPtr agentPointer, Agent.EventControlFlag eventflag)
		{
			ScriptingInterfaceOfIMBAgent.call_SetEventControlFlagsDelegate(agentPointer, eventflag);
		}

		// Token: 0x06000126 RID: 294 RVA: 0x000095CA File Offset: 0x000077CA
		public void SetFiringOrder(UIntPtr agentPointer, int order)
		{
			ScriptingInterfaceOfIMBAgent.call_SetFiringOrderDelegate(agentPointer, order);
		}

		// Token: 0x06000127 RID: 295 RVA: 0x000095D8 File Offset: 0x000077D8
		public void SetFormationFrameDisabled(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_SetFormationFrameDisabledDelegate(agentPointer);
		}

		// Token: 0x06000128 RID: 296 RVA: 0x000095E5 File Offset: 0x000077E5
		public bool SetFormationFrameEnabled(UIntPtr agentPointer, WorldPosition position, Vec2 direction, Vec2 positionVelocity, float formationDirectionEnforcingFactor)
		{
			return ScriptingInterfaceOfIMBAgent.call_SetFormationFrameEnabledDelegate(agentPointer, position, direction, positionVelocity, formationDirectionEnforcingFactor);
		}

		// Token: 0x06000129 RID: 297 RVA: 0x000095F8 File Offset: 0x000077F8
		public void SetFormationInfo(UIntPtr agentPointer, int fileIndex, int rankIndex, int fileCount, int rankCount, Vec2 wallDir, int unitSpacing)
		{
			ScriptingInterfaceOfIMBAgent.call_SetFormationInfoDelegate(agentPointer, fileIndex, rankIndex, fileCount, rankCount, wallDir, unitSpacing);
		}

		// Token: 0x0600012A RID: 298 RVA: 0x0000960F File Offset: 0x0000780F
		public void SetFormationIntegrityData(UIntPtr agentPointer, Vec2 position, Vec2 currentFormationDirection, Vec2 averageVelocityOfCloseAgents, float averageMaxUnlimitedSpeedOfCloseAgents, float deviationOfPositions)
		{
			ScriptingInterfaceOfIMBAgent.call_SetFormationIntegrityDataDelegate(agentPointer, position, currentFormationDirection, averageVelocityOfCloseAgents, averageMaxUnlimitedSpeedOfCloseAgents, deviationOfPositions);
		}

		// Token: 0x0600012B RID: 299 RVA: 0x00009624 File Offset: 0x00007824
		public void SetFormationNo(UIntPtr agentPointer, int formationNo)
		{
			ScriptingInterfaceOfIMBAgent.call_SetFormationNoDelegate(agentPointer, formationNo);
		}

		// Token: 0x0600012C RID: 300 RVA: 0x00009632 File Offset: 0x00007832
		public void SetGuardedAgentIndex(UIntPtr agentPointer, int guardedAgentIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetGuardedAgentIndexDelegate(agentPointer, guardedAgentIndex);
		}

		// Token: 0x0600012D RID: 301 RVA: 0x00009640 File Offset: 0x00007840
		public bool SetHandInverseKinematicsFrame(UIntPtr agentPointer, ref MatrixFrame leftGlobalFrame, ref MatrixFrame rightGlobalFrame)
		{
			return ScriptingInterfaceOfIMBAgent.call_SetHandInverseKinematicsFrameDelegate(agentPointer, ref leftGlobalFrame, ref rightGlobalFrame);
		}

		// Token: 0x0600012E RID: 302 RVA: 0x0000964F File Offset: 0x0000784F
		public bool SetHandInverseKinematicsFrameForMissionObjectUsage(UIntPtr agentPointer, in MatrixFrame localIKFrame, in MatrixFrame boundEntityGlobalFrame, float animationHeightDifference)
		{
			return ScriptingInterfaceOfIMBAgent.call_SetHandInverseKinematicsFrameForMissionObjectUsageDelegate(agentPointer, localIKFrame, boundEntityGlobalFrame, animationHeightDifference);
		}

		// Token: 0x0600012F RID: 303 RVA: 0x00009660 File Offset: 0x00007860
		public void SetHeadCameraMode(UIntPtr agentPointer, bool value)
		{
			ScriptingInterfaceOfIMBAgent.call_SetHeadCameraModeDelegate(agentPointer, value);
		}

		// Token: 0x06000130 RID: 304 RVA: 0x0000966E File Offset: 0x0000786E
		public void SetInitialFrame(UIntPtr agentPointer, in Vec3 initialPosition, in Vec2 initialDirection, bool canSpawnOutsideOfMissionBoundary)
		{
			ScriptingInterfaceOfIMBAgent.call_SetInitialFrameDelegate(agentPointer, initialPosition, initialDirection, canSpawnOutsideOfMissionBoundary);
		}

		// Token: 0x06000131 RID: 305 RVA: 0x0000967F File Offset: 0x0000787F
		public void SetInteractionAgent(UIntPtr agentPointer, UIntPtr interactionAgentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_SetInteractionAgentDelegate(agentPointer, interactionAgentPointer);
		}

		// Token: 0x06000132 RID: 306 RVA: 0x0000968D File Offset: 0x0000788D
		public void SetIsLookDirectionLocked(UIntPtr agentPointer, bool isLocked)
		{
			ScriptingInterfaceOfIMBAgent.call_SetIsLookDirectionLockedDelegate(agentPointer, isLocked);
		}

		// Token: 0x06000133 RID: 307 RVA: 0x0000969B File Offset: 0x0000789B
		public void SetLookAgent(UIntPtr agentPointer, UIntPtr lookAtAgentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_SetLookAgentDelegate(agentPointer, lookAtAgentPointer);
		}

		// Token: 0x06000134 RID: 308 RVA: 0x000096A9 File Offset: 0x000078A9
		public void SetLookDirection(UIntPtr agentPointer, Vec3 lookDirection)
		{
			ScriptingInterfaceOfIMBAgent.call_SetLookDirectionDelegate(agentPointer, lookDirection);
		}

		// Token: 0x06000135 RID: 309 RVA: 0x000096B7 File Offset: 0x000078B7
		public void SetLookDirectionAsAngle(UIntPtr agentPointer, float value)
		{
			ScriptingInterfaceOfIMBAgent.call_SetLookDirectionAsAngleDelegate(agentPointer, value);
		}

		// Token: 0x06000136 RID: 310 RVA: 0x000096C5 File Offset: 0x000078C5
		public void SetLookToPointOfInterest(UIntPtr agentPointer, Vec3 point)
		{
			ScriptingInterfaceOfIMBAgent.call_SetLookToPointOfInterestDelegate(agentPointer, point);
		}

		// Token: 0x06000137 RID: 311 RVA: 0x000096D3 File Offset: 0x000078D3
		public void SetMaximumSpeedLimit(UIntPtr agentPointer, float maximumSpeedLimit, bool isMultiplier)
		{
			ScriptingInterfaceOfIMBAgent.call_SetMaximumSpeedLimitDelegate(agentPointer, maximumSpeedLimit, isMultiplier);
		}

		// Token: 0x06000138 RID: 312 RVA: 0x000096E2 File Offset: 0x000078E2
		public void SetMonoObject(UIntPtr agentPointer, Agent monoObject)
		{
			ScriptingInterfaceOfIMBAgent.call_SetMonoObjectDelegate(agentPointer, (monoObject != null) ? monoObject.GetManagedId() : 0);
		}

		// Token: 0x06000139 RID: 313 RVA: 0x000096FB File Offset: 0x000078FB
		public void SetMountAgent(UIntPtr agentPointer, int mountAgentIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetMountAgentDelegate(agentPointer, mountAgentIndex);
		}

		// Token: 0x0600013A RID: 314 RVA: 0x00009709 File Offset: 0x00007909
		public void SetMovementDirection(UIntPtr agentPointer, in Vec2 direction)
		{
			ScriptingInterfaceOfIMBAgent.call_SetMovementDirectionDelegate(agentPointer, direction);
		}

		// Token: 0x0600013B RID: 315 RVA: 0x00009717 File Offset: 0x00007917
		public void SetMovementFlags(UIntPtr agentPointer, Agent.MovementControlFlag value)
		{
			ScriptingInterfaceOfIMBAgent.call_SetMovementFlagsDelegate(agentPointer, value);
		}

		// Token: 0x0600013C RID: 316 RVA: 0x00009725 File Offset: 0x00007925
		public void SetMovementInputVector(UIntPtr agentPointer, Vec2 value)
		{
			ScriptingInterfaceOfIMBAgent.call_SetMovementInputVectorDelegate(agentPointer, value);
		}

		// Token: 0x0600013D RID: 317 RVA: 0x00009733 File Offset: 0x00007933
		public void SetNetworkPeer(UIntPtr agentPointer, int networkPeerIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetNetworkPeerDelegate(agentPointer, networkPeerIndex);
		}

		// Token: 0x0600013E RID: 318 RVA: 0x00009741 File Offset: 0x00007941
		public void SetPosition(UIntPtr agentPointer, ref Vec3 position)
		{
			ScriptingInterfaceOfIMBAgent.call_SetPositionDelegate(agentPointer, ref position);
		}

		// Token: 0x0600013F RID: 319 RVA: 0x0000974F File Offset: 0x0000794F
		public void SetReloadAmmoInSlot(UIntPtr agentPointer, int slotIndex, int ammoSlotIndex, short reloadedAmmo)
		{
			ScriptingInterfaceOfIMBAgent.call_SetReloadAmmoInSlotDelegate(agentPointer, slotIndex, ammoSlotIndex, reloadedAmmo);
		}

		// Token: 0x06000140 RID: 320 RVA: 0x00009760 File Offset: 0x00007960
		public void SetRenderCheckEnabled(UIntPtr agentPointer, bool value)
		{
			ScriptingInterfaceOfIMBAgent.call_SetRenderCheckEnabledDelegate(agentPointer, value);
		}

		// Token: 0x06000141 RID: 321 RVA: 0x0000976E File Offset: 0x0000796E
		public void SetRetreatMode(UIntPtr agentPointer, WorldPosition retreatPos, bool retreat)
		{
			ScriptingInterfaceOfIMBAgent.call_SetRetreatModeDelegate(agentPointer, retreatPos, retreat);
		}

		// Token: 0x06000142 RID: 322 RVA: 0x0000977D File Offset: 0x0000797D
		public void SetRidingOrder(UIntPtr agentPointer, int order)
		{
			ScriptingInterfaceOfIMBAgent.call_SetRidingOrderDelegate(agentPointer, order);
		}

		// Token: 0x06000143 RID: 323 RVA: 0x0000978B File Offset: 0x0000798B
		public void SetScriptedCombatFlags(UIntPtr agentPointer, int flags)
		{
			ScriptingInterfaceOfIMBAgent.call_SetScriptedCombatFlagsDelegate(agentPointer, flags);
		}

		// Token: 0x06000144 RID: 324 RVA: 0x00009799 File Offset: 0x00007999
		public void SetScriptedFlags(UIntPtr agentPointer, int flags)
		{
			ScriptingInterfaceOfIMBAgent.call_SetScriptedFlagsDelegate(agentPointer, flags);
		}

		// Token: 0x06000145 RID: 325 RVA: 0x000097A7 File Offset: 0x000079A7
		public bool SetScriptedPosition(UIntPtr agentPointer, ref WorldPosition targetPosition, bool addHumanLikeDelay, int additionalFlags)
		{
			return ScriptingInterfaceOfIMBAgent.call_SetScriptedPositionDelegate(agentPointer, ref targetPosition, addHumanLikeDelay, additionalFlags);
		}

		// Token: 0x06000146 RID: 326 RVA: 0x000097B8 File Offset: 0x000079B8
		public bool SetScriptedPositionAndDirection(UIntPtr agentPointer, ref WorldPosition targetPosition, float targetDirection, bool addHumanLikeDelay, int additionalFlags)
		{
			return ScriptingInterfaceOfIMBAgent.call_SetScriptedPositionAndDirectionDelegate(agentPointer, ref targetPosition, targetDirection, addHumanLikeDelay, additionalFlags);
		}

		// Token: 0x06000147 RID: 327 RVA: 0x000097CB File Offset: 0x000079CB
		public void SetScriptedTargetEntity(UIntPtr agentPointer, UIntPtr entityId, ref WorldPosition specialPosition, int additionalFlags, bool ignoreIfAlreadyAttacking)
		{
			ScriptingInterfaceOfIMBAgent.call_SetScriptedTargetEntityDelegate(agentPointer, entityId, ref specialPosition, additionalFlags, ignoreIfAlreadyAttacking);
		}

		// Token: 0x06000148 RID: 328 RVA: 0x000097DE File Offset: 0x000079DE
		public void SetSelectedMountIndex(UIntPtr agentPointer, int mount_index)
		{
			ScriptingInterfaceOfIMBAgent.call_SetSelectedMountIndexDelegate(agentPointer, mount_index);
		}

		// Token: 0x06000149 RID: 329 RVA: 0x000097EC File Offset: 0x000079EC
		public void SetShouldCatchUpWithFormation(UIntPtr agentPointer, bool value)
		{
			ScriptingInterfaceOfIMBAgent.call_SetShouldCatchUpWithFormationDelegate(agentPointer, value);
		}

		// Token: 0x0600014A RID: 330 RVA: 0x000097FA File Offset: 0x000079FA
		public void SetStateFlags(UIntPtr agentPointer, AgentState StateFlags)
		{
			ScriptingInterfaceOfIMBAgent.call_SetStateFlagsDelegate(agentPointer, StateFlags);
		}

		// Token: 0x0600014B RID: 331 RVA: 0x00009808 File Offset: 0x00007A08
		public void SetTargetAgent(UIntPtr agentPointer, int targetAgentIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetTargetAgentDelegate(agentPointer, targetAgentIndex);
		}

		// Token: 0x0600014C RID: 332 RVA: 0x00009816 File Offset: 0x00007A16
		public void SetTargetFormationIndex(UIntPtr agentPointer, int targetFormationIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetTargetFormationIndexDelegate(agentPointer, targetFormationIndex);
		}

		// Token: 0x0600014D RID: 333 RVA: 0x00009824 File Offset: 0x00007A24
		public void SetTargetPosition(UIntPtr agentPointer, ref Vec2 targetPosition)
		{
			ScriptingInterfaceOfIMBAgent.call_SetTargetPositionDelegate(agentPointer, ref targetPosition);
		}

		// Token: 0x0600014E RID: 334 RVA: 0x00009832 File Offset: 0x00007A32
		public void SetTargetPositionAndDirection(UIntPtr agentPointer, ref Vec2 targetPosition, ref Vec3 targetDirection)
		{
			ScriptingInterfaceOfIMBAgent.call_SetTargetPositionAndDirectionDelegate(agentPointer, ref targetPosition, ref targetDirection);
		}

		// Token: 0x0600014F RID: 335 RVA: 0x00009841 File Offset: 0x00007A41
		public void SetTeam(UIntPtr agentPointer, int teamIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetTeamDelegate(agentPointer, teamIndex);
		}

		// Token: 0x06000150 RID: 336 RVA: 0x0000984F File Offset: 0x00007A4F
		public void SetUsageIndexOfWeaponInSlotAsClient(UIntPtr agentPointer, int slotIndex, int usageIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetUsageIndexOfWeaponInSlotAsClientDelegate(agentPointer, slotIndex, usageIndex);
		}

		// Token: 0x06000151 RID: 337 RVA: 0x0000985E File Offset: 0x00007A5E
		public void SetWeaponAmmoAsClient(UIntPtr agentPointer, int equipmentIndex, int ammoEquipmentIndex, short ammo)
		{
			ScriptingInterfaceOfIMBAgent.call_SetWeaponAmmoAsClientDelegate(agentPointer, equipmentIndex, ammoEquipmentIndex, ammo);
		}

		// Token: 0x06000152 RID: 338 RVA: 0x0000986F File Offset: 0x00007A6F
		public void SetWeaponAmountInSlot(UIntPtr agentPointer, int equipmentSlot, short amount, bool enforcePrimaryItem)
		{
			ScriptingInterfaceOfIMBAgent.call_SetWeaponAmountInSlotDelegate(agentPointer, equipmentSlot, amount, enforcePrimaryItem);
		}

		// Token: 0x06000153 RID: 339 RVA: 0x00009880 File Offset: 0x00007A80
		public void SetWeaponHitPointsInSlot(UIntPtr agentPointer, int wieldedItemIndex, short hitPoints)
		{
			ScriptingInterfaceOfIMBAgent.call_SetWeaponHitPointsInSlotDelegate(agentPointer, wieldedItemIndex, hitPoints);
		}

		// Token: 0x06000154 RID: 340 RVA: 0x0000988F File Offset: 0x00007A8F
		public void SetWeaponReloadPhaseAsClient(UIntPtr agentPointer, int wieldedItemIndex, short reloadPhase)
		{
			ScriptingInterfaceOfIMBAgent.call_SetWeaponReloadPhaseAsClientDelegate(agentPointer, wieldedItemIndex, reloadPhase);
		}

		// Token: 0x06000155 RID: 341 RVA: 0x0000989E File Offset: 0x00007A9E
		public void SetWieldedItemIndexAsClient(UIntPtr agentPointer, int handIndex, int wieldedItemIndex, bool isWieldedInstantly, bool isWieldedOnSpawn, int mainHandCurrentUsageIndex)
		{
			ScriptingInterfaceOfIMBAgent.call_SetWieldedItemIndexAsClientDelegate(agentPointer, handIndex, wieldedItemIndex, isWieldedInstantly, isWieldedOnSpawn, mainHandCurrentUsageIndex);
		}

		// Token: 0x06000156 RID: 342 RVA: 0x000098B3 File Offset: 0x00007AB3
		public void StartFadingOut(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_StartFadingOutDelegate(agentPointer);
		}

		// Token: 0x06000157 RID: 343 RVA: 0x000098C0 File Offset: 0x00007AC0
		public void StartSwitchingWeaponUsageIndexAsClient(UIntPtr agentPointer, int wieldedItemIndex, int usageIndex, Agent.UsageDirection currentMovementFlagUsageDirection)
		{
			ScriptingInterfaceOfIMBAgent.call_StartSwitchingWeaponUsageIndexAsClientDelegate(agentPointer, wieldedItemIndex, usageIndex, currentMovementFlagUsageDirection);
		}

		// Token: 0x06000158 RID: 344 RVA: 0x000098D1 File Offset: 0x00007AD1
		public void TickActionChannels(UIntPtr agentPointer, float dt)
		{
			ScriptingInterfaceOfIMBAgent.call_TickActionChannelsDelegate(agentPointer, dt);
		}

		// Token: 0x06000159 RID: 345 RVA: 0x000098DF File Offset: 0x00007ADF
		public bool TryGetImmediateEnemyAgentMovementData(UIntPtr agentPointer, out float maximumForwardUnlimitedSpeed, out Vec3 position)
		{
			return ScriptingInterfaceOfIMBAgent.call_TryGetImmediateEnemyAgentMovementDataDelegate(agentPointer, out maximumForwardUnlimitedSpeed, out position);
		}

		// Token: 0x0600015A RID: 346 RVA: 0x000098EE File Offset: 0x00007AEE
		public void TryToSheathWeaponInHand(UIntPtr agentPointer, int handIndex, int type)
		{
			ScriptingInterfaceOfIMBAgent.call_TryToSheathWeaponInHandDelegate(agentPointer, handIndex, type);
		}

		// Token: 0x0600015B RID: 347 RVA: 0x000098FD File Offset: 0x00007AFD
		public void TryToWieldWeaponInSlot(UIntPtr agentPointer, int equipmentSlot, int type, bool isWieldedOnSpawn)
		{
			ScriptingInterfaceOfIMBAgent.call_TryToWieldWeaponInSlotDelegate(agentPointer, equipmentSlot, type, isWieldedOnSpawn);
		}

		// Token: 0x0600015C RID: 348 RVA: 0x00009910 File Offset: 0x00007B10
		public void UpdateDrivenProperties(UIntPtr agentPointer, float[] values)
		{
			PinnedArrayData<float> pinnedArrayData = new PinnedArrayData<float>(values, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			ScriptingInterfaceOfIMBAgent.call_UpdateDrivenPropertiesDelegate(agentPointer, pointer);
			pinnedArrayData.Dispose();
		}

		// Token: 0x0600015D RID: 349 RVA: 0x00009941 File Offset: 0x00007B41
		public void UpdateWeapons(UIntPtr agentPointer)
		{
			ScriptingInterfaceOfIMBAgent.call_UpdateWeaponsDelegate(agentPointer);
		}

		// Token: 0x0600015E RID: 350 RVA: 0x00009950 File Offset: 0x00007B50
		public void WeaponEquipped(UIntPtr agentPointer, int equipmentSlot, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData ammoWeaponData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr weaponEntity, bool removeOldWeaponFromScene, bool isWieldedOnSpawn)
		{
			WeaponDataAsNative weaponDataAsNative = new WeaponDataAsNative(weaponData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData = new PinnedArrayData<WeaponStatsData>(weaponStatsData, false);
			IntPtr pointer = pinnedArrayData.Pointer;
			WeaponDataAsNative weaponDataAsNative2 = new WeaponDataAsNative(ammoWeaponData);
			PinnedArrayData<WeaponStatsData> pinnedArrayData2 = new PinnedArrayData<WeaponStatsData>(ammoWeaponStatsData, false);
			IntPtr pointer2 = pinnedArrayData2.Pointer;
			ScriptingInterfaceOfIMBAgent.call_WeaponEquippedDelegate(agentPointer, equipmentSlot, weaponDataAsNative, pointer, weaponStatsDataLength, weaponDataAsNative2, pointer2, ammoWeaponStatsDataLength, weaponEntity, removeOldWeaponFromScene, isWieldedOnSpawn);
			pinnedArrayData.Dispose();
			pinnedArrayData2.Dispose();
		}

		// Token: 0x0600015F RID: 351 RVA: 0x000099C8 File Offset: 0x00007BC8
		public void WieldNextWeapon(UIntPtr agentPointer, int handIndex, int wieldActionType)
		{
			ScriptingInterfaceOfIMBAgent.call_WieldNextWeaponDelegate(agentPointer, handIndex, wieldActionType);
		}

		// Token: 0x06000162 RID: 354 RVA: 0x000099EB File Offset: 0x00007BEB
		void IMBAgent.SetInitialFrame(UIntPtr agentPointer, in Vec3 initialPosition, in Vec2 initialDirection, bool canSpawnOutsideOfMissionBoundary)
		{
			this.SetInitialFrame(agentPointer, initialPosition, initialDirection, canSpawnOutsideOfMissionBoundary);
		}

		// Token: 0x06000163 RID: 355 RVA: 0x000099F8 File Offset: 0x00007BF8
		void IMBAgent.WeaponEquipped(UIntPtr agentPointer, int equipmentSlot, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, in WeaponData ammoWeaponData, WeaponStatsData[] ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr weaponEntity, bool removeOldWeaponFromScene, bool isWieldedOnSpawn)
		{
			this.WeaponEquipped(agentPointer, equipmentSlot, weaponData, weaponStatsData, weaponStatsDataLength, ammoWeaponData, ammoWeaponStatsData, ammoWeaponStatsDataLength, weaponEntity, removeOldWeaponFromScene, isWieldedOnSpawn);
		}

		// Token: 0x06000164 RID: 356 RVA: 0x00009A1E File Offset: 0x00007C1E
		void IMBAgent.AttachWeaponToBone(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, sbyte boneIndex, ref MatrixFrame attachLocalFrame)
		{
			this.AttachWeaponToBone(agentPointer, weaponData, weaponStatsData, weaponStatsDataLength, weaponEntity, boneIndex, ref attachLocalFrame);
		}

		// Token: 0x06000165 RID: 357 RVA: 0x00009A31 File Offset: 0x00007C31
		void IMBAgent.AttachWeaponToWeaponInSlot(UIntPtr agentPointer, in WeaponData weaponData, WeaponStatsData[] weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, int slotIndex, ref MatrixFrame attachLocalFrame)
		{
			this.AttachWeaponToWeaponInSlot(agentPointer, weaponData, weaponStatsData, weaponStatsDataLength, weaponEntity, slotIndex, ref attachLocalFrame);
		}

		// Token: 0x06000166 RID: 358 RVA: 0x00009A44 File Offset: 0x00007C44
		void IMBAgent.SetMovementDirection(UIntPtr agentPointer, in Vec2 direction)
		{
			this.SetMovementDirection(agentPointer, direction);
		}

		// Token: 0x06000167 RID: 359 RVA: 0x00009A4E File Offset: 0x00007C4E
		bool IMBAgent.CanMoveDirectlyToPosition(UIntPtr agentPointer, in Vec2 position)
		{
			return this.CanMoveDirectlyToPosition(agentPointer, position);
		}

		// Token: 0x06000168 RID: 360 RVA: 0x00009A58 File Offset: 0x00007C58
		bool IMBAgent.SetHandInverseKinematicsFrameForMissionObjectUsage(UIntPtr agentPointer, in MatrixFrame localIKFrame, in MatrixFrame boundEntityGlobalFrame, float animationHeightDifference)
		{
			return this.SetHandInverseKinematicsFrameForMissionObjectUsage(agentPointer, localIKFrame, boundEntityGlobalFrame, animationHeightDifference);
		}

		// Token: 0x0400002C RID: 44
		private static readonly Encoding _utf8 = Encoding.UTF8;

		// Token: 0x0400002D RID: 45
		public static ScriptingInterfaceOfIMBAgent.AddMeshToBoneDelegate call_AddMeshToBoneDelegate;

		// Token: 0x0400002E RID: 46
		public static ScriptingInterfaceOfIMBAgent.AddPrefabToAgentBoneDelegate call_AddPrefabToAgentBoneDelegate;

		// Token: 0x0400002F RID: 47
		public static ScriptingInterfaceOfIMBAgent.AttachWeaponToBoneDelegate call_AttachWeaponToBoneDelegate;

		// Token: 0x04000030 RID: 48
		public static ScriptingInterfaceOfIMBAgent.AttachWeaponToWeaponInSlotDelegate call_AttachWeaponToWeaponInSlotDelegate;

		// Token: 0x04000031 RID: 49
		public static ScriptingInterfaceOfIMBAgent.AttackDirectionToMovementFlagDelegate call_AttackDirectionToMovementFlagDelegate;

		// Token: 0x04000032 RID: 50
		public static ScriptingInterfaceOfIMBAgent.BuildDelegate call_BuildDelegate;

		// Token: 0x04000033 RID: 51
		public static ScriptingInterfaceOfIMBAgent.CanMoveDirectlyToPositionDelegate call_CanMoveDirectlyToPositionDelegate;

		// Token: 0x04000034 RID: 52
		public static ScriptingInterfaceOfIMBAgent.CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate call_CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate;

		// Token: 0x04000035 RID: 53
		public static ScriptingInterfaceOfIMBAgent.ClearEquipmentDelegate call_ClearEquipmentDelegate;

		// Token: 0x04000036 RID: 54
		public static ScriptingInterfaceOfIMBAgent.ClearHandInverseKinematicsDelegate call_ClearHandInverseKinematicsDelegate;

		// Token: 0x04000037 RID: 55
		public static ScriptingInterfaceOfIMBAgent.ClearTargetFrameDelegate call_ClearTargetFrameDelegate;

		// Token: 0x04000038 RID: 56
		public static ScriptingInterfaceOfIMBAgent.ComputeAnimationDisplacementDelegate call_ComputeAnimationDisplacementDelegate;

		// Token: 0x04000039 RID: 57
		public static ScriptingInterfaceOfIMBAgent.CreateBloodBurstAtLimbDelegate call_CreateBloodBurstAtLimbDelegate;

		// Token: 0x0400003A RID: 58
		public static ScriptingInterfaceOfIMBAgent.DebugMoreDelegate call_DebugMoreDelegate;

		// Token: 0x0400003B RID: 59
		public static ScriptingInterfaceOfIMBAgent.DefendDirectionToMovementFlagDelegate call_DefendDirectionToMovementFlagDelegate;

		// Token: 0x0400003C RID: 60
		public static ScriptingInterfaceOfIMBAgent.DeleteAttachedWeaponFromBoneDelegate call_DeleteAttachedWeaponFromBoneDelegate;

		// Token: 0x0400003D RID: 61
		public static ScriptingInterfaceOfIMBAgent.DieDelegate call_DieDelegate;

		// Token: 0x0400003E RID: 62
		public static ScriptingInterfaceOfIMBAgent.DisableLookToPointOfInterestDelegate call_DisableLookToPointOfInterestDelegate;

		// Token: 0x0400003F RID: 63
		public static ScriptingInterfaceOfIMBAgent.DisableScriptedCombatMovementDelegate call_DisableScriptedCombatMovementDelegate;

		// Token: 0x04000040 RID: 64
		public static ScriptingInterfaceOfIMBAgent.DisableScriptedMovementDelegate call_DisableScriptedMovementDelegate;

		// Token: 0x04000041 RID: 65
		public static ScriptingInterfaceOfIMBAgent.DropItemDelegate call_DropItemDelegate;

		// Token: 0x04000042 RID: 66
		public static ScriptingInterfaceOfIMBAgent.EnforceShieldUsageDelegate call_EnforceShieldUsageDelegate;

		// Token: 0x04000043 RID: 67
		public static ScriptingInterfaceOfIMBAgent.FadeInDelegate call_FadeInDelegate;

		// Token: 0x04000044 RID: 68
		public static ScriptingInterfaceOfIMBAgent.FadeOutDelegate call_FadeOutDelegate;

		// Token: 0x04000045 RID: 69
		public static ScriptingInterfaceOfIMBAgent.ForceAiBehaviorSelectionDelegate call_ForceAiBehaviorSelectionDelegate;

		// Token: 0x04000046 RID: 70
		public static ScriptingInterfaceOfIMBAgent.GetActionChannelCurrentActionWeightDelegate call_GetActionChannelCurrentActionWeightDelegate;

		// Token: 0x04000047 RID: 71
		public static ScriptingInterfaceOfIMBAgent.GetActionChannelWeightDelegate call_GetActionChannelWeightDelegate;

		// Token: 0x04000048 RID: 72
		public static ScriptingInterfaceOfIMBAgent.GetActionDirectionDelegate call_GetActionDirectionDelegate;

		// Token: 0x04000049 RID: 73
		public static ScriptingInterfaceOfIMBAgent.GetActionSetNoDelegate call_GetActionSetNoDelegate;

		// Token: 0x0400004A RID: 74
		public static ScriptingInterfaceOfIMBAgent.GetAgentFacialAnimationDelegate call_GetAgentFacialAnimationDelegate;

		// Token: 0x0400004B RID: 75
		public static ScriptingInterfaceOfIMBAgent.GetAgentFlagsDelegate call_GetAgentFlagsDelegate;

		// Token: 0x0400004C RID: 76
		public static ScriptingInterfaceOfIMBAgent.GetAgentScaleDelegate call_GetAgentScaleDelegate;

		// Token: 0x0400004D RID: 77
		public static ScriptingInterfaceOfIMBAgent.GetAgentVisualsDelegate call_GetAgentVisualsDelegate;

		// Token: 0x0400004E RID: 78
		public static ScriptingInterfaceOfIMBAgent.GetAgentVoiceDefinitionDelegate call_GetAgentVoiceDefinitionDelegate;

		// Token: 0x0400004F RID: 79
		public static ScriptingInterfaceOfIMBAgent.GetAimingTimerDelegate call_GetAimingTimerDelegate;

		// Token: 0x04000050 RID: 80
		public static ScriptingInterfaceOfIMBAgent.GetAIStateFlagsDelegate call_GetAIStateFlagsDelegate;

		// Token: 0x04000051 RID: 81
		public static ScriptingInterfaceOfIMBAgent.GetAttackDirectionDelegate call_GetAttackDirectionDelegate;

		// Token: 0x04000052 RID: 82
		public static ScriptingInterfaceOfIMBAgent.GetAttackDirectionUsageDelegate call_GetAttackDirectionUsageDelegate;

		// Token: 0x04000053 RID: 83
		public static ScriptingInterfaceOfIMBAgent.GetAverageVelocityDelegate call_GetAverageVelocityDelegate;

		// Token: 0x04000054 RID: 84
		public static ScriptingInterfaceOfIMBAgent.GetBodyRotationConstraintDelegate call_GetBodyRotationConstraintDelegate;

		// Token: 0x04000055 RID: 85
		public static ScriptingInterfaceOfIMBAgent.GetChestGlobalPositionDelegate call_GetChestGlobalPositionDelegate;

		// Token: 0x04000056 RID: 86
		public static ScriptingInterfaceOfIMBAgent.GetCollisionCapsuleDelegate call_GetCollisionCapsuleDelegate;

		// Token: 0x04000057 RID: 87
		public static ScriptingInterfaceOfIMBAgent.GetControllerDelegate call_GetControllerDelegate;

		// Token: 0x04000058 RID: 88
		public static ScriptingInterfaceOfIMBAgent.GetCrouchModeDelegate call_GetCrouchModeDelegate;

		// Token: 0x04000059 RID: 89
		public static ScriptingInterfaceOfIMBAgent.GetCurrentActionDelegate call_GetCurrentActionDelegate;

		// Token: 0x0400005A RID: 90
		public static ScriptingInterfaceOfIMBAgent.GetCurrentActionDirectionDelegate call_GetCurrentActionDirectionDelegate;

		// Token: 0x0400005B RID: 91
		public static ScriptingInterfaceOfIMBAgent.GetCurrentActionPriorityDelegate call_GetCurrentActionPriorityDelegate;

		// Token: 0x0400005C RID: 92
		public static ScriptingInterfaceOfIMBAgent.GetCurrentActionProgressDelegate call_GetCurrentActionProgressDelegate;

		// Token: 0x0400005D RID: 93
		public static ScriptingInterfaceOfIMBAgent.GetCurrentActionStageDelegate call_GetCurrentActionStageDelegate;

		// Token: 0x0400005E RID: 94
		public static ScriptingInterfaceOfIMBAgent.GetCurrentActionTypeDelegate call_GetCurrentActionTypeDelegate;

		// Token: 0x0400005F RID: 95
		public static ScriptingInterfaceOfIMBAgent.GetCurrentAimingErrorDelegate call_GetCurrentAimingErrorDelegate;

		// Token: 0x04000060 RID: 96
		public static ScriptingInterfaceOfIMBAgent.GetCurrentAimingTurbulanceDelegate call_GetCurrentAimingTurbulanceDelegate;

		// Token: 0x04000061 RID: 97
		public static ScriptingInterfaceOfIMBAgent.GetCurrentAnimationFlagsDelegate call_GetCurrentAnimationFlagsDelegate;

		// Token: 0x04000062 RID: 98
		public static ScriptingInterfaceOfIMBAgent.GetCurrentGuardModeDelegate call_GetCurrentGuardModeDelegate;

		// Token: 0x04000063 RID: 99
		public static ScriptingInterfaceOfIMBAgent.GetCurrentNavigationFaceIdDelegate call_GetCurrentNavigationFaceIdDelegate;

		// Token: 0x04000064 RID: 100
		public static ScriptingInterfaceOfIMBAgent.GetCurrentSpeedLimitDelegate call_GetCurrentSpeedLimitDelegate;

		// Token: 0x04000065 RID: 101
		public static ScriptingInterfaceOfIMBAgent.GetCurrentVelocityDelegate call_GetCurrentVelocityDelegate;

		// Token: 0x04000066 RID: 102
		public static ScriptingInterfaceOfIMBAgent.GetCurWeaponOffsetDelegate call_GetCurWeaponOffsetDelegate;

		// Token: 0x04000067 RID: 103
		public static ScriptingInterfaceOfIMBAgent.GetDefendMovementFlagDelegate call_GetDefendMovementFlagDelegate;

		// Token: 0x04000068 RID: 104
		public static ScriptingInterfaceOfIMBAgent.GetEventControlFlagsDelegate call_GetEventControlFlagsDelegate;

		// Token: 0x04000069 RID: 105
		public static ScriptingInterfaceOfIMBAgent.GetEyeGlobalHeightDelegate call_GetEyeGlobalHeightDelegate;

		// Token: 0x0400006A RID: 106
		public static ScriptingInterfaceOfIMBAgent.GetEyeGlobalPositionDelegate call_GetEyeGlobalPositionDelegate;

		// Token: 0x0400006B RID: 107
		public static ScriptingInterfaceOfIMBAgent.GetFiringOrderDelegate call_GetFiringOrderDelegate;

		// Token: 0x0400006C RID: 108
		public static ScriptingInterfaceOfIMBAgent.GetHeadCameraModeDelegate call_GetHeadCameraModeDelegate;

		// Token: 0x0400006D RID: 109
		public static ScriptingInterfaceOfIMBAgent.GetImmediateEnemyDelegate call_GetImmediateEnemyDelegate;

		// Token: 0x0400006E RID: 110
		public static ScriptingInterfaceOfIMBAgent.GetIsDoingPassiveAttackDelegate call_GetIsDoingPassiveAttackDelegate;

		// Token: 0x0400006F RID: 111
		public static ScriptingInterfaceOfIMBAgent.GetIsLeftStanceDelegate call_GetIsLeftStanceDelegate;

		// Token: 0x04000070 RID: 112
		public static ScriptingInterfaceOfIMBAgent.GetIsLookDirectionLockedDelegate call_GetIsLookDirectionLockedDelegate;

		// Token: 0x04000071 RID: 113
		public static ScriptingInterfaceOfIMBAgent.GetIsPassiveUsageConditionsAreMetDelegate call_GetIsPassiveUsageConditionsAreMetDelegate;

		// Token: 0x04000072 RID: 114
		public static ScriptingInterfaceOfIMBAgent.GetLastTargetVisibilityStateDelegate call_GetLastTargetVisibilityStateDelegate;

		// Token: 0x04000073 RID: 115
		public static ScriptingInterfaceOfIMBAgent.GetLookAgentDelegate call_GetLookAgentDelegate;

		// Token: 0x04000074 RID: 116
		public static ScriptingInterfaceOfIMBAgent.GetLookDirectionDelegate call_GetLookDirectionDelegate;

		// Token: 0x04000075 RID: 117
		public static ScriptingInterfaceOfIMBAgent.GetLookDirectionAsAngleDelegate call_GetLookDirectionAsAngleDelegate;

		// Token: 0x04000076 RID: 118
		public static ScriptingInterfaceOfIMBAgent.GetLookDownLimitDelegate call_GetLookDownLimitDelegate;

		// Token: 0x04000077 RID: 119
		public static ScriptingInterfaceOfIMBAgent.GetMaximumForwardUnlimitedSpeedDelegate call_GetMaximumForwardUnlimitedSpeedDelegate;

		// Token: 0x04000078 RID: 120
		public static ScriptingInterfaceOfIMBAgent.GetMaximumNumberOfAgentsDelegate call_GetMaximumNumberOfAgentsDelegate;

		// Token: 0x04000079 RID: 121
		public static ScriptingInterfaceOfIMBAgent.GetMaximumSpeedLimitDelegate call_GetMaximumSpeedLimitDelegate;

		// Token: 0x0400007A RID: 122
		public static ScriptingInterfaceOfIMBAgent.GetMissileRangeDelegate call_GetMissileRangeDelegate;

		// Token: 0x0400007B RID: 123
		public static ScriptingInterfaceOfIMBAgent.GetMissileRangeWithHeightDifferenceDelegate call_GetMissileRangeWithHeightDifferenceDelegate;

		// Token: 0x0400007C RID: 124
		public static ScriptingInterfaceOfIMBAgent.GetMonsterUsageIndexDelegate call_GetMonsterUsageIndexDelegate;

		// Token: 0x0400007D RID: 125
		public static ScriptingInterfaceOfIMBAgent.GetMountAgentDelegate call_GetMountAgentDelegate;

		// Token: 0x0400007E RID: 126
		public static ScriptingInterfaceOfIMBAgent.GetMovementDirectionDelegate call_GetMovementDirectionDelegate;

		// Token: 0x0400007F RID: 127
		public static ScriptingInterfaceOfIMBAgent.GetMovementDirectionAsAngleDelegate call_GetMovementDirectionAsAngleDelegate;

		// Token: 0x04000080 RID: 128
		public static ScriptingInterfaceOfIMBAgent.GetMovementFlagsDelegate call_GetMovementFlagsDelegate;

		// Token: 0x04000081 RID: 129
		public static ScriptingInterfaceOfIMBAgent.GetMovementInputVectorDelegate call_GetMovementInputVectorDelegate;

		// Token: 0x04000082 RID: 130
		public static ScriptingInterfaceOfIMBAgent.GetMovementLockedStateDelegate call_GetMovementLockedStateDelegate;

		// Token: 0x04000083 RID: 131
		public static ScriptingInterfaceOfIMBAgent.GetMovementVelocityDelegate call_GetMovementVelocityDelegate;

		// Token: 0x04000084 RID: 132
		public static ScriptingInterfaceOfIMBAgent.GetNativeActionIndexDelegate call_GetNativeActionIndexDelegate;

		// Token: 0x04000085 RID: 133
		public static ScriptingInterfaceOfIMBAgent.GetPathDistanceToPointDelegate call_GetPathDistanceToPointDelegate;

		// Token: 0x04000086 RID: 134
		public static ScriptingInterfaceOfIMBAgent.GetPositionDelegate call_GetPositionDelegate;

		// Token: 0x04000087 RID: 135
		public static ScriptingInterfaceOfIMBAgent.GetRenderCheckEnabledDelegate call_GetRenderCheckEnabledDelegate;

		// Token: 0x04000088 RID: 136
		public static ScriptingInterfaceOfIMBAgent.GetRetreatPosDelegate call_GetRetreatPosDelegate;

		// Token: 0x04000089 RID: 137
		public static ScriptingInterfaceOfIMBAgent.GetRiderAgentDelegate call_GetRiderAgentDelegate;

		// Token: 0x0400008A RID: 138
		public static ScriptingInterfaceOfIMBAgent.GetRidingOrderDelegate call_GetRidingOrderDelegate;

		// Token: 0x0400008B RID: 139
		public static ScriptingInterfaceOfIMBAgent.GetRotationFrameDelegate call_GetRotationFrameDelegate;

		// Token: 0x0400008C RID: 140
		public static ScriptingInterfaceOfIMBAgent.GetRunningSimulationDataUntilMaximumSpeedReachedDelegate call_GetRunningSimulationDataUntilMaximumSpeedReachedDelegate;

		// Token: 0x0400008D RID: 141
		public static ScriptingInterfaceOfIMBAgent.GetScriptedCombatFlagsDelegate call_GetScriptedCombatFlagsDelegate;

		// Token: 0x0400008E RID: 142
		public static ScriptingInterfaceOfIMBAgent.GetScriptedFlagsDelegate call_GetScriptedFlagsDelegate;

		// Token: 0x0400008F RID: 143
		public static ScriptingInterfaceOfIMBAgent.GetSelectedMountIndexDelegate call_GetSelectedMountIndexDelegate;

		// Token: 0x04000090 RID: 144
		public static ScriptingInterfaceOfIMBAgent.GetStateFlagsDelegate call_GetStateFlagsDelegate;

		// Token: 0x04000091 RID: 145
		public static ScriptingInterfaceOfIMBAgent.GetSteppedEntityIdDelegate call_GetSteppedEntityIdDelegate;

		// Token: 0x04000092 RID: 146
		public static ScriptingInterfaceOfIMBAgent.GetTargetAgentDelegate call_GetTargetAgentDelegate;

		// Token: 0x04000093 RID: 147
		public static ScriptingInterfaceOfIMBAgent.GetTargetDirectionDelegate call_GetTargetDirectionDelegate;

		// Token: 0x04000094 RID: 148
		public static ScriptingInterfaceOfIMBAgent.GetTargetFormationIndexDelegate call_GetTargetFormationIndexDelegate;

		// Token: 0x04000095 RID: 149
		public static ScriptingInterfaceOfIMBAgent.GetTargetPositionDelegate call_GetTargetPositionDelegate;

		// Token: 0x04000096 RID: 150
		public static ScriptingInterfaceOfIMBAgent.GetTeamDelegate call_GetTeamDelegate;

		// Token: 0x04000097 RID: 151
		public static ScriptingInterfaceOfIMBAgent.GetTurnSpeedDelegate call_GetTurnSpeedDelegate;

		// Token: 0x04000098 RID: 152
		public static ScriptingInterfaceOfIMBAgent.GetVisualPositionDelegate call_GetVisualPositionDelegate;

		// Token: 0x04000099 RID: 153
		public static ScriptingInterfaceOfIMBAgent.GetWalkModeDelegate call_GetWalkModeDelegate;

		// Token: 0x0400009A RID: 154
		public static ScriptingInterfaceOfIMBAgent.GetWalkSpeedLimitOfMountableDelegate call_GetWalkSpeedLimitOfMountableDelegate;

		// Token: 0x0400009B RID: 155
		public static ScriptingInterfaceOfIMBAgent.GetWeaponEntityFromEquipmentSlotDelegate call_GetWeaponEntityFromEquipmentSlotDelegate;

		// Token: 0x0400009C RID: 156
		public static ScriptingInterfaceOfIMBAgent.GetWieldedItemIndexDelegate call_GetWieldedItemIndexDelegate;

		// Token: 0x0400009D RID: 157
		public static ScriptingInterfaceOfIMBAgent.GetWieldedWeaponInfoDelegate call_GetWieldedWeaponInfoDelegate;

		// Token: 0x0400009E RID: 158
		public static ScriptingInterfaceOfIMBAgent.GetWorldPositionDelegate call_GetWorldPositionDelegate;

		// Token: 0x0400009F RID: 159
		public static ScriptingInterfaceOfIMBAgent.HandleBlowAuxDelegate call_HandleBlowAuxDelegate;

		// Token: 0x040000A0 RID: 160
		public static ScriptingInterfaceOfIMBAgent.HasPathThroughNavigationFaceIdFromDirectionDelegate call_HasPathThroughNavigationFaceIdFromDirectionDelegate;

		// Token: 0x040000A1 RID: 161
		public static ScriptingInterfaceOfIMBAgent.HasPathThroughNavigationFacesIDFromDirectionDelegate call_HasPathThroughNavigationFacesIDFromDirectionDelegate;

		// Token: 0x040000A2 RID: 162
		public static ScriptingInterfaceOfIMBAgent.InitializeAgentRecordDelegate call_InitializeAgentRecordDelegate;

		// Token: 0x040000A3 RID: 163
		public static ScriptingInterfaceOfIMBAgent.InvalidateAIWeaponSelectionsDelegate call_InvalidateAIWeaponSelectionsDelegate;

		// Token: 0x040000A4 RID: 164
		public static ScriptingInterfaceOfIMBAgent.InvalidateTargetAgentDelegate call_InvalidateTargetAgentDelegate;

		// Token: 0x040000A5 RID: 165
		public static ScriptingInterfaceOfIMBAgent.IsEnemyDelegate call_IsEnemyDelegate;

		// Token: 0x040000A6 RID: 166
		public static ScriptingInterfaceOfIMBAgent.IsFadingOutDelegate call_IsFadingOutDelegate;

		// Token: 0x040000A7 RID: 167
		public static ScriptingInterfaceOfIMBAgent.IsFriendDelegate call_IsFriendDelegate;

		// Token: 0x040000A8 RID: 168
		public static ScriptingInterfaceOfIMBAgent.IsLookRotationInSlowMotionDelegate call_IsLookRotationInSlowMotionDelegate;

		// Token: 0x040000A9 RID: 169
		public static ScriptingInterfaceOfIMBAgent.IsOnLandDelegate call_IsOnLandDelegate;

		// Token: 0x040000AA RID: 170
		public static ScriptingInterfaceOfIMBAgent.IsRetreatingDelegate call_IsRetreatingDelegate;

		// Token: 0x040000AB RID: 171
		public static ScriptingInterfaceOfIMBAgent.IsRunningAwayDelegate call_IsRunningAwayDelegate;

		// Token: 0x040000AC RID: 172
		public static ScriptingInterfaceOfIMBAgent.IsSlidingDelegate call_IsSlidingDelegate;

		// Token: 0x040000AD RID: 173
		public static ScriptingInterfaceOfIMBAgent.KickClearDelegate call_KickClearDelegate;

		// Token: 0x040000AE RID: 174
		public static ScriptingInterfaceOfIMBAgent.LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate call_LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate;

		// Token: 0x040000AF RID: 175
		public static ScriptingInterfaceOfIMBAgent.MakeDeadDelegate call_MakeDeadDelegate;

		// Token: 0x040000B0 RID: 176
		public static ScriptingInterfaceOfIMBAgent.MakeVoiceDelegate call_MakeVoiceDelegate;

		// Token: 0x040000B1 RID: 177
		public static ScriptingInterfaceOfIMBAgent.PlayerAttackDirectionDelegate call_PlayerAttackDirectionDelegate;

		// Token: 0x040000B2 RID: 178
		public static ScriptingInterfaceOfIMBAgent.PreloadForRenderingDelegate call_PreloadForRenderingDelegate;

		// Token: 0x040000B3 RID: 179
		public static ScriptingInterfaceOfIMBAgent.PrepareWeaponForDropInEquipmentSlotDelegate call_PrepareWeaponForDropInEquipmentSlotDelegate;

		// Token: 0x040000B4 RID: 180
		public static ScriptingInterfaceOfIMBAgent.RemoveMeshFromBoneDelegate call_RemoveMeshFromBoneDelegate;

		// Token: 0x040000B5 RID: 181
		public static ScriptingInterfaceOfIMBAgent.ResetEnemyCachesDelegate call_ResetEnemyCachesDelegate;

		// Token: 0x040000B6 RID: 182
		public static ScriptingInterfaceOfIMBAgent.ResetGuardDelegate call_ResetGuardDelegate;

		// Token: 0x040000B7 RID: 183
		public static ScriptingInterfaceOfIMBAgent.SetActionChannelDelegate call_SetActionChannelDelegate;

		// Token: 0x040000B8 RID: 184
		public static ScriptingInterfaceOfIMBAgent.SetActionSetDelegate call_SetActionSetDelegate;

		// Token: 0x040000B9 RID: 185
		public static ScriptingInterfaceOfIMBAgent.SetAgentExcludeStateForFaceGroupIdDelegate call_SetAgentExcludeStateForFaceGroupIdDelegate;

		// Token: 0x040000BA RID: 186
		public static ScriptingInterfaceOfIMBAgent.SetAgentFacialAnimationDelegate call_SetAgentFacialAnimationDelegate;

		// Token: 0x040000BB RID: 187
		public static ScriptingInterfaceOfIMBAgent.SetAgentFlagsDelegate call_SetAgentFlagsDelegate;

		// Token: 0x040000BC RID: 188
		public static ScriptingInterfaceOfIMBAgent.SetAgentScaleDelegate call_SetAgentScaleDelegate;

		// Token: 0x040000BD RID: 189
		public static ScriptingInterfaceOfIMBAgent.SetAIBehaviorParamsDelegate call_SetAIBehaviorParamsDelegate;

		// Token: 0x040000BE RID: 190
		public static ScriptingInterfaceOfIMBAgent.SetAIStateFlagsDelegate call_SetAIStateFlagsDelegate;

		// Token: 0x040000BF RID: 191
		public static ScriptingInterfaceOfIMBAgent.SetAllAIBehaviorParamsDelegate call_SetAllAIBehaviorParamsDelegate;

		// Token: 0x040000C0 RID: 192
		public static ScriptingInterfaceOfIMBAgent.SetAttackStateDelegate call_SetAttackStateDelegate;

		// Token: 0x040000C1 RID: 193
		public static ScriptingInterfaceOfIMBAgent.SetAutomaticTargetSelectionDelegate call_SetAutomaticTargetSelectionDelegate;

		// Token: 0x040000C2 RID: 194
		public static ScriptingInterfaceOfIMBAgent.SetAveragePingInMillisecondsDelegate call_SetAveragePingInMillisecondsDelegate;

		// Token: 0x040000C3 RID: 195
		public static ScriptingInterfaceOfIMBAgent.SetBodyArmorMaterialTypeDelegate call_SetBodyArmorMaterialTypeDelegate;

		// Token: 0x040000C4 RID: 196
		public static ScriptingInterfaceOfIMBAgent.SetColumnwiseFollowAgentDelegate call_SetColumnwiseFollowAgentDelegate;

		// Token: 0x040000C5 RID: 197
		public static ScriptingInterfaceOfIMBAgent.SetControllerDelegate call_SetControllerDelegate;

		// Token: 0x040000C6 RID: 198
		public static ScriptingInterfaceOfIMBAgent.SetCourageDelegate call_SetCourageDelegate;

		// Token: 0x040000C7 RID: 199
		public static ScriptingInterfaceOfIMBAgent.SetCurrentActionProgressDelegate call_SetCurrentActionProgressDelegate;

		// Token: 0x040000C8 RID: 200
		public static ScriptingInterfaceOfIMBAgent.SetCurrentActionSpeedDelegate call_SetCurrentActionSpeedDelegate;

		// Token: 0x040000C9 RID: 201
		public static ScriptingInterfaceOfIMBAgent.SetDirectionChangeTendencyDelegate call_SetDirectionChangeTendencyDelegate;

		// Token: 0x040000CA RID: 202
		public static ScriptingInterfaceOfIMBAgent.SetEventControlFlagsDelegate call_SetEventControlFlagsDelegate;

		// Token: 0x040000CB RID: 203
		public static ScriptingInterfaceOfIMBAgent.SetFiringOrderDelegate call_SetFiringOrderDelegate;

		// Token: 0x040000CC RID: 204
		public static ScriptingInterfaceOfIMBAgent.SetFormationFrameDisabledDelegate call_SetFormationFrameDisabledDelegate;

		// Token: 0x040000CD RID: 205
		public static ScriptingInterfaceOfIMBAgent.SetFormationFrameEnabledDelegate call_SetFormationFrameEnabledDelegate;

		// Token: 0x040000CE RID: 206
		public static ScriptingInterfaceOfIMBAgent.SetFormationInfoDelegate call_SetFormationInfoDelegate;

		// Token: 0x040000CF RID: 207
		public static ScriptingInterfaceOfIMBAgent.SetFormationIntegrityDataDelegate call_SetFormationIntegrityDataDelegate;

		// Token: 0x040000D0 RID: 208
		public static ScriptingInterfaceOfIMBAgent.SetFormationNoDelegate call_SetFormationNoDelegate;

		// Token: 0x040000D1 RID: 209
		public static ScriptingInterfaceOfIMBAgent.SetGuardedAgentIndexDelegate call_SetGuardedAgentIndexDelegate;

		// Token: 0x040000D2 RID: 210
		public static ScriptingInterfaceOfIMBAgent.SetHandInverseKinematicsFrameDelegate call_SetHandInverseKinematicsFrameDelegate;

		// Token: 0x040000D3 RID: 211
		public static ScriptingInterfaceOfIMBAgent.SetHandInverseKinematicsFrameForMissionObjectUsageDelegate call_SetHandInverseKinematicsFrameForMissionObjectUsageDelegate;

		// Token: 0x040000D4 RID: 212
		public static ScriptingInterfaceOfIMBAgent.SetHeadCameraModeDelegate call_SetHeadCameraModeDelegate;

		// Token: 0x040000D5 RID: 213
		public static ScriptingInterfaceOfIMBAgent.SetInitialFrameDelegate call_SetInitialFrameDelegate;

		// Token: 0x040000D6 RID: 214
		public static ScriptingInterfaceOfIMBAgent.SetInteractionAgentDelegate call_SetInteractionAgentDelegate;

		// Token: 0x040000D7 RID: 215
		public static ScriptingInterfaceOfIMBAgent.SetIsLookDirectionLockedDelegate call_SetIsLookDirectionLockedDelegate;

		// Token: 0x040000D8 RID: 216
		public static ScriptingInterfaceOfIMBAgent.SetLookAgentDelegate call_SetLookAgentDelegate;

		// Token: 0x040000D9 RID: 217
		public static ScriptingInterfaceOfIMBAgent.SetLookDirectionDelegate call_SetLookDirectionDelegate;

		// Token: 0x040000DA RID: 218
		public static ScriptingInterfaceOfIMBAgent.SetLookDirectionAsAngleDelegate call_SetLookDirectionAsAngleDelegate;

		// Token: 0x040000DB RID: 219
		public static ScriptingInterfaceOfIMBAgent.SetLookToPointOfInterestDelegate call_SetLookToPointOfInterestDelegate;

		// Token: 0x040000DC RID: 220
		public static ScriptingInterfaceOfIMBAgent.SetMaximumSpeedLimitDelegate call_SetMaximumSpeedLimitDelegate;

		// Token: 0x040000DD RID: 221
		public static ScriptingInterfaceOfIMBAgent.SetMonoObjectDelegate call_SetMonoObjectDelegate;

		// Token: 0x040000DE RID: 222
		public static ScriptingInterfaceOfIMBAgent.SetMountAgentDelegate call_SetMountAgentDelegate;

		// Token: 0x040000DF RID: 223
		public static ScriptingInterfaceOfIMBAgent.SetMovementDirectionDelegate call_SetMovementDirectionDelegate;

		// Token: 0x040000E0 RID: 224
		public static ScriptingInterfaceOfIMBAgent.SetMovementFlagsDelegate call_SetMovementFlagsDelegate;

		// Token: 0x040000E1 RID: 225
		public static ScriptingInterfaceOfIMBAgent.SetMovementInputVectorDelegate call_SetMovementInputVectorDelegate;

		// Token: 0x040000E2 RID: 226
		public static ScriptingInterfaceOfIMBAgent.SetNetworkPeerDelegate call_SetNetworkPeerDelegate;

		// Token: 0x040000E3 RID: 227
		public static ScriptingInterfaceOfIMBAgent.SetPositionDelegate call_SetPositionDelegate;

		// Token: 0x040000E4 RID: 228
		public static ScriptingInterfaceOfIMBAgent.SetReloadAmmoInSlotDelegate call_SetReloadAmmoInSlotDelegate;

		// Token: 0x040000E5 RID: 229
		public static ScriptingInterfaceOfIMBAgent.SetRenderCheckEnabledDelegate call_SetRenderCheckEnabledDelegate;

		// Token: 0x040000E6 RID: 230
		public static ScriptingInterfaceOfIMBAgent.SetRetreatModeDelegate call_SetRetreatModeDelegate;

		// Token: 0x040000E7 RID: 231
		public static ScriptingInterfaceOfIMBAgent.SetRidingOrderDelegate call_SetRidingOrderDelegate;

		// Token: 0x040000E8 RID: 232
		public static ScriptingInterfaceOfIMBAgent.SetScriptedCombatFlagsDelegate call_SetScriptedCombatFlagsDelegate;

		// Token: 0x040000E9 RID: 233
		public static ScriptingInterfaceOfIMBAgent.SetScriptedFlagsDelegate call_SetScriptedFlagsDelegate;

		// Token: 0x040000EA RID: 234
		public static ScriptingInterfaceOfIMBAgent.SetScriptedPositionDelegate call_SetScriptedPositionDelegate;

		// Token: 0x040000EB RID: 235
		public static ScriptingInterfaceOfIMBAgent.SetScriptedPositionAndDirectionDelegate call_SetScriptedPositionAndDirectionDelegate;

		// Token: 0x040000EC RID: 236
		public static ScriptingInterfaceOfIMBAgent.SetScriptedTargetEntityDelegate call_SetScriptedTargetEntityDelegate;

		// Token: 0x040000ED RID: 237
		public static ScriptingInterfaceOfIMBAgent.SetSelectedMountIndexDelegate call_SetSelectedMountIndexDelegate;

		// Token: 0x040000EE RID: 238
		public static ScriptingInterfaceOfIMBAgent.SetShouldCatchUpWithFormationDelegate call_SetShouldCatchUpWithFormationDelegate;

		// Token: 0x040000EF RID: 239
		public static ScriptingInterfaceOfIMBAgent.SetStateFlagsDelegate call_SetStateFlagsDelegate;

		// Token: 0x040000F0 RID: 240
		public static ScriptingInterfaceOfIMBAgent.SetTargetAgentDelegate call_SetTargetAgentDelegate;

		// Token: 0x040000F1 RID: 241
		public static ScriptingInterfaceOfIMBAgent.SetTargetFormationIndexDelegate call_SetTargetFormationIndexDelegate;

		// Token: 0x040000F2 RID: 242
		public static ScriptingInterfaceOfIMBAgent.SetTargetPositionDelegate call_SetTargetPositionDelegate;

		// Token: 0x040000F3 RID: 243
		public static ScriptingInterfaceOfIMBAgent.SetTargetPositionAndDirectionDelegate call_SetTargetPositionAndDirectionDelegate;

		// Token: 0x040000F4 RID: 244
		public static ScriptingInterfaceOfIMBAgent.SetTeamDelegate call_SetTeamDelegate;

		// Token: 0x040000F5 RID: 245
		public static ScriptingInterfaceOfIMBAgent.SetUsageIndexOfWeaponInSlotAsClientDelegate call_SetUsageIndexOfWeaponInSlotAsClientDelegate;

		// Token: 0x040000F6 RID: 246
		public static ScriptingInterfaceOfIMBAgent.SetWeaponAmmoAsClientDelegate call_SetWeaponAmmoAsClientDelegate;

		// Token: 0x040000F7 RID: 247
		public static ScriptingInterfaceOfIMBAgent.SetWeaponAmountInSlotDelegate call_SetWeaponAmountInSlotDelegate;

		// Token: 0x040000F8 RID: 248
		public static ScriptingInterfaceOfIMBAgent.SetWeaponHitPointsInSlotDelegate call_SetWeaponHitPointsInSlotDelegate;

		// Token: 0x040000F9 RID: 249
		public static ScriptingInterfaceOfIMBAgent.SetWeaponReloadPhaseAsClientDelegate call_SetWeaponReloadPhaseAsClientDelegate;

		// Token: 0x040000FA RID: 250
		public static ScriptingInterfaceOfIMBAgent.SetWieldedItemIndexAsClientDelegate call_SetWieldedItemIndexAsClientDelegate;

		// Token: 0x040000FB RID: 251
		public static ScriptingInterfaceOfIMBAgent.StartFadingOutDelegate call_StartFadingOutDelegate;

		// Token: 0x040000FC RID: 252
		public static ScriptingInterfaceOfIMBAgent.StartSwitchingWeaponUsageIndexAsClientDelegate call_StartSwitchingWeaponUsageIndexAsClientDelegate;

		// Token: 0x040000FD RID: 253
		public static ScriptingInterfaceOfIMBAgent.TickActionChannelsDelegate call_TickActionChannelsDelegate;

		// Token: 0x040000FE RID: 254
		public static ScriptingInterfaceOfIMBAgent.TryGetImmediateEnemyAgentMovementDataDelegate call_TryGetImmediateEnemyAgentMovementDataDelegate;

		// Token: 0x040000FF RID: 255
		public static ScriptingInterfaceOfIMBAgent.TryToSheathWeaponInHandDelegate call_TryToSheathWeaponInHandDelegate;

		// Token: 0x04000100 RID: 256
		public static ScriptingInterfaceOfIMBAgent.TryToWieldWeaponInSlotDelegate call_TryToWieldWeaponInSlotDelegate;

		// Token: 0x04000101 RID: 257
		public static ScriptingInterfaceOfIMBAgent.UpdateDrivenPropertiesDelegate call_UpdateDrivenPropertiesDelegate;

		// Token: 0x04000102 RID: 258
		public static ScriptingInterfaceOfIMBAgent.UpdateWeaponsDelegate call_UpdateWeaponsDelegate;

		// Token: 0x04000103 RID: 259
		public static ScriptingInterfaceOfIMBAgent.WeaponEquippedDelegate call_WeaponEquippedDelegate;

		// Token: 0x04000104 RID: 260
		public static ScriptingInterfaceOfIMBAgent.WieldNextWeaponDelegate call_WieldNextWeaponDelegate;

		// Token: 0x02000096 RID: 150
		// (Invoke) Token: 0x060004FD RID: 1277
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AddMeshToBoneDelegate(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex);

		// Token: 0x02000097 RID: 151
		// (Invoke) Token: 0x06000501 RID: 1281
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer AddPrefabToAgentBoneDelegate(UIntPtr agentPointer, byte[] prefabName, sbyte boneIndex);

		// Token: 0x02000098 RID: 152
		// (Invoke) Token: 0x06000505 RID: 1285
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AttachWeaponToBoneDelegate(UIntPtr agentPointer, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, sbyte boneIndex, ref MatrixFrame attachLocalFrame);

		// Token: 0x02000099 RID: 153
		// (Invoke) Token: 0x06000509 RID: 1289
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void AttachWeaponToWeaponInSlotDelegate(UIntPtr agentPointer, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, UIntPtr weaponEntity, int slotIndex, ref MatrixFrame attachLocalFrame);

		// Token: 0x0200009A RID: 154
		// (Invoke) Token: 0x0600050D RID: 1293
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.MovementControlFlag AttackDirectionToMovementFlagDelegate(UIntPtr agentPointer, Agent.UsageDirection direction);

		// Token: 0x0200009B RID: 155
		// (Invoke) Token: 0x06000511 RID: 1297
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void BuildDelegate(UIntPtr agentPointer, Vec3 eyeOffsetWrtHead);

		// Token: 0x0200009C RID: 156
		// (Invoke) Token: 0x06000515 RID: 1301
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool CanMoveDirectlyToPositionDelegate(UIntPtr agentPointer, in Vec2 position);

		// Token: 0x0200009D RID: 157
		// (Invoke) Token: 0x06000519 RID: 1305
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool CheckPathToAITargetAgentPassesThroughNavigationFaceIdFromDirectionDelegate(UIntPtr agentPointer, int navigationFaceId, ref Vec3 direction, float overridenCostForFaceId);

		// Token: 0x0200009E RID: 158
		// (Invoke) Token: 0x0600051D RID: 1309
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearEquipmentDelegate(UIntPtr agentPointer);

		// Token: 0x0200009F RID: 159
		// (Invoke) Token: 0x06000521 RID: 1313
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearHandInverseKinematicsDelegate(UIntPtr agentPointer);

		// Token: 0x020000A0 RID: 160
		// (Invoke) Token: 0x06000525 RID: 1317
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ClearTargetFrameDelegate(UIntPtr agentPointer);

		// Token: 0x020000A1 RID: 161
		// (Invoke) Token: 0x06000529 RID: 1321
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 ComputeAnimationDisplacementDelegate(UIntPtr agentPointer, float dt);

		// Token: 0x020000A2 RID: 162
		// (Invoke) Token: 0x0600052D RID: 1325
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void CreateBloodBurstAtLimbDelegate(UIntPtr agentPointer, sbyte realBoneIndex, float scale);

		// Token: 0x020000A3 RID: 163
		// (Invoke) Token: 0x06000531 RID: 1329
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DebugMoreDelegate(UIntPtr agentPointer);

		// Token: 0x020000A4 RID: 164
		// (Invoke) Token: 0x06000535 RID: 1333
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.MovementControlFlag DefendDirectionToMovementFlagDelegate(UIntPtr agentPointer, Agent.UsageDirection direction);

		// Token: 0x020000A5 RID: 165
		// (Invoke) Token: 0x06000539 RID: 1337
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DeleteAttachedWeaponFromBoneDelegate(UIntPtr agentPointer, int attachedWeaponIndex);

		// Token: 0x020000A6 RID: 166
		// (Invoke) Token: 0x0600053D RID: 1341
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DieDelegate(UIntPtr agentPointer, ref Blow b, sbyte overrideKillInfo);

		// Token: 0x020000A7 RID: 167
		// (Invoke) Token: 0x06000541 RID: 1345
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DisableLookToPointOfInterestDelegate(UIntPtr agentPointer);

		// Token: 0x020000A8 RID: 168
		// (Invoke) Token: 0x06000545 RID: 1349
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DisableScriptedCombatMovementDelegate(UIntPtr agentPointer);

		// Token: 0x020000A9 RID: 169
		// (Invoke) Token: 0x06000549 RID: 1353
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DisableScriptedMovementDelegate(UIntPtr agentPointer);

		// Token: 0x020000AA RID: 170
		// (Invoke) Token: 0x0600054D RID: 1357
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void DropItemDelegate(UIntPtr agentPointer, int itemIndex, int pickedUpItemType);

		// Token: 0x020000AB RID: 171
		// (Invoke) Token: 0x06000551 RID: 1361
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void EnforceShieldUsageDelegate(UIntPtr agentPointer, Agent.UsageDirection direction);

		// Token: 0x020000AC RID: 172
		// (Invoke) Token: 0x06000555 RID: 1365
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void FadeInDelegate(UIntPtr agentPointer);

		// Token: 0x020000AD RID: 173
		// (Invoke) Token: 0x06000559 RID: 1369
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void FadeOutDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool hideInstantly);

		// Token: 0x020000AE RID: 174
		// (Invoke) Token: 0x0600055D RID: 1373
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ForceAiBehaviorSelectionDelegate(UIntPtr agentPointer);

		// Token: 0x020000AF RID: 175
		// (Invoke) Token: 0x06000561 RID: 1377
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetActionChannelCurrentActionWeightDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000B0 RID: 176
		// (Invoke) Token: 0x06000565 RID: 1381
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetActionChannelWeightDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000B1 RID: 177
		// (Invoke) Token: 0x06000569 RID: 1385
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.UsageDirection GetActionDirectionDelegate(int actionIndex);

		// Token: 0x020000B2 RID: 178
		// (Invoke) Token: 0x0600056D RID: 1389
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetActionSetNoDelegate(UIntPtr agentPointer);

		// Token: 0x020000B3 RID: 179
		// (Invoke) Token: 0x06000571 RID: 1393
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetAgentFacialAnimationDelegate(UIntPtr agentPointer);

		// Token: 0x020000B4 RID: 180
		// (Invoke) Token: 0x06000575 RID: 1397
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate uint GetAgentFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000B5 RID: 181
		// (Invoke) Token: 0x06000579 RID: 1401
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetAgentScaleDelegate(UIntPtr agentPointer);

		// Token: 0x020000B6 RID: 182
		// (Invoke) Token: 0x0600057D RID: 1405
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate NativeObjectPointer GetAgentVisualsDelegate(UIntPtr agentPointer);

		// Token: 0x020000B7 RID: 183
		// (Invoke) Token: 0x06000581 RID: 1409
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetAgentVoiceDefinitionDelegate(UIntPtr agentPointer);

		// Token: 0x020000B8 RID: 184
		// (Invoke) Token: 0x06000585 RID: 1413
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetAimingTimerDelegate(UIntPtr agentPointer);

		// Token: 0x020000B9 RID: 185
		// (Invoke) Token: 0x06000589 RID: 1417
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.AIStateFlag GetAIStateFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000BA RID: 186
		// (Invoke) Token: 0x0600058D RID: 1421
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.UsageDirection GetAttackDirectionDelegate(UIntPtr agentPointer);

		// Token: 0x020000BB RID: 187
		// (Invoke) Token: 0x06000591 RID: 1425
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.UsageDirection GetAttackDirectionUsageDelegate(UIntPtr agentPointer);

		// Token: 0x020000BC RID: 188
		// (Invoke) Token: 0x06000595 RID: 1429
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetAverageVelocityDelegate(UIntPtr agentPointer);

		// Token: 0x020000BD RID: 189
		// (Invoke) Token: 0x06000599 RID: 1433
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetBodyRotationConstraintDelegate(UIntPtr agentPointer, int channelIndex);

		// Token: 0x020000BE RID: 190
		// (Invoke) Token: 0x0600059D RID: 1437
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetChestGlobalPositionDelegate(UIntPtr agentPointer);

		// Token: 0x020000BF RID: 191
		// (Invoke) Token: 0x060005A1 RID: 1441
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetCollisionCapsuleDelegate(UIntPtr agentPointer, ref CapsuleData value);

		// Token: 0x020000C0 RID: 192
		// (Invoke) Token: 0x060005A5 RID: 1445
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.ControllerType GetControllerDelegate(UIntPtr agentPointer);

		// Token: 0x020000C1 RID: 193
		// (Invoke) Token: 0x060005A9 RID: 1449
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetCrouchModeDelegate(UIntPtr agentPointer);

		// Token: 0x020000C2 RID: 194
		// (Invoke) Token: 0x060005AD RID: 1453
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCurrentActionDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000C3 RID: 195
		// (Invoke) Token: 0x060005B1 RID: 1457
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCurrentActionDirectionDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000C4 RID: 196
		// (Invoke) Token: 0x060005B5 RID: 1461
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCurrentActionPriorityDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000C5 RID: 197
		// (Invoke) Token: 0x060005B9 RID: 1465
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetCurrentActionProgressDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000C6 RID: 198
		// (Invoke) Token: 0x060005BD RID: 1469
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCurrentActionStageDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000C7 RID: 199
		// (Invoke) Token: 0x060005C1 RID: 1473
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCurrentActionTypeDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000C8 RID: 200
		// (Invoke) Token: 0x060005C5 RID: 1477
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetCurrentAimingErrorDelegate(UIntPtr agentPointer);

		// Token: 0x020000C9 RID: 201
		// (Invoke) Token: 0x060005C9 RID: 1481
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetCurrentAimingTurbulanceDelegate(UIntPtr agentPointer);

		// Token: 0x020000CA RID: 202
		// (Invoke) Token: 0x060005CD RID: 1485
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate ulong GetCurrentAnimationFlagsDelegate(UIntPtr agentPointer, int channelNo);

		// Token: 0x020000CB RID: 203
		// (Invoke) Token: 0x060005D1 RID: 1489
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.GuardMode GetCurrentGuardModeDelegate(UIntPtr agentPointer);

		// Token: 0x020000CC RID: 204
		// (Invoke) Token: 0x060005D5 RID: 1493
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetCurrentNavigationFaceIdDelegate(UIntPtr agentPointer);

		// Token: 0x020000CD RID: 205
		// (Invoke) Token: 0x060005D9 RID: 1497
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetCurrentSpeedLimitDelegate(UIntPtr agentPointer);

		// Token: 0x020000CE RID: 206
		// (Invoke) Token: 0x060005DD RID: 1501
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetCurrentVelocityDelegate(UIntPtr agentPointer);

		// Token: 0x020000CF RID: 207
		// (Invoke) Token: 0x060005E1 RID: 1505
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetCurWeaponOffsetDelegate(UIntPtr agentPointer);

		// Token: 0x020000D0 RID: 208
		// (Invoke) Token: 0x060005E5 RID: 1509
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.MovementControlFlag GetDefendMovementFlagDelegate(UIntPtr agentPointer);

		// Token: 0x020000D1 RID: 209
		// (Invoke) Token: 0x060005E9 RID: 1513
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate uint GetEventControlFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000D2 RID: 210
		// (Invoke) Token: 0x060005ED RID: 1517
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetEyeGlobalHeightDelegate(UIntPtr agentPointer);

		// Token: 0x020000D3 RID: 211
		// (Invoke) Token: 0x060005F1 RID: 1521
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetEyeGlobalPositionDelegate(UIntPtr agentPointer);

		// Token: 0x020000D4 RID: 212
		// (Invoke) Token: 0x060005F5 RID: 1525
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetFiringOrderDelegate(UIntPtr agentPointer);

		// Token: 0x020000D5 RID: 213
		// (Invoke) Token: 0x060005F9 RID: 1529
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetHeadCameraModeDelegate(UIntPtr agentPointer);

		// Token: 0x020000D6 RID: 214
		// (Invoke) Token: 0x060005FD RID: 1533
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetImmediateEnemyDelegate(UIntPtr agentPointer);

		// Token: 0x020000D7 RID: 215
		// (Invoke) Token: 0x06000601 RID: 1537
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetIsDoingPassiveAttackDelegate(UIntPtr agentPointer);

		// Token: 0x020000D8 RID: 216
		// (Invoke) Token: 0x06000605 RID: 1541
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetIsLeftStanceDelegate(UIntPtr agentPointer);

		// Token: 0x020000D9 RID: 217
		// (Invoke) Token: 0x06000609 RID: 1545
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetIsLookDirectionLockedDelegate(UIntPtr agentPointer);

		// Token: 0x020000DA RID: 218
		// (Invoke) Token: 0x0600060D RID: 1549
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetIsPassiveUsageConditionsAreMetDelegate(UIntPtr agentPointer);

		// Token: 0x020000DB RID: 219
		// (Invoke) Token: 0x06000611 RID: 1553
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetLastTargetVisibilityStateDelegate(UIntPtr agentPointer);

		// Token: 0x020000DC RID: 220
		// (Invoke) Token: 0x06000615 RID: 1557
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetLookAgentDelegate(UIntPtr agentPointer);

		// Token: 0x020000DD RID: 221
		// (Invoke) Token: 0x06000619 RID: 1561
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetLookDirectionDelegate(UIntPtr agentPointer);

		// Token: 0x020000DE RID: 222
		// (Invoke) Token: 0x0600061D RID: 1565
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetLookDirectionAsAngleDelegate(UIntPtr agentPointer);

		// Token: 0x020000DF RID: 223
		// (Invoke) Token: 0x06000621 RID: 1569
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetLookDownLimitDelegate(UIntPtr agentPointer);

		// Token: 0x020000E0 RID: 224
		// (Invoke) Token: 0x06000625 RID: 1573
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMaximumForwardUnlimitedSpeedDelegate(UIntPtr agentPointer);

		// Token: 0x020000E1 RID: 225
		// (Invoke) Token: 0x06000629 RID: 1577
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetMaximumNumberOfAgentsDelegate();

		// Token: 0x020000E2 RID: 226
		// (Invoke) Token: 0x0600062D RID: 1581
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMaximumSpeedLimitDelegate(UIntPtr agentPointer);

		// Token: 0x020000E3 RID: 227
		// (Invoke) Token: 0x06000631 RID: 1585
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMissileRangeDelegate(UIntPtr agentPointer);

		// Token: 0x020000E4 RID: 228
		// (Invoke) Token: 0x06000635 RID: 1589
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMissileRangeWithHeightDifferenceDelegate(UIntPtr agentPointer, float targetZ);

		// Token: 0x020000E5 RID: 229
		// (Invoke) Token: 0x06000639 RID: 1593
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetMonsterUsageIndexDelegate(byte[] monsterUsage);

		// Token: 0x020000E6 RID: 230
		// (Invoke) Token: 0x0600063D RID: 1597
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetMountAgentDelegate(UIntPtr agentPointer);

		// Token: 0x020000E7 RID: 231
		// (Invoke) Token: 0x06000641 RID: 1601
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetMovementDirectionDelegate(UIntPtr agentPointer);

		// Token: 0x020000E8 RID: 232
		// (Invoke) Token: 0x06000645 RID: 1605
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetMovementDirectionAsAngleDelegate(UIntPtr agentPointer);

		// Token: 0x020000E9 RID: 233
		// (Invoke) Token: 0x06000649 RID: 1609
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate uint GetMovementFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000EA RID: 234
		// (Invoke) Token: 0x0600064D RID: 1613
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetMovementInputVectorDelegate(UIntPtr agentPointer);

		// Token: 0x020000EB RID: 235
		// (Invoke) Token: 0x06000651 RID: 1617
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate AgentMovementLockedState GetMovementLockedStateDelegate(UIntPtr agentPointer);

		// Token: 0x020000EC RID: 236
		// (Invoke) Token: 0x06000655 RID: 1621
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetMovementVelocityDelegate(UIntPtr agentPointer);

		// Token: 0x020000ED RID: 237
		// (Invoke) Token: 0x06000659 RID: 1625
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetNativeActionIndexDelegate(byte[] actionName);

		// Token: 0x020000EE RID: 238
		// (Invoke) Token: 0x0600065D RID: 1629
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetPathDistanceToPointDelegate(UIntPtr agentPointer, ref Vec3 direction);

		// Token: 0x020000EF RID: 239
		// (Invoke) Token: 0x06000661 RID: 1633
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetPositionDelegate(UIntPtr agentPointer);

		// Token: 0x020000F0 RID: 240
		// (Invoke) Token: 0x06000665 RID: 1637
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetRenderCheckEnabledDelegate(UIntPtr agentPointer);

		// Token: 0x020000F1 RID: 241
		// (Invoke) Token: 0x06000669 RID: 1641
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate WorldPosition GetRetreatPosDelegate(UIntPtr agentPointer);

		// Token: 0x020000F2 RID: 242
		// (Invoke) Token: 0x0600066D RID: 1645
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetRiderAgentDelegate(UIntPtr agentPointer);

		// Token: 0x020000F3 RID: 243
		// (Invoke) Token: 0x06000671 RID: 1649
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetRidingOrderDelegate(UIntPtr agentPointer);

		// Token: 0x020000F4 RID: 244
		// (Invoke) Token: 0x06000675 RID: 1653
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetRotationFrameDelegate(UIntPtr agentPointer, ref MatrixFrame outFrame);

		// Token: 0x020000F5 RID: 245
		// (Invoke) Token: 0x06000679 RID: 1657
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void GetRunningSimulationDataUntilMaximumSpeedReachedDelegate(UIntPtr agentPointer, ref float combatAccelerationTime, ref float maxSpeed, IntPtr speedValues);

		// Token: 0x020000F6 RID: 246
		// (Invoke) Token: 0x0600067D RID: 1661
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetScriptedCombatFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000F7 RID: 247
		// (Invoke) Token: 0x06000681 RID: 1665
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetScriptedFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000F8 RID: 248
		// (Invoke) Token: 0x06000685 RID: 1669
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetSelectedMountIndexDelegate(UIntPtr agentPointer);

		// Token: 0x020000F9 RID: 249
		// (Invoke) Token: 0x06000689 RID: 1673
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate AgentState GetStateFlagsDelegate(UIntPtr agentPointer);

		// Token: 0x020000FA RID: 250
		// (Invoke) Token: 0x0600068D RID: 1677
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate UIntPtr GetSteppedEntityIdDelegate(UIntPtr agentPointer);

		// Token: 0x020000FB RID: 251
		// (Invoke) Token: 0x06000691 RID: 1681
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetTargetAgentDelegate(UIntPtr agentPointer);

		// Token: 0x020000FC RID: 252
		// (Invoke) Token: 0x06000695 RID: 1685
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetTargetDirectionDelegate(UIntPtr agentPointer);

		// Token: 0x020000FD RID: 253
		// (Invoke) Token: 0x06000699 RID: 1689
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetTargetFormationIndexDelegate(UIntPtr agentPointer);

		// Token: 0x020000FE RID: 254
		// (Invoke) Token: 0x0600069D RID: 1693
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec2 GetTargetPositionDelegate(UIntPtr agentPointer);

		// Token: 0x020000FF RID: 255
		// (Invoke) Token: 0x060006A1 RID: 1697
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate int GetTeamDelegate(UIntPtr agentPointer);

		// Token: 0x02000100 RID: 256
		// (Invoke) Token: 0x060006A5 RID: 1701
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetTurnSpeedDelegate(UIntPtr agentPointer);

		// Token: 0x02000101 RID: 257
		// (Invoke) Token: 0x060006A9 RID: 1705
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Vec3 GetVisualPositionDelegate(UIntPtr agentPointer);

		// Token: 0x02000102 RID: 258
		// (Invoke) Token: 0x060006AD RID: 1709
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetWalkModeDelegate(UIntPtr agentPointer);

		// Token: 0x02000103 RID: 259
		// (Invoke) Token: 0x060006B1 RID: 1713
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate float GetWalkSpeedLimitOfMountableDelegate(UIntPtr agentPointer);

		// Token: 0x02000104 RID: 260
		// (Invoke) Token: 0x060006B5 RID: 1717
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate UIntPtr GetWeaponEntityFromEquipmentSlotDelegate(UIntPtr agentPointer, int equipmentSlot);

		// Token: 0x02000105 RID: 261
		// (Invoke) Token: 0x060006B9 RID: 1721
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate EquipmentIndex GetWieldedItemIndexDelegate(UIntPtr agentPointer, int handIndex);

		// Token: 0x02000106 RID: 262
		// (Invoke) Token: 0x060006BD RID: 1725
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool GetWieldedWeaponInfoDelegate(UIntPtr agentPointer, int handIndex, [MarshalAs(UnmanagedType.U1)] ref bool isMeleeWeapon, [MarshalAs(UnmanagedType.U1)] ref bool isRangedWeapon);

		// Token: 0x02000107 RID: 263
		// (Invoke) Token: 0x060006C1 RID: 1729
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate WorldPosition GetWorldPositionDelegate(UIntPtr agentPointer);

		// Token: 0x02000108 RID: 264
		// (Invoke) Token: 0x060006C5 RID: 1733
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void HandleBlowAuxDelegate(UIntPtr agentPointer, ref Blow blow);

		// Token: 0x02000109 RID: 265
		// (Invoke) Token: 0x060006C9 RID: 1737
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool HasPathThroughNavigationFaceIdFromDirectionDelegate(UIntPtr agentPointer, int navigationFaceId, ref Vec2 direction);

		// Token: 0x0200010A RID: 266
		// (Invoke) Token: 0x060006CD RID: 1741
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool HasPathThroughNavigationFacesIDFromDirectionDelegate(UIntPtr agentPointer, int navigationFaceID_1, int navigationFaceID_2, int navigationFaceID_3, ref Vec2 direction);

		// Token: 0x0200010B RID: 267
		// (Invoke) Token: 0x060006D1 RID: 1745
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void InitializeAgentRecordDelegate(UIntPtr agentPointer);

		// Token: 0x0200010C RID: 268
		// (Invoke) Token: 0x060006D5 RID: 1749
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void InvalidateAIWeaponSelectionsDelegate(UIntPtr agentPointer);

		// Token: 0x0200010D RID: 269
		// (Invoke) Token: 0x060006D9 RID: 1753
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void InvalidateTargetAgentDelegate(UIntPtr agentPointer);

		// Token: 0x0200010E RID: 270
		// (Invoke) Token: 0x060006DD RID: 1757
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsEnemyDelegate(UIntPtr agentPointer1, UIntPtr agentPointer2);

		// Token: 0x0200010F RID: 271
		// (Invoke) Token: 0x060006E1 RID: 1761
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsFadingOutDelegate(UIntPtr agentPointer);

		// Token: 0x02000110 RID: 272
		// (Invoke) Token: 0x060006E5 RID: 1765
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsFriendDelegate(UIntPtr agentPointer1, UIntPtr agentPointer2);

		// Token: 0x02000111 RID: 273
		// (Invoke) Token: 0x060006E9 RID: 1769
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsLookRotationInSlowMotionDelegate(UIntPtr agentPointer);

		// Token: 0x02000112 RID: 274
		// (Invoke) Token: 0x060006ED RID: 1773
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsOnLandDelegate(UIntPtr agentPointer);

		// Token: 0x02000113 RID: 275
		// (Invoke) Token: 0x060006F1 RID: 1777
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsRetreatingDelegate(UIntPtr agentPointer);

		// Token: 0x02000114 RID: 276
		// (Invoke) Token: 0x060006F5 RID: 1781
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsRunningAwayDelegate(UIntPtr agentPointer);

		// Token: 0x02000115 RID: 277
		// (Invoke) Token: 0x060006F9 RID: 1785
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool IsSlidingDelegate(UIntPtr agentPointer);

		// Token: 0x02000116 RID: 278
		// (Invoke) Token: 0x060006FD RID: 1789
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool KickClearDelegate(UIntPtr agentPointer);

		// Token: 0x02000117 RID: 279
		// (Invoke) Token: 0x06000701 RID: 1793
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void LockAgentReplicationTableDataWithCurrentReliableSequenceNoDelegate(UIntPtr agentPointer, int peerIndex);

		// Token: 0x02000118 RID: 280
		// (Invoke) Token: 0x06000705 RID: 1797
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void MakeDeadDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool isKilled, int actionIndex);

		// Token: 0x02000119 RID: 281
		// (Invoke) Token: 0x06000709 RID: 1801
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void MakeVoiceDelegate(UIntPtr agentPointer, int voiceType, int predictionType);

		// Token: 0x0200011A RID: 282
		// (Invoke) Token: 0x0600070D RID: 1805
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate Agent.UsageDirection PlayerAttackDirectionDelegate(UIntPtr agentPointer);

		// Token: 0x0200011B RID: 283
		// (Invoke) Token: 0x06000711 RID: 1809
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void PreloadForRenderingDelegate(UIntPtr agentPointer);

		// Token: 0x0200011C RID: 284
		// (Invoke) Token: 0x06000715 RID: 1813
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void PrepareWeaponForDropInEquipmentSlotDelegate(UIntPtr agentPointer, int equipmentSlot, [MarshalAs(UnmanagedType.U1)] bool dropWithHolster);

		// Token: 0x0200011D RID: 285
		// (Invoke) Token: 0x06000719 RID: 1817
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void RemoveMeshFromBoneDelegate(UIntPtr agentPointer, UIntPtr meshPointer, sbyte boneIndex);

		// Token: 0x0200011E RID: 286
		// (Invoke) Token: 0x0600071D RID: 1821
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResetEnemyCachesDelegate(UIntPtr agentPointer);

		// Token: 0x0200011F RID: 287
		// (Invoke) Token: 0x06000721 RID: 1825
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void ResetGuardDelegate(UIntPtr agentPointer);

		// Token: 0x02000120 RID: 288
		// (Invoke) Token: 0x06000725 RID: 1829
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool SetActionChannelDelegate(UIntPtr agentPointer, int channelNo, int actionNo, ulong additionalFlags, [MarshalAs(UnmanagedType.U1)] bool ignorePriority, float blendWithNextActionFactor, float actionSpeed, float blendInPeriod, float blendOutPeriodToNoAnim, float startProgress, [MarshalAs(UnmanagedType.U1)] bool useLinearSmoothing, float blendOutPeriod, [MarshalAs(UnmanagedType.U1)] bool forceFaceMorphRestart);

		// Token: 0x02000121 RID: 289
		// (Invoke) Token: 0x06000729 RID: 1833
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetActionSetDelegate(UIntPtr agentPointer, ref AnimationSystemData animationSystemData);

		// Token: 0x02000122 RID: 290
		// (Invoke) Token: 0x0600072D RID: 1837
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAgentExcludeStateForFaceGroupIdDelegate(UIntPtr agentPointer, int faceGroupId, [MarshalAs(UnmanagedType.U1)] bool isExcluded);

		// Token: 0x02000123 RID: 291
		// (Invoke) Token: 0x06000731 RID: 1841
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAgentFacialAnimationDelegate(UIntPtr agentPointer, int channel, byte[] animationName, [MarshalAs(UnmanagedType.U1)] bool loop);

		// Token: 0x02000124 RID: 292
		// (Invoke) Token: 0x06000735 RID: 1845
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAgentFlagsDelegate(UIntPtr agentPointer, uint agentFlags);

		// Token: 0x02000125 RID: 293
		// (Invoke) Token: 0x06000739 RID: 1849
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAgentScaleDelegate(UIntPtr agentPointer, float scale);

		// Token: 0x02000126 RID: 294
		// (Invoke) Token: 0x0600073D RID: 1853
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAIBehaviorParamsDelegate(UIntPtr agentPointer, int behavior, float y1, float x2, float y2, float x3, float y3);

		// Token: 0x02000127 RID: 295
		// (Invoke) Token: 0x06000741 RID: 1857
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAIStateFlagsDelegate(UIntPtr agentPointer, Agent.AIStateFlag aiStateFlags);

		// Token: 0x02000128 RID: 296
		// (Invoke) Token: 0x06000745 RID: 1861
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAllAIBehaviorParamsDelegate(UIntPtr agentPointer, IntPtr behaviorParams);

		// Token: 0x02000129 RID: 297
		// (Invoke) Token: 0x06000749 RID: 1865
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAttackStateDelegate(UIntPtr agentPointer, int attackState);

		// Token: 0x0200012A RID: 298
		// (Invoke) Token: 0x0600074D RID: 1869
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAutomaticTargetSelectionDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool enable);

		// Token: 0x0200012B RID: 299
		// (Invoke) Token: 0x06000751 RID: 1873
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetAveragePingInMillisecondsDelegate(UIntPtr agentPointer, double averagePingInMilliseconds);

		// Token: 0x0200012C RID: 300
		// (Invoke) Token: 0x06000755 RID: 1877
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetBodyArmorMaterialTypeDelegate(UIntPtr agentPointer, ArmorComponent.ArmorMaterialTypes bodyArmorMaterialType);

		// Token: 0x0200012D RID: 301
		// (Invoke) Token: 0x06000759 RID: 1881
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetColumnwiseFollowAgentDelegate(UIntPtr agentPointer, int followAgentIndex, ref Vec2 followPosition);

		// Token: 0x0200012E RID: 302
		// (Invoke) Token: 0x0600075D RID: 1885
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetControllerDelegate(UIntPtr agentPointer, Agent.ControllerType controller);

		// Token: 0x0200012F RID: 303
		// (Invoke) Token: 0x06000761 RID: 1889
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCourageDelegate(UIntPtr agentPointer, float courage);

		// Token: 0x02000130 RID: 304
		// (Invoke) Token: 0x06000765 RID: 1893
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCurrentActionProgressDelegate(UIntPtr agentPointer, int channelNo, float progress);

		// Token: 0x02000131 RID: 305
		// (Invoke) Token: 0x06000769 RID: 1897
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetCurrentActionSpeedDelegate(UIntPtr agentPointer, int channelNo, float actionSpeed);

		// Token: 0x02000132 RID: 306
		// (Invoke) Token: 0x0600076D RID: 1901
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetDirectionChangeTendencyDelegate(UIntPtr agentPointer, float tendency);

		// Token: 0x02000133 RID: 307
		// (Invoke) Token: 0x06000771 RID: 1905
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetEventControlFlagsDelegate(UIntPtr agentPointer, Agent.EventControlFlag eventflag);

		// Token: 0x02000134 RID: 308
		// (Invoke) Token: 0x06000775 RID: 1909
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFiringOrderDelegate(UIntPtr agentPointer, int order);

		// Token: 0x02000135 RID: 309
		// (Invoke) Token: 0x06000779 RID: 1913
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFormationFrameDisabledDelegate(UIntPtr agentPointer);

		// Token: 0x02000136 RID: 310
		// (Invoke) Token: 0x0600077D RID: 1917
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool SetFormationFrameEnabledDelegate(UIntPtr agentPointer, WorldPosition position, Vec2 direction, Vec2 positionVelocity, float formationDirectionEnforcingFactor);

		// Token: 0x02000137 RID: 311
		// (Invoke) Token: 0x06000781 RID: 1921
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFormationInfoDelegate(UIntPtr agentPointer, int fileIndex, int rankIndex, int fileCount, int rankCount, Vec2 wallDir, int unitSpacing);

		// Token: 0x02000138 RID: 312
		// (Invoke) Token: 0x06000785 RID: 1925
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFormationIntegrityDataDelegate(UIntPtr agentPointer, Vec2 position, Vec2 currentFormationDirection, Vec2 averageVelocityOfCloseAgents, float averageMaxUnlimitedSpeedOfCloseAgents, float deviationOfPositions);

		// Token: 0x02000139 RID: 313
		// (Invoke) Token: 0x06000789 RID: 1929
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetFormationNoDelegate(UIntPtr agentPointer, int formationNo);

		// Token: 0x0200013A RID: 314
		// (Invoke) Token: 0x0600078D RID: 1933
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetGuardedAgentIndexDelegate(UIntPtr agentPointer, int guardedAgentIndex);

		// Token: 0x0200013B RID: 315
		// (Invoke) Token: 0x06000791 RID: 1937
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool SetHandInverseKinematicsFrameDelegate(UIntPtr agentPointer, ref MatrixFrame leftGlobalFrame, ref MatrixFrame rightGlobalFrame);

		// Token: 0x0200013C RID: 316
		// (Invoke) Token: 0x06000795 RID: 1941
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool SetHandInverseKinematicsFrameForMissionObjectUsageDelegate(UIntPtr agentPointer, in MatrixFrame localIKFrame, in MatrixFrame boundEntityGlobalFrame, float animationHeightDifference);

		// Token: 0x0200013D RID: 317
		// (Invoke) Token: 0x06000799 RID: 1945
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetHeadCameraModeDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x0200013E RID: 318
		// (Invoke) Token: 0x0600079D RID: 1949
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetInitialFrameDelegate(UIntPtr agentPointer, in Vec3 initialPosition, in Vec2 initialDirection, [MarshalAs(UnmanagedType.U1)] bool canSpawnOutsideOfMissionBoundary);

		// Token: 0x0200013F RID: 319
		// (Invoke) Token: 0x060007A1 RID: 1953
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetInteractionAgentDelegate(UIntPtr agentPointer, UIntPtr interactionAgentPointer);

		// Token: 0x02000140 RID: 320
		// (Invoke) Token: 0x060007A5 RID: 1957
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetIsLookDirectionLockedDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool isLocked);

		// Token: 0x02000141 RID: 321
		// (Invoke) Token: 0x060007A9 RID: 1961
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLookAgentDelegate(UIntPtr agentPointer, UIntPtr lookAtAgentPointer);

		// Token: 0x02000142 RID: 322
		// (Invoke) Token: 0x060007AD RID: 1965
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLookDirectionDelegate(UIntPtr agentPointer, Vec3 lookDirection);

		// Token: 0x02000143 RID: 323
		// (Invoke) Token: 0x060007B1 RID: 1969
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLookDirectionAsAngleDelegate(UIntPtr agentPointer, float value);

		// Token: 0x02000144 RID: 324
		// (Invoke) Token: 0x060007B5 RID: 1973
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetLookToPointOfInterestDelegate(UIntPtr agentPointer, Vec3 point);

		// Token: 0x02000145 RID: 325
		// (Invoke) Token: 0x060007B9 RID: 1977
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMaximumSpeedLimitDelegate(UIntPtr agentPointer, float maximumSpeedLimit, [MarshalAs(UnmanagedType.U1)] bool isMultiplier);

		// Token: 0x02000146 RID: 326
		// (Invoke) Token: 0x060007BD RID: 1981
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMonoObjectDelegate(UIntPtr agentPointer, int monoObject);

		// Token: 0x02000147 RID: 327
		// (Invoke) Token: 0x060007C1 RID: 1985
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMountAgentDelegate(UIntPtr agentPointer, int mountAgentIndex);

		// Token: 0x02000148 RID: 328
		// (Invoke) Token: 0x060007C5 RID: 1989
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMovementDirectionDelegate(UIntPtr agentPointer, in Vec2 direction);

		// Token: 0x02000149 RID: 329
		// (Invoke) Token: 0x060007C9 RID: 1993
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMovementFlagsDelegate(UIntPtr agentPointer, Agent.MovementControlFlag value);

		// Token: 0x0200014A RID: 330
		// (Invoke) Token: 0x060007CD RID: 1997
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetMovementInputVectorDelegate(UIntPtr agentPointer, Vec2 value);

		// Token: 0x0200014B RID: 331
		// (Invoke) Token: 0x060007D1 RID: 2001
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetNetworkPeerDelegate(UIntPtr agentPointer, int networkPeerIndex);

		// Token: 0x0200014C RID: 332
		// (Invoke) Token: 0x060007D5 RID: 2005
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetPositionDelegate(UIntPtr agentPointer, ref Vec3 position);

		// Token: 0x0200014D RID: 333
		// (Invoke) Token: 0x060007D9 RID: 2009
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetReloadAmmoInSlotDelegate(UIntPtr agentPointer, int slotIndex, int ammoSlotIndex, short reloadedAmmo);

		// Token: 0x0200014E RID: 334
		// (Invoke) Token: 0x060007DD RID: 2013
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetRenderCheckEnabledDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x0200014F RID: 335
		// (Invoke) Token: 0x060007E1 RID: 2017
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetRetreatModeDelegate(UIntPtr agentPointer, WorldPosition retreatPos, [MarshalAs(UnmanagedType.U1)] bool retreat);

		// Token: 0x02000150 RID: 336
		// (Invoke) Token: 0x060007E5 RID: 2021
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetRidingOrderDelegate(UIntPtr agentPointer, int order);

		// Token: 0x02000151 RID: 337
		// (Invoke) Token: 0x060007E9 RID: 2025
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetScriptedCombatFlagsDelegate(UIntPtr agentPointer, int flags);

		// Token: 0x02000152 RID: 338
		// (Invoke) Token: 0x060007ED RID: 2029
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetScriptedFlagsDelegate(UIntPtr agentPointer, int flags);

		// Token: 0x02000153 RID: 339
		// (Invoke) Token: 0x060007F1 RID: 2033
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool SetScriptedPositionDelegate(UIntPtr agentPointer, ref WorldPosition targetPosition, [MarshalAs(UnmanagedType.U1)] bool addHumanLikeDelay, int additionalFlags);

		// Token: 0x02000154 RID: 340
		// (Invoke) Token: 0x060007F5 RID: 2037
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool SetScriptedPositionAndDirectionDelegate(UIntPtr agentPointer, ref WorldPosition targetPosition, float targetDirection, [MarshalAs(UnmanagedType.U1)] bool addHumanLikeDelay, int additionalFlags);

		// Token: 0x02000155 RID: 341
		// (Invoke) Token: 0x060007F9 RID: 2041
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetScriptedTargetEntityDelegate(UIntPtr agentPointer, UIntPtr entityId, ref WorldPosition specialPosition, int additionalFlags, [MarshalAs(UnmanagedType.U1)] bool ignoreIfAlreadyAttacking);

		// Token: 0x02000156 RID: 342
		// (Invoke) Token: 0x060007FD RID: 2045
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetSelectedMountIndexDelegate(UIntPtr agentPointer, int mount_index);

		// Token: 0x02000157 RID: 343
		// (Invoke) Token: 0x06000801 RID: 2049
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetShouldCatchUpWithFormationDelegate(UIntPtr agentPointer, [MarshalAs(UnmanagedType.U1)] bool value);

		// Token: 0x02000158 RID: 344
		// (Invoke) Token: 0x06000805 RID: 2053
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetStateFlagsDelegate(UIntPtr agentPointer, AgentState StateFlags);

		// Token: 0x02000159 RID: 345
		// (Invoke) Token: 0x06000809 RID: 2057
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetTargetAgentDelegate(UIntPtr agentPointer, int targetAgentIndex);

		// Token: 0x0200015A RID: 346
		// (Invoke) Token: 0x0600080D RID: 2061
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetTargetFormationIndexDelegate(UIntPtr agentPointer, int targetFormationIndex);

		// Token: 0x0200015B RID: 347
		// (Invoke) Token: 0x06000811 RID: 2065
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetTargetPositionDelegate(UIntPtr agentPointer, ref Vec2 targetPosition);

		// Token: 0x0200015C RID: 348
		// (Invoke) Token: 0x06000815 RID: 2069
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetTargetPositionAndDirectionDelegate(UIntPtr agentPointer, ref Vec2 targetPosition, ref Vec3 targetDirection);

		// Token: 0x0200015D RID: 349
		// (Invoke) Token: 0x06000819 RID: 2073
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetTeamDelegate(UIntPtr agentPointer, int teamIndex);

		// Token: 0x0200015E RID: 350
		// (Invoke) Token: 0x0600081D RID: 2077
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetUsageIndexOfWeaponInSlotAsClientDelegate(UIntPtr agentPointer, int slotIndex, int usageIndex);

		// Token: 0x0200015F RID: 351
		// (Invoke) Token: 0x06000821 RID: 2081
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetWeaponAmmoAsClientDelegate(UIntPtr agentPointer, int equipmentIndex, int ammoEquipmentIndex, short ammo);

		// Token: 0x02000160 RID: 352
		// (Invoke) Token: 0x06000825 RID: 2085
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetWeaponAmountInSlotDelegate(UIntPtr agentPointer, int equipmentSlot, short amount, [MarshalAs(UnmanagedType.U1)] bool enforcePrimaryItem);

		// Token: 0x02000161 RID: 353
		// (Invoke) Token: 0x06000829 RID: 2089
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetWeaponHitPointsInSlotDelegate(UIntPtr agentPointer, int wieldedItemIndex, short hitPoints);

		// Token: 0x02000162 RID: 354
		// (Invoke) Token: 0x0600082D RID: 2093
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetWeaponReloadPhaseAsClientDelegate(UIntPtr agentPointer, int wieldedItemIndex, short reloadPhase);

		// Token: 0x02000163 RID: 355
		// (Invoke) Token: 0x06000831 RID: 2097
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void SetWieldedItemIndexAsClientDelegate(UIntPtr agentPointer, int handIndex, int wieldedItemIndex, [MarshalAs(UnmanagedType.U1)] bool isWieldedInstantly, [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn, int mainHandCurrentUsageIndex);

		// Token: 0x02000164 RID: 356
		// (Invoke) Token: 0x06000835 RID: 2101
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void StartFadingOutDelegate(UIntPtr agentPointer);

		// Token: 0x02000165 RID: 357
		// (Invoke) Token: 0x06000839 RID: 2105
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void StartSwitchingWeaponUsageIndexAsClientDelegate(UIntPtr agentPointer, int wieldedItemIndex, int usageIndex, Agent.UsageDirection currentMovementFlagUsageDirection);

		// Token: 0x02000166 RID: 358
		// (Invoke) Token: 0x0600083D RID: 2109
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void TickActionChannelsDelegate(UIntPtr agentPointer, float dt);

		// Token: 0x02000167 RID: 359
		// (Invoke) Token: 0x06000841 RID: 2113
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		[return: MarshalAs(UnmanagedType.U1)]
		public delegate bool TryGetImmediateEnemyAgentMovementDataDelegate(UIntPtr agentPointer, out float maximumForwardUnlimitedSpeed, out Vec3 position);

		// Token: 0x02000168 RID: 360
		// (Invoke) Token: 0x06000845 RID: 2117
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void TryToSheathWeaponInHandDelegate(UIntPtr agentPointer, int handIndex, int type);

		// Token: 0x02000169 RID: 361
		// (Invoke) Token: 0x06000849 RID: 2121
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void TryToWieldWeaponInSlotDelegate(UIntPtr agentPointer, int equipmentSlot, int type, [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

		// Token: 0x0200016A RID: 362
		// (Invoke) Token: 0x0600084D RID: 2125
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void UpdateDrivenPropertiesDelegate(UIntPtr agentPointer, IntPtr values);

		// Token: 0x0200016B RID: 363
		// (Invoke) Token: 0x06000851 RID: 2129
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void UpdateWeaponsDelegate(UIntPtr agentPointer);

		// Token: 0x0200016C RID: 364
		// (Invoke) Token: 0x06000855 RID: 2133
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void WeaponEquippedDelegate(UIntPtr agentPointer, int equipmentSlot, in WeaponDataAsNative weaponData, IntPtr weaponStatsData, int weaponStatsDataLength, in WeaponDataAsNative ammoWeaponData, IntPtr ammoWeaponStatsData, int ammoWeaponStatsDataLength, UIntPtr weaponEntity, [MarshalAs(UnmanagedType.U1)] bool removeOldWeaponFromScene, [MarshalAs(UnmanagedType.U1)] bool isWieldedOnSpawn);

		// Token: 0x0200016D RID: 365
		// (Invoke) Token: 0x06000859 RID: 2137
		[UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
		[SuppressUnmanagedCodeSecurity]
		[MonoNativeFunctionWrapper]
		public delegate void WieldNextWeaponDelegate(UIntPtr agentPointer, int handIndex, int wieldActionType);
	}
}
