using System;
using System.Runtime.InteropServices;
using TaleWorlds.Core;
using TaleWorlds.Engine;
using TaleWorlds.Library;

namespace TaleWorlds.MountAndBlade.AutoGenerated
{
	// Token: 0x02000005 RID: 5
	internal struct WeaponDataAsNative
	{
		// Token: 0x06000008 RID: 8 RVA: 0x00002084 File Offset: 0x00000284
		internal WeaponDataAsNative(WeaponData weaponData)
		{
			this.WeaponMesh = ((weaponData.WeaponMesh != null) ? weaponData.WeaponMesh.Pointer : UIntPtr.Zero);
			this.HolsterMesh = ((weaponData.HolsterMesh != null) ? weaponData.HolsterMesh.Pointer : UIntPtr.Zero);
			this.Prefab = weaponData.Prefab;
			this.HolsterMeshWithWeapon = ((weaponData.HolsterMeshWithWeapon != null) ? weaponData.HolsterMeshWithWeapon.Pointer : UIntPtr.Zero);
			this.FlyingMesh = ((weaponData.FlyingMesh != null) ? weaponData.FlyingMesh.Pointer : UIntPtr.Zero);
			this.Shape = ((weaponData.Shape != null) ? weaponData.Shape.Pointer : UIntPtr.Zero);
			this.CollisionShape = ((weaponData.CollisionShape != null) ? weaponData.CollisionShape.Pointer : UIntPtr.Zero);
			this.TableauMaterial = ((weaponData.TableauMaterial != null) ? weaponData.TableauMaterial.Pointer : UIntPtr.Zero);
			this.WeaponFrame = weaponData.WeaponFrame;
			this.PhysicsMaterialIndex = weaponData.PhysicsMaterialIndex;
			this.WeaponKind = weaponData.WeaponKind;
			this.ItemHolsterIndices = weaponData.ItemHolsterIndices;
			this.Difficulty = weaponData.Difficulty;
			this.BaseWeight = weaponData.BaseWeight;
			this.Inertia = weaponData.Inertia;
			this.ReloadPhase = weaponData.ReloadPhase;
			this.HasFlagAnimation = weaponData.HasFlagAnimation;
			this.AmmoOffset = weaponData.AmmoOffset;
			this.StickingFrame = weaponData.StickingFrame;
			this.ScaleFactor = weaponData.ScaleFactor;
			this.CenterOfMass = weaponData.CenterOfMass;
			this.CenterOfMass3D = weaponData.CenterOfMass3D;
			this.HolsterPositionShift = weaponData.HolsterPositionShift;
			this.FlyingSoundCode = weaponData.FlyingSoundCode;
			this.PassbySoundCode = weaponData.PassbySoundCode;
			this.TrailParticleName = weaponData.TrailParticleName;
			this.CenterOfMassShift = weaponData.CenterOfMassShift;
			this.DataValue = weaponData.DataValue;
			this.CurrentUsageIndex = weaponData.CurrentUsageIndex;
			this.AirFrictionConstant = weaponData.AirFrictionConstant;
			this.HasLowerHolsterPriority = weaponData.HasLowerHolsterPriority;
			this.GlossMultiplier = weaponData.GlossMultiplier;
		}

		// Token: 0x06000009 RID: 9 RVA: 0x000022C8 File Offset: 0x000004C8
		public static implicit operator WeaponData(WeaponDataAsNative agentEntityDataAsNative)
		{
			return new WeaponData
			{
				WeaponMesh = ((agentEntityDataAsNative.WeaponMesh != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.WeaponMesh) : null),
				HolsterMesh = ((agentEntityDataAsNative.HolsterMesh != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.HolsterMesh) : null),
				Prefab = agentEntityDataAsNative.Prefab,
				HolsterMeshWithWeapon = ((agentEntityDataAsNative.HolsterMeshWithWeapon != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.HolsterMeshWithWeapon) : null),
				FlyingMesh = ((agentEntityDataAsNative.FlyingMesh != UIntPtr.Zero) ? new MetaMesh(agentEntityDataAsNative.FlyingMesh) : null),
				Shape = ((agentEntityDataAsNative.Shape != UIntPtr.Zero) ? new PhysicsShape(agentEntityDataAsNative.Shape) : null),
				CollisionShape = ((agentEntityDataAsNative.CollisionShape != UIntPtr.Zero) ? new PhysicsShape(agentEntityDataAsNative.CollisionShape) : null),
				TableauMaterial = ((agentEntityDataAsNative.TableauMaterial != UIntPtr.Zero) ? new Material(agentEntityDataAsNative.TableauMaterial) : null),
				WeaponFrame = agentEntityDataAsNative.WeaponFrame,
				PhysicsMaterialIndex = agentEntityDataAsNative.PhysicsMaterialIndex,
				WeaponKind = agentEntityDataAsNative.WeaponKind,
				ItemHolsterIndices = agentEntityDataAsNative.ItemHolsterIndices,
				Difficulty = agentEntityDataAsNative.Difficulty,
				BaseWeight = agentEntityDataAsNative.BaseWeight,
				Inertia = agentEntityDataAsNative.Inertia,
				ReloadPhase = agentEntityDataAsNative.ReloadPhase,
				HasFlagAnimation = agentEntityDataAsNative.HasFlagAnimation,
				AmmoOffset = agentEntityDataAsNative.AmmoOffset,
				StickingFrame = agentEntityDataAsNative.StickingFrame,
				ScaleFactor = agentEntityDataAsNative.ScaleFactor,
				CenterOfMass = agentEntityDataAsNative.CenterOfMass,
				CenterOfMass3D = agentEntityDataAsNative.CenterOfMass3D,
				HolsterPositionShift = agentEntityDataAsNative.HolsterPositionShift,
				FlyingSoundCode = agentEntityDataAsNative.FlyingSoundCode,
				PassbySoundCode = agentEntityDataAsNative.PassbySoundCode,
				TrailParticleName = agentEntityDataAsNative.TrailParticleName,
				CenterOfMassShift = agentEntityDataAsNative.CenterOfMassShift,
				DataValue = agentEntityDataAsNative.DataValue,
				CurrentUsageIndex = agentEntityDataAsNative.CurrentUsageIndex,
				AirFrictionConstant = agentEntityDataAsNative.AirFrictionConstant,
				HasLowerHolsterPriority = agentEntityDataAsNative.HasLowerHolsterPriority,
				GlossMultiplier = agentEntityDataAsNative.GlossMultiplier
			};
		}

		// Token: 0x04000001 RID: 1
		internal UIntPtr WeaponMesh;

		// Token: 0x04000002 RID: 2
		internal UIntPtr HolsterMesh;

		// Token: 0x04000003 RID: 3
		internal UIntPtr HolsterMeshWithWeapon;

		// Token: 0x04000004 RID: 4
		internal UIntPtr FlyingMesh;

		// Token: 0x04000005 RID: 5
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		internal string Prefab;

		// Token: 0x04000006 RID: 6
		internal UIntPtr Shape;

		// Token: 0x04000007 RID: 7
		internal UIntPtr CollisionShape;

		// Token: 0x04000008 RID: 8
		internal UIntPtr TableauMaterial;

		// Token: 0x04000009 RID: 9
		internal MatrixFrame WeaponFrame;

		// Token: 0x0400000A RID: 10
		internal int PhysicsMaterialIndex;

		// Token: 0x0400000B RID: 11
		internal int WeaponKind;

		// Token: 0x0400000C RID: 12
		internal StackArray.StackArray4Int ItemHolsterIndices;

		// Token: 0x0400000D RID: 13
		internal int Difficulty;

		// Token: 0x0400000E RID: 14
		internal float BaseWeight;

		// Token: 0x0400000F RID: 15
		internal float Inertia;

		// Token: 0x04000010 RID: 16
		internal short ReloadPhase;

		// Token: 0x04000011 RID: 17
		[MarshalAs(UnmanagedType.U1)]
		internal bool HasFlagAnimation;

		// Token: 0x04000012 RID: 18
		internal Vec3 AmmoOffset;

		// Token: 0x04000013 RID: 19
		internal MatrixFrame StickingFrame;

		// Token: 0x04000014 RID: 20
		internal float ScaleFactor;

		// Token: 0x04000015 RID: 21
		internal float CenterOfMass;

		// Token: 0x04000016 RID: 22
		internal Vec3 CenterOfMass3D;

		// Token: 0x04000017 RID: 23
		internal Vec3 HolsterPositionShift;

		// Token: 0x04000018 RID: 24
		internal int FlyingSoundCode;

		// Token: 0x04000019 RID: 25
		internal int PassbySoundCode;

		// Token: 0x0400001A RID: 26
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		internal string TrailParticleName;

		// Token: 0x0400001B RID: 27
		internal Vec3 CenterOfMassShift;

		// Token: 0x0400001C RID: 28
		internal short DataValue;

		// Token: 0x0400001D RID: 29
		internal int CurrentUsageIndex;

		// Token: 0x0400001E RID: 30
		internal float AirFrictionConstant;

		// Token: 0x0400001F RID: 31
		[MarshalAs(UnmanagedType.U1)]
		internal bool HasLowerHolsterPriority;

		// Token: 0x04000020 RID: 32
		internal float GlossMultiplier;
	}
}
